[{
        "SQL": "SELECT COUNT(*) FROM management",
        "hyp_correct": false,
        "NL_query": "How many acting statuses are there?",
        "index": 4,
        "GT": "SELECT count(DISTINCT temporary_acting) FROM management",
        "DB": "department_management",
        "tables": [
            "management"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_name FROM Catalogs",
        "hyp_correct": false,
        "NL_query": "Find the names of all the catalog entries.",
        "index": 5,
        "GT": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_name FROM Catalogs",
        "hyp_correct": false,
        "NL_query": "What are all the catalog entry names?",
        "index": 6,
        "GT": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Catalogs.date_of_publication FROM Catalogs GROUP BY Catalogs.date_of_publication HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "On which days more than one revisions were made on catalogs.",
        "index": 12,
        "GT": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "DB": "product_catalog",
        "tables": [
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT medicine_enzyme_interaction.interaction_type) FROM medicine_enzyme_interaction",
        "hyp_correct": false,
        "NL_query": "How many kinds of enzymes are there?",
        "index": 37,
        "GT": "SELECT count(*) FROM enzyme",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "enzyme"
        ]
    },
    {
        "SQL": "SELECT MAX(enzyme.OMIM) FROM enzyme WHERE enzyme.Chromosome = OMIM",
        "hyp_correct": false,
        "NL_query": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "index": 41,
        "GT": "SELECT max(OMIM) FROM enzyme",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM medicine WHERE medicine.FDA_approved = \"no\"",
        "hyp_correct": false,
        "NL_query": "How many medicines have the FDA approval status 'No' ?",
        "index": 45,
        "GT": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM medicine WHERE medicine.FDA_approved != \"no\"",
        "hyp_correct": false,
        "NL_query": "How many medicines were not approved by the FDA?",
        "index": 46,
        "GT": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "SELECT \"Customers\" FROM Customers ORDER BY Customers.Customer_Details",
        "hyp_correct": false,
        "NL_query": "Sort the customer names in alphabetical order.",
        "index": 71,
        "GT": "SELECT customer_details FROM customers ORDER BY customer_details",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Claims_Processing.Claim_Stage_ID) FROM Claims_Processing",
        "hyp_correct": false,
        "NL_query": "Find the number of distinct stages in claim processing.",
        "index": 75,
        "GT": "SELECT count(*) FROM claims_processing_stages",
        "DB": "insurance_and_eClaims",
        "tables": [
            "claims_processing",
            "claims_processing_stages"
        ]
    },
    {
        "SQL": "SELECT Products.product_size FROM Products",
        "hyp_correct": false,
        "NL_query": "Show all product sizes.",
        "index": 88,
        "GT": "SELECT DISTINCT product_size FROM Products",
        "DB": "customers_and_invoices",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "SELECT Products.product_color FROM Products",
        "hyp_correct": false,
        "NL_query": "Show all product colors.",
        "index": 90,
        "GT": "SELECT DISTINCT product_color FROM Products",
        "DB": "customers_and_invoices",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM budget WHERE budget.Budget_invested_percent < (SELECT MIN(budget.Invested) FROM budget)",
        "hyp_correct": false,
        "NL_query": "How many budget record has a budget amount smaller than the invested amount?",
        "index": 106,
        "GT": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "DB": "school_finance",
        "tables": [
            "budget"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), endowment.School_id FROM endowment WHERE endowment.amount > 8.5 GROUP BY endowment.School_id HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "index": 107,
        "GT": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "DB": "school_finance",
        "tables": [
            "endowment"
        ]
    },
    {
        "SQL": "SELECT Products_Booked.product_id FROM Products_Booked GROUP BY Products_Booked.product_id HAVING COUNT(*) >= 3",
        "hyp_correct": false,
        "NL_query": "What is the id of the product that is booked for 3 times?",
        "index": 110,
        "GT": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3",
        "DB": "products_for_hire",
        "tables": [
            "products_booked"
        ]
    },
    {
        "SQL": "SELECT Employees.role_code FROM Employees",
        "hyp_correct": false,
        "NL_query": "What are all role codes?",
        "index": 123,
        "GT": "SELECT role_code FROM ROLES;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "roles"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Participants_in_Events.Participant_ID FROM Participants_in_Events",
        "hyp_correct": false,
        "NL_query": "What are all the distinct participant ids who attended any events?",
        "index": 134,
        "GT": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "DB": "local_govt_in_alabama",
        "tables": [
            "participants_in_events"
        ]
    },
    {
        "SQL": "SELECT SUM(perpetrator.Injured) FROM perpetrator ORDER BY perpetrator.Injured ASC",
        "hyp_correct": false,
        "NL_query": "List the number of people injured by perpetrators in ascending order.",
        "index": 151,
        "GT": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "DB": "perpetrator",
        "tables": [
            "perpetrator"
        ]
    },
    {
        "SQL": "SELECT people.Name FROM people ORDER BY people.Date_of_Birth DESC",
        "hyp_correct": false,
        "NL_query": "List all people names in the order of their date of birth from old to young.",
        "index": 159,
        "GT": "SELECT name FROM people ORDER BY date_of_birth",
        "DB": "candidate_poll",
        "tables": [
            "people"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM customer",
        "hyp_correct": false,
        "NL_query": "How many customers are there?",
        "index": 190,
        "GT": "SELECT sum(no_of_customers) FROM bank",
        "DB": "loan_1",
        "tables": [
            "bank",
            "customer"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM bank",
        "hyp_correct": false,
        "NL_query": "What is the total number of customers across banks?",
        "index": 191,
        "GT": "SELECT sum(no_of_customers) FROM bank",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM bank WHERE bank.city = \"New York\"",
        "hyp_correct": false,
        "NL_query": "Find the number of customers in the banks at New York City.",
        "index": 192,
        "GT": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "SELECT SUM(bank.no_of_customers) FROM bank WHERE bank.city = \"New York\"",
        "hyp_correct": false,
        "NL_query": "What is the total number of customers who use banks in New York City?",
        "index": 193,
        "GT": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "SELECT DISTINCT bank.branch_ID FROM bank JOIN loan ON bank.branch_ID = loan.branch_ID",
        "hyp_correct": false,
        "NL_query": "Find the name of bank branches that provided some loans.",
        "index": 208,
        "GT": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "DB": "loan_1",
        "tables": [
            "bank",
            "loan"
        ]
    },
    {
        "SQL": "SELECT DISTINCT customer.cust_name FROM bank JOIN loan ON bank.branch_ID = loan.cust_ID JOIN customer ON bank.branch_ID = customer.branch_ID",
        "hyp_correct": false,
        "NL_query": "What are the names of the different banks that have provided loans?",
        "index": 209,
        "GT": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank",
            "loan"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Fault_Log_Parts.fault_status) FROM Fault_Log_Parts",
        "hyp_correct": false,
        "NL_query": "How many fault status codes are recorded in the fault log parts table?",
        "index": 211,
        "GT": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "DB": "assets_maintenance",
        "tables": [
            "fault_log_parts"
        ]
    },
    {
        "SQL": "SELECT SUM(club_rank.Total) FROM club JOIN club_rank ON club.Club_ID = club_rank.Club_ID",
        "hyp_correct": false,
        "NL_query": "What is the total number of clubs?",
        "index": 216,
        "GT": "SELECT count(*) FROM club",
        "DB": "sports_competition",
        "tables": [
            "club_rank",
            "club"
        ]
    },
    {
        "SQL": "SELECT SUM(club_rank.Total) FROM club_rank GROUP BY club_rank.Club_ID HAVING AVG(club_rank.Total) < 10",
        "hyp_correct": false,
        "NL_query": "What is the total number of clubs that have less than 10 medals in total?",
        "index": 224,
        "GT": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "DB": "sports_competition",
        "tables": [
            "club_rank"
        ]
    },
    {
        "SQL": "SELECT club.name FROM club ORDER BY club.Start_year LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the names of all the clubs starting with the oldest?",
        "index": 226,
        "GT": "SELECT name FROM club ORDER BY Start_year ASC",
        "DB": "sports_competition",
        "tables": [
            "club"
        ]
    },
    {
        "SQL": "SELECT player.Position FROM player GROUP BY player.Position HAVING AVG(player.Points) > 20",
        "hyp_correct": false,
        "NL_query": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "index": 229,
        "GT": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT player.Position FROM player GROUP BY player.Position HAVING AVG(player.Points) > 20",
        "hyp_correct": false,
        "NL_query": "What are the positions of players whose average number of points scored by that position is larger than 20?",
        "index": 230,
        "GT": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT competition.Competition_type FROM competition GROUP BY competition.Competition_type HAVING COUNT(*) <= 10",
        "hyp_correct": false,
        "NL_query": "List the types of competition that have at most five competitions of that type.",
        "index": 231,
        "GT": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "SELECT competition.Competition_type FROM competition GROUP BY competition.Competition_type HAVING COUNT(*) > 5 ORDER BY COUNT(*) DESC LIMIT 5",
        "hyp_correct": false,
        "NL_query": "What are the types of competition that have most 5 competitions for that type?",
        "index": 232,
        "GT": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all English songs.",
        "index": 237,
        "GT": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all songs in English?",
        "index": 238,
        "GT": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT files.file_size FROM files WHERE files.formats = \"mp3\"",
        "hyp_correct": false,
        "NL_query": "What are the id of all the files in mp3 format?",
        "index": 240,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "DB": "music_1",
        "tables": [
            "files"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM artist WHERE artist.country = \"Bangladeshi\"",
        "hyp_correct": false,
        "NL_query": "How many Bangladeshi artists are listed?",
        "index": 242,
        "GT": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM company WHERE company.Headquarters = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "How many companies are headquartered in the US?",
        "index": 250,
        "GT": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student",
        "hyp_correct": false,
        "NL_query": "What are the first names of all the students?",
        "index": 277,
        "GT": "SELECT DISTINCT fname FROM student",
        "DB": "club_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student",
        "hyp_correct": false,
        "NL_query": "Find each student's first name.",
        "index": 278,
        "GT": "SELECT DISTINCT fname FROM student",
        "DB": "club_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Club.ClubDesc FROM Club WHERE Club.ClubName = \"Tennis club\"",
        "hyp_correct": false,
        "NL_query": "What is the description of the club named \"Tennis Club\"?",
        "index": 279,
        "GT": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"",
        "DB": "club_1",
        "tables": [
            "club"
        ]
    },
    {
        "SQL": "SELECT Club.ClubDesc FROM Club WHERE Club.ClubName = \"Tennis club\"",
        "hyp_correct": false,
        "NL_query": "Find the description of the club called \"Tennis Club\".",
        "index": 280,
        "GT": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"",
        "DB": "club_1",
        "tables": [
            "club"
        ]
    },
    {
        "SQL": "SELECT Club.ClubLocation FROM Club WHERE Club.ClubName = \"Tennis club\"",
        "hyp_correct": false,
        "NL_query": "What is the location of the club named \"Tennis Club\"?",
        "index": 283,
        "GT": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"",
        "DB": "club_1",
        "tables": [
            "club"
        ]
    },
    {
        "SQL": "SELECT Club.ClubLocation FROM Club WHERE Club.ClubName = \"Tennis club\"",
        "hyp_correct": false,
        "NL_query": "Where us the club named \"Tennis Club\" located?",
        "index": 284,
        "GT": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"",
        "DB": "club_1",
        "tables": [
            "club"
        ]
    },
    {
        "SQL": "SELECT SUM(Staff_Roles.role_description) FROM Staff_Roles WHERE Staff_Roles.role_code = \"researcher\"",
        "hyp_correct": false,
        "NL_query": "What is the complete description of the researcher role.",
        "index": 295,
        "GT": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "staff_roles"
        ]
    },
    {
        "SQL": "SELECT SUM(Staff_Roles.role_description) FROM Staff_Roles WHERE Staff_Roles.role_code = \"researcher\"",
        "hyp_correct": false,
        "NL_query": "What is the complete description of the job of a researcher?",
        "index": 296,
        "GT": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "staff_roles"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Project_Outcomes",
        "hyp_correct": false,
        "NL_query": "How many Patent outcomes are generated from all the projects?",
        "index": 297,
        "GT": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_outcomes"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Project_Outcomes",
        "hyp_correct": false,
        "NL_query": "How many patents outcomes were listed for all the projects?",
        "index": 298,
        "GT": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_outcomes"
        ]
    },
    {
        "SQL": "SELECT Research_Outcomes.outcome_description FROM Research_Outcomes",
        "hyp_correct": false,
        "NL_query": "What are the descriptions of all the project outcomes?",
        "index": 303,
        "GT": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
        "DB": "tracking_grants_for_research",
        "tables": [
            "research_outcomes",
            "project_outcomes"
        ]
    },
    {
        "SQL": "SELECT Research_Outcomes.outcome_description FROM Research_Outcomes",
        "hyp_correct": false,
        "NL_query": "List the description of the outcomes for all projects.",
        "index": 304,
        "GT": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
        "DB": "tracking_grants_for_research",
        "tables": [
            "research_outcomes",
            "project_outcomes"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Person WHERE Person.gender = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "How many females does this network has?",
        "index": 305,
        "GT": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Person WHERE Person.gender = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "How many females are in the network?",
        "index": 306,
        "GT": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT PersonFriend.friend FROM PersonFriend GROUP BY PersonFriend.name HAVING COUNT(*) = 1",
        "hyp_correct": false,
        "NL_query": "Find the person who has exactly one friend.",
        "index": 317,
        "GT": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
        "DB": "network_2",
        "tables": [
            "personfriend"
        ]
    },
    {
        "SQL": "SELECT Course.CName FROM Course WHERE Course.CID = 1",
        "hyp_correct": false,
        "NL_query": "What are the names of courses with 1 credit?",
        "index": 330,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  1",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "SELECT Course.CName FROM Course WHERE Course.CID = \"MTW\"",
        "hyp_correct": false,
        "NL_query": "What are the course names for courses taught on MTW?",
        "index": 332,
        "GT": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Department.DName) FROM Department WHERE Department.Division = as",
        "hyp_correct": false,
        "NL_query": "What is the number of departments in Division \"AS\"?",
        "index": 333,
        "GT": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "DB": "college_3",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Department.DName) FROM Department WHERE Department.Division = as",
        "hyp_correct": false,
        "NL_query": "How many departments are in the division AS?",
        "index": 334,
        "GT": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "DB": "college_3",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student ORDER BY Student.Age",
        "hyp_correct": false,
        "NL_query": "What are the first names of students, ordered by age from greatest to least?",
        "index": 346,
        "GT": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT aircraft.Description FROM aircraft JOIN airport_aircraft ON aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID",
        "hyp_correct": false,
        "NL_query": "What are the descriptions for the aircrafts?",
        "index": 350,
        "GT": "SELECT Description FROM aircraft",
        "DB": "aircraft",
        "tables": [
            "airport_aircraft",
            "aircraft"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM College",
        "hyp_correct": false,
        "NL_query": "How many students are enrolled in college?",
        "index": 360,
        "GT": "SELECT sum(enr) FROM College",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT AVG(College.enr), College.cName FROM College GROUP BY College.cName",
        "hyp_correct": false,
        "NL_query": "How many students, on average, does each college have enrolled?",
        "index": 362,
        "GT": "SELECT avg(enr) FROM College",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT College.cName) FROM College",
        "hyp_correct": false,
        "NL_query": "How many different colleges are there?",
        "index": 364,
        "GT": "SELECT count(*) FROM College",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Tryout.pPos FROM Tryout",
        "hyp_correct": false,
        "NL_query": "What are the unique types of player positions in the tryout?",
        "index": 373,
        "GT": "SELECT count(DISTINCT pPos) FROM tryout",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Tryout.pPos FROM Tryout",
        "hyp_correct": false,
        "NL_query": "What are the different types of player positions?",
        "index": 374,
        "GT": "SELECT count(DISTINCT pPos) FROM tryout",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT * FROM College",
        "hyp_correct": false,
        "NL_query": "How many students got accepted after the tryout?",
        "index": 375,
        "GT": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT AVG(College.enr) FROM College WHERE College.state = \"Florida\"",
        "hyp_correct": false,
        "NL_query": "What is average number of students enrolled in Florida colleges?",
        "index": 380,
        "GT": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT * FROM College ORDER BY College.enr DESC",
        "hyp_correct": false,
        "NL_query": "What information do you have on colleges sorted by increasing enrollment numbers?",
        "index": 384,
        "GT": "SELECT * FROM College ORDER BY enr",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT College.state FROM Tryout JOIN College ON Tryout.cName = College.cName",
        "hyp_correct": false,
        "NL_query": "Find the states where have some college students in tryout.",
        "index": 387,
        "GT": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Tryout.pPos) FROM Tryout WHERE Tryout.pPos = \"goalie\" OR Tryout.pPos = \"mid\"",
        "hyp_correct": false,
        "NL_query": "How many schools have some students playing in goalie and mid positions.",
        "index": 389,
        "GT": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Tryout WHERE Tryout.pPos = \"goalie\" OR Tryout.pPos = \"mid mid\"",
        "hyp_correct": false,
        "NL_query": "How many schools have students playing in goalie and mid-field positions?",
        "index": 390,
        "GT": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Tryout WHERE Tryout.pPos = \"mid\" AND Tryout.pPos != \"goalie\"",
        "hyp_correct": false,
        "NL_query": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "index": 391,
        "GT": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Tryout WHERE Tryout.pPos = \"mid\" AND Tryout.pPos != \"goalies\"",
        "hyp_correct": false,
        "NL_query": "What is the count of states with college students playing in the mid position but not as goalies?",
        "index": 392,
        "GT": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT member.Hometown FROM member GROUP BY member.Hometown HAVING COUNT(*) > 100",
        "hyp_correct": false,
        "NL_query": "What are the different cities that have more than 100 memberships?",
        "index": 414,
        "GT": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "member"
        ]
    },
    {
        "SQL": "SELECT DISTINCT member.Level FROM member",
        "hyp_correct": false,
        "NL_query": "What are the different membership levels?",
        "index": 418,
        "GT": "SELECT count(DISTINCT LEVEL) FROM member",
        "DB": "shop_membership",
        "tables": [
            "member"
        ]
    },
    {
        "SQL": "SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.gender = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the all-female dorms?",
        "index": 423,
        "GT": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Dorm.dorm_name FROM Dorm JOIN Lives_in ON Dorm.dormid = Lives_in.dormid WHERE Lives_in.stuid > 300 GROUP BY Dorm.dormid",
        "hyp_correct": false,
        "NL_query": "What are the names of all the dorms that can accomdate more than 300 students?",
        "index": 425,
        "GT": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
        "DB": "dorm_1",
        "tables": [
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Dorm_amenity.amenity_name) FROM Dorm_amenity",
        "hyp_correct": false,
        "NL_query": "Find the number of distinct amenities.",
        "index": 430,
        "GT": "SELECT count(*) FROM dorm_amenity",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Dorm",
        "hyp_correct": false,
        "NL_query": "How many diffrent dorm amenities are there?",
        "index": 431,
        "GT": "SELECT count(*) FROM dorm_amenity",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Dorm",
        "hyp_correct": false,
        "NL_query": "How many dorms have amenities?",
        "index": 437,
        "GT": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Dorm.dorm_name FROM Dorm JOIN Dorm_amenity ON Dorm.dormid = Dorm_amenity.amenid ORDER BY Dorm_amenity.amenity_name",
        "hyp_correct": false,
        "NL_query": "What are the different dorm amenity names in alphabetical order?",
        "index": 441,
        "GT": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Video_Games.GName FROM Video_Games",
        "hyp_correct": false,
        "NL_query": "What are the names of all video games that are collectible cards?",
        "index": 457,
        "GT": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "SELECT Video_Games.GType FROM Video_Games WHERE Video_Games.GName = \"Destiny\"",
        "hyp_correct": false,
        "NL_query": "What is the type of video game Call of Destiny.",
        "index": 458,
        "GT": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "SELECT Video_Games.GType FROM Video_Games WHERE Video_Games.GName = \"Call Destiny\"",
        "hyp_correct": false,
        "NL_query": "What type of game is Call of Destiny?",
        "index": 459,
        "GT": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Student.Advisor FROM Student",
        "hyp_correct": false,
        "NL_query": "What are the advisors",
        "index": 469,
        "GT": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
        "DB": "game_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM SportsInfo",
        "hyp_correct": false,
        "NL_query": "How many sports do we have?",
        "index": 470,
        "GT": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Video_Games.GType) FROM Video_Games",
        "hyp_correct": false,
        "NL_query": "How many different types of sports do we offer?",
        "index": 471,
        "GT": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "video_games",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Plays_Games.StuID) FROM Plays_Games",
        "hyp_correct": false,
        "NL_query": "How many students play sports?",
        "index": 472,
        "GT": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "plays_games",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT Student.StuID FROM Student",
        "hyp_correct": false,
        "NL_query": "List ids for all student who are on scholarship.",
        "index": 474,
        "GT": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT SportsInfo.StuID FROM SportsInfo",
        "hyp_correct": false,
        "NL_query": "What are the ids for all sporty students who are on scholarship?",
        "index": 475,
        "GT": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Plays_Games",
        "hyp_correct": false,
        "NL_query": "How many games are played for all students?",
        "index": 476,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "plays_games",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT Forms.form_type_code FROM Forms",
        "hyp_correct": false,
        "NL_query": "List all the types of forms.",
        "index": 487,
        "GT": "SELECT DISTINCT form_type_code FROM forms",
        "DB": "e_government",
        "tables": [
            "forms"
        ]
    },
    {
        "SQL": "SELECT school.Type FROM school GROUP BY school.Type HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "Show the types of schools that have two schools.",
        "index": 504,
        "GT": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
        "DB": "school_bus",
        "tables": [
            "school"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Ref_Budget_Codes.Budget_Type_Code) FROM Ref_Budget_Codes",
        "hyp_correct": false,
        "NL_query": "How many budget types do we have?",
        "index": 519,
        "GT": "SELECT count(*) FROM Ref_budget_codes",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "SELECT station.Location FROM station JOIN train_station ON station.Station_ID = train_station.Station_ID",
        "hyp_correct": false,
        "NL_query": "What are all locations of train stations?",
        "index": 528,
        "GT": "SELECT DISTINCT LOCATION FROM station",
        "DB": "train_station",
        "tables": [
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id WHERE Addresses.state_province_county = \"Georgia\"",
        "hyp_correct": false,
        "NL_query": "How many staff live in state Georgia?",
        "index": 541,
        "GT": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT Customers.date_of_birth FROM Customers WHERE Customers.customer_status_code = \"Good customer\"",
        "hyp_correct": false,
        "NL_query": "When are the birthdays of customer who are classified as 'Good Customer' status?",
        "index": 543,
        "GT": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'",
        "DB": "driving_school",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT Customers.date_of_birth FROM Customers WHERE Customers.customer_status_code = \"Good customer\"",
        "hyp_correct": false,
        "NL_query": "What is the date of birth of every customer whose status code is 'Good Customer'?",
        "index": 544,
        "GT": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'",
        "DB": "driving_school",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Lessons WHERE Lessons.lesson_status_code = \"cancelled\"",
        "hyp_correct": false,
        "NL_query": "How many lessons were in cancelled state?",
        "index": 547,
        "GT": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "DB": "driving_school",
        "tables": [
            "lessons"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Lessons WHERE Lessons.lesson_status_code = \"cancelled\"",
        "hyp_correct": false,
        "NL_query": "How many lessons have been cancelled?",
        "index": 548,
        "GT": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "DB": "driving_school",
        "tables": [
            "lessons"
        ]
    },
    {
        "SQL": "SELECT airports.name FROM airports WHERE airports.elevation BETWEEN 50 AND 50",
        "hyp_correct": false,
        "NL_query": "Find the name of airports whose altitude is between -50 and 50.",
        "index": 557,
        "GT": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.name FROM airports WHERE airports.elevation BETWEEN 50 AND 50",
        "hyp_correct": false,
        "NL_query": "What are the names of all airports whose elevation is between -50 and 50?",
        "index": 558,
        "GT": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airports WHERE airports.country = \"Greenland\"",
        "hyp_correct": false,
        "NL_query": "In how many cities are there airports in the country of Greenland?",
        "index": 560,
        "GT": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airports GROUP BY airports.city HAVING COUNT(*) > 3",
        "hyp_correct": false,
        "NL_query": "How many cities are there that have more than 3 airports?",
        "index": 561,
        "GT": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airports GROUP BY airports.city HAVING COUNT(*) > 3",
        "hyp_correct": false,
        "NL_query": "What is the count of cities with more than 3 airports?",
        "index": 562,
        "GT": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT Order_Items.order_id FROM Order_Items WHERE Order_Items.product_id = 11",
        "hyp_correct": false,
        "NL_query": "Find the ids of all the order items whose product id is 11.",
        "index": 567,
        "GT": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "DB": "tracking_orders",
        "tables": [
            "order_items"
        ]
    },
    {
        "SQL": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4",
        "hyp_correct": false,
        "NL_query": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "index": 583,
        "GT": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4",
        "hyp_correct": false,
        "NL_query": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "index": 584,
        "GT": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM car_names WHERE car_names.Model = 1980",
        "hyp_correct": false,
        "NL_query": "In 1980, how many cars were made?",
        "index": 592,
        "GT": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight <= 3000 AND 4000",
        "hyp_correct": false,
        "NL_query": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "index": 593,
        "GT": "select distinct year from cars_data where weight between 3000 and 4000;",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Cartoon.Written_by) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\"",
        "hyp_correct": false,
        "NL_query": "How many cartoons were written by \"Joseph Kuhr\"?",
        "index": 611,
        "GT": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "DB": "tvshow",
        "tables": [
            "cartoon"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Cartoon.Written_by) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\"",
        "hyp_correct": false,
        "NL_query": "What is the number of cartoones written by Joseph Kuhr?",
        "index": 612,
        "GT": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "DB": "tvshow",
        "tables": [
            "cartoon"
        ]
    },
    {
        "SQL": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"",
        "hyp_correct": false,
        "NL_query": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "index": 621,
        "GT": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"",
        "hyp_correct": false,
        "NL_query": "When did the episode \"A Love of a Lifetime\" air?",
        "index": 622,
        "GT": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"",
        "hyp_correct": false,
        "NL_query": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "index": 623,
        "GT": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"",
        "hyp_correct": false,
        "NL_query": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "index": 624,
        "GT": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "SELECT TV_Channel.Country FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2",
        "hyp_correct": false,
        "NL_query": "find id of the tv channels that from the countries where have more than two tv channels.",
        "index": 625,
        "GT": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_series.Channel FROM TV_series GROUP BY TV_series.Channel HAVING COUNT(*) > 2",
        "hyp_correct": false,
        "NL_query": "What are the ids of all tv channels that have more than 2 TV channels?",
        "index": 626,
        "GT": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "DB": "tvshow",
        "tables": [
            "tv_series",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT department.Name, COUNT(*) FROM management JOIN department ON department.Department_ID = management.head_ID WHERE management.temporary_acting = \"yes\"",
        "hyp_correct": false,
        "NL_query": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "index": 630,
        "GT": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
        "DB": "department_management",
        "tables": [
            "department",
            "management"
        ]
    },
    {
        "SQL": "SELECT DISTINCT head.age FROM head",
        "hyp_correct": false,
        "NL_query": "What are the distinct ages of the heads who are acting?",
        "index": 631,
        "GT": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "DB": "department_management",
        "tables": [
            "management",
            "head"
        ]
    },
    {
        "SQL": "SELECT department.Department_ID, department.Name, COUNT(*) FROM department JOIN management ON department.Department_ID = management.head_ID GROUP BY management.department_ID HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "index": 632,
        "GT": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
        "DB": "department_management",
        "tables": [
            "department",
            "management"
        ]
    },
    {
        "SQL": "SELECT head.head_ID, head.name FROM head WHERE head.name LIKE \"% Ha %\"",
        "hyp_correct": false,
        "NL_query": "Which head's name has the substring 'Ha'? List the id and name.",
        "index": 633,
        "GT": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
        "DB": "department_management",
        "tables": [
            "head"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_publisher FROM Catalogs WHERE Catalogs.catalog_name LIKE \"% Murray %\"",
        "hyp_correct": false,
        "NL_query": "Find all the catalog publishers whose name contains \"Murray\"",
        "index": 636,
        "GT": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "DB": "product_catalog",
        "tables": [
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_publisher FROM Catalogs WHERE Catalogs.catalog_name LIKE \"% Murray %\"",
        "hyp_correct": false,
        "NL_query": "Which catalog publishers have substring \"Murray\" in their names?",
        "index": 637,
        "GT": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "DB": "product_catalog",
        "tables": [
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_name, Catalogs.date_of_publication FROM Catalogs JOIN Catalog_Structure ON Catalogs.catalog_id = Catalog_Structure.catalog_id WHERE Catalog_Structure.catalog_level_name > 5",
        "hyp_correct": false,
        "NL_query": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "index": 638,
        "GT": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "DB": "product_catalog",
        "tables": [
            "catalog_structure",
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_name, Catalogs.date_of_publication FROM Catalogs JOIN Catalog_Structure ON Catalogs.catalog_id = Catalog_Structure.catalog_id WHERE Catalog_Structure.catalog_level_name > 5",
        "hyp_correct": false,
        "NL_query": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "index": 639,
        "GT": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "DB": "product_catalog",
        "tables": [
            "catalog_structure",
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT AVG(Catalog_Contents.price_in_euros), MIN(Catalog_Contents.price_in_dollars) FROM Catalog_Contents",
        "hyp_correct": false,
        "NL_query": "Give me the average and minimum price (in Euro) of the products.",
        "index": 643,
        "GT": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT Catalog_Contents.product_stock_number FROM Catalog_Contents ORDER BY Catalog_Contents.capacity LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the name of the product that has the smallest capacity.",
        "index": 646,
        "GT": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT Catalog_Contents.product_stock_number FROM Catalog_Contents WHERE Catalog_Contents.product_stock_number LIKE \"2 %\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all the products whose stock number starts with \"2\".",
        "index": 648,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents WHERE Catalog_Contents.catalog_entry_name LIKE \"2 %\"",
        "hyp_correct": false,
        "NL_query": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "index": 649,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_name FROM Catalogs JOIN Catalog_Contents ON Catalogs.catalog_id = Catalog_Contents.catalog_entry_id WHERE Catalog_Contents.catalog_level_number = 8",
        "hyp_correct": false,
        "NL_query": "Find the names of catalog entries with level number 8.",
        "index": 650,
        "GT": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalog_contents_additional_attributes",
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_name FROM Catalogs JOIN Catalog_Contents ON Catalogs.catalog_id = Catalog_Contents.catalog_entry_id WHERE Catalog_Contents.catalog_level_number = 8",
        "hyp_correct": false,
        "NL_query": "What are the names of catalog entries with level number 8?",
        "index": 651,
        "GT": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalog_contents_additional_attributes",
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Catalog_Contents.product_stock_number FROM Catalog_Contents WHERE Catalog_Contents.length < 3 OR Catalog_Contents.height > 5",
        "hyp_correct": false,
        "NL_query": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "index": 652,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT Catalog_Contents.catalog_entry_name FROM Catalog_Contents WHERE Catalog_Contents.length < 3 OR Catalog_Contents.length < 5",
        "hyp_correct": false,
        "NL_query": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "index": 653,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT Attribute_Definitions.attribute_name, Catalog_Contents_Additional_Attributes.attribute_id FROM Attribute_Definitions JOIN Catalog_Contents_Additional_Attributes ON Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id WHERE Catalog_Contents_Additional_Attributes.attribute_value = 0",
        "hyp_correct": false,
        "NL_query": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "index": 655,
        "GT": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents_additional_attributes",
            "attribute_definitions"
        ]
    },
    {
        "SQL": "SELECT Catalog_Contents.capacity FROM Catalog_Contents WHERE Catalog_Contents.price_in_dollars > 700",
        "hyp_correct": false,
        "NL_query": "Find the name and capacity of products with price greater than 700 (in USD).",
        "index": 656,
        "GT": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_name, Catalog_Contents.capacity FROM Catalogs JOIN Catalog_Contents ON Catalogs.catalog_id = Catalog_Contents.catalog_entry_id WHERE Catalog_Contents.price_in_dollars > 700",
        "hyp_correct": false,
        "NL_query": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "index": 657,
        "GT": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Artist.Name FROM Artist WHERE Artist.Name LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all artists that have \"a\" in their names.",
        "index": 660,
        "GT": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "DB": "chinook_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "SELECT Artist.Name FROM Artist WHERE Artist.Name LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "What are the names of artist who have the letter 'a' in their names?",
        "index": 661,
        "GT": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "DB": "chinook_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "SELECT Album.Title FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = \"AC / DC\"",
        "hyp_correct": false,
        "NL_query": "Find the title of all the albums of the artist \"AC/DC\".",
        "index": 662,
        "GT": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "SELECT Album.Title FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = \"AC / DC\"",
        "hyp_correct": false,
        "NL_query": "What are the titles of albums by the artist \"AC/DC\"?",
        "index": 663,
        "GT": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "SELECT Track.Name FROM Track WHERE Track.Name LIKE \"% you %\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all the tracks that contain the word \"you\".",
        "index": 668,
        "GT": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "DB": "chinook_1",
        "tables": [
            "track"
        ]
    },
    {
        "SQL": "SELECT Track.Name FROM Track WHERE Track.Name LIKE \"% you %\"",
        "hyp_correct": false,
        "NL_query": "What are the names of tracks that contain the the word you in them?",
        "index": 669,
        "GT": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "DB": "chinook_1",
        "tables": [
            "track"
        ]
    },
    {
        "SQL": "SELECT Track.Milliseconds, (Track.Milliseconds - Track.Milliseconds) FROM Track ORDER BY (Track.Milliseconds - Track.Milliseconds) LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "index": 670,
        "GT": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "DB": "chinook_1",
        "tables": [
            "track"
        ]
    },
    {
        "SQL": "SELECT Album.AlbumId, Track.AlbumId, COUNT(*) FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Album.AlbumId",
        "hyp_correct": false,
        "NL_query": "Show the album names, ids and the number of tracks for each album.",
        "index": 672,
        "GT": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "SELECT Album.AlbumId, Track.AlbumId, COUNT(*) FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Album.AlbumId",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of the different albums, and how many tracks are on each?",
        "index": 673,
        "GT": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Track.Name) FROM Genre JOIN Track ON Genre.GenreId = Track.GenreId WHERE Genre.Name = \"rock\"",
        "hyp_correct": false,
        "NL_query": "How many tracks belong to rock genre?",
        "index": 674,
        "GT": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Genre JOIN Track ON Genre.GenreId = Track.GenreId WHERE Genre.Name = \"rock\"",
        "hyp_correct": false,
        "NL_query": "Count the number of tracks that are part of the rock genre.",
        "index": 675,
        "GT": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre"
        ]
    },
    {
        "SQL": "SELECT AVG(Track.UnitPrice) FROM Genre JOIN Track ON Genre.GenreId = Track.GenreId WHERE Genre.Name = \"jazz\"",
        "hyp_correct": false,
        "NL_query": "Find the average unit price of jazz tracks.",
        "index": 677,
        "GT": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre"
        ]
    },
    {
        "SQL": "SELECT Customer.FirstName, Customer.LastName FROM Customer WHERE Customer.Email = \"luisg @ embraer.com.br\"",
        "hyp_correct": false,
        "NL_query": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
        "index": 678,
        "GT": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "DB": "chinook_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT Customer.FirstName, Customer.LastName FROM Customer WHERE Customer.Email = \"luisg @ embraer.com.br\"",
        "hyp_correct": false,
        "NL_query": "Find the full name of the customer with the email \"luisg@embraer.com.br\".",
        "index": 679,
        "GT": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "DB": "chinook_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Customer WHERE Customer.Email LIKE \"% gmail.com %\"",
        "hyp_correct": false,
        "NL_query": "How many customers have email that contains \"gmail.com\"?",
        "index": 680,
        "GT": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "DB": "chinook_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Customer WHERE Customer.Email LIKE \"% gmail.com %\"",
        "hyp_correct": false,
        "NL_query": "Count the number of customers that have an email containing \"gmail.com\".",
        "index": 681,
        "GT": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "DB": "chinook_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Customer.Address FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId WHERE Invoice.BillingCountry = \"Germany\"",
        "hyp_correct": false,
        "NL_query": "Find the address of all customers that live in Germany and have invoice.",
        "index": 690,
        "GT": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "invoice"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Track JOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId WHERE MediaType.Name = \"AAC audio file media\"",
        "hyp_correct": false,
        "NL_query": "How many tracks are in the AAC audio file media type?",
        "index": 692,
        "GT": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "mediatype"
        ]
    },
    {
        "SQL": "SELECT Employee.FirstName, Employee.EmployeeId FROM Customer JOIN Employee ON Customer.SupportRepId = Employee.EmployeeId GROUP BY Employee.EmployeeId HAVING COUNT(*) >= 10",
        "hyp_correct": false,
        "NL_query": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "index": 694,
        "GT": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "employee"
        ]
    },
    {
        "SQL": "SELECT Employee.FirstName, Customer.SupportRepId FROM Employee JOIN Customer ON Employee.EmployeeId = Customer.SupportRepId GROUP BY Employee.EmployeeId HAVING COUNT(*) >= 10",
        "hyp_correct": false,
        "NL_query": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "index": 695,
        "GT": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "employee"
        ]
    },
    {
        "SQL": "SELECT Employee.LastName FROM Employee GROUP BY Employee.LastName HAVING COUNT(*) > 20",
        "hyp_correct": false,
        "NL_query": "Please show the employee last names that serves no more than 20 customers.",
        "index": 696,
        "GT": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "employee"
        ]
    },
    {
        "SQL": "SELECT Employee.LastName FROM Employee JOIN Customer ON Employee.EmployeeId = Customer.SupportRepId GROUP BY Customer.LastName HAVING COUNT(*) <= 20",
        "hyp_correct": false,
        "NL_query": "What are the last names of employees who serve at most 20 customers?",
        "index": 697,
        "GT": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "employee"
        ]
    },
    {
        "SQL": "SELECT AVG(Track.UnitPrice) FROM Genre JOIN Track ON Genre.GenreId = Track.GenreId WHERE Genre.Name = \"rock\"",
        "hyp_correct": false,
        "NL_query": "What is the average unit price of rock tracks?",
        "index": 698,
        "GT": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre"
        ]
    },
    {
        "SQL": "SELECT enzyme.name, enzyme.Location FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id",
        "hyp_correct": false,
        "NL_query": "List the names and the locations that the enzymes can make an effect.",
        "index": 700,
        "GT": "SELECT name ,  LOCATION FROM enzyme",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "enzyme"
        ]
    },
    {
        "SQL": "SELECT medicine.name, medicine.Trade_Name FROM medicine WHERE medicine.FDA_approved = \"yes\"",
        "hyp_correct": false,
        "NL_query": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "index": 704,
        "GT": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine.name, medicine.Trade_Name FROM medicine WHERE medicine.FDA_approved = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What are the names and trade names of the medcines that are FDA approved?",
        "index": 705,
        "GT": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine.name FROM medicine JOIN medicine_enzyme_interaction ON medicine.id = medicine_enzyme_interaction.medicine_id GROUP BY medicine_enzyme_interaction.medicine_id HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "index": 707,
        "GT": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine.id, medicine.name FROM medicine_enzyme_interaction JOIN medicine ON medicine_enzyme_interaction.medicine_id = medicine.id GROUP BY medicine_enzyme_interaction.medicine_id HAVING COUNT(*) >= 3",
        "hyp_correct": false,
        "NL_query": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "index": 709,
        "GT": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT enzyme.name, enzyme.Location, enzyme.Product FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id WHERE medicine_enzyme_interaction.interaction_type = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "index": 711,
        "GT": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "enzyme"
        ]
    },
    {
        "SQL": "SELECT enzyme.name FROM enzyme WHERE enzyme.name LIKE \"% ALA %\"",
        "hyp_correct": false,
        "NL_query": "Which enzyme names have the substring \"ALA\"?",
        "index": 712,
        "GT": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme"
        ]
    },
    {
        "SQL": "SELECT enzyme.name FROM enzyme WHERE enzyme.name LIKE \"% ALA %\"",
        "hyp_correct": false,
        "NL_query": "What are the names of enzymes that include the string 'ALA'?",
        "index": 713,
        "GT": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme"
        ]
    },
    {
        "SQL": "SELECT university.School, university.Location FROM university",
        "hyp_correct": false,
        "NL_query": "List all public schools and their locations.",
        "index": 718,
        "GT": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.Location FROM university",
        "hyp_correct": false,
        "NL_query": "What are the public schools and what are their locations?",
        "index": 719,
        "GT": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.Affiliation, university.Primary_conference FROM university ORDER BY university.Enrollment DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Show the enrollment and primary_conference of the oldest college.",
        "index": 726,
        "GT": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.School FROM university WHERE university.Founded > 1850 OR university.Founded = \"public\"",
        "hyp_correct": false,
        "NL_query": "Find the schools that were either founded after 1850 or public.",
        "index": 732,
        "GT": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.School FROM university WHERE university.Founded < 1850 OR university.Founded = 1850",
        "hyp_correct": false,
        "NL_query": "What are the schools that were either founded before 1850 or are public?",
        "index": 733,
        "GT": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT COUNT(university.Location) FROM university WHERE university.Location LIKE \"% NY %\"",
        "hyp_correct": false,
        "NL_query": "Find how many school locations have the word 'NY'.",
        "index": 734,
        "GT": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM university WHERE university.Location LIKE \"% NY %\"",
        "hyp_correct": false,
        "NL_query": "How many universities have a location that contains NY?",
        "index": 735,
        "GT": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), university.Affiliation FROM university GROUP BY university.Affiliation HAVING SUM(university.Enrollment) > 20000",
        "hyp_correct": false,
        "NL_query": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "index": 736,
        "GT": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT MAX(Player.height), MIN(Player.height) FROM Player",
        "hyp_correct": false,
        "NL_query": "What is the maximum and minimum height of all players?",
        "index": 742,
        "GT": "SELECT max(weight) ,  min(weight) FROM Player",
        "DB": "soccer_1",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.crossing > 90",
        "hyp_correct": false,
        "NL_query": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "index": 743,
        "GT": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
        "DB": "soccer_1",
        "tables": [
            "player_attributes",
            "player"
        ]
    },
    {
        "SQL": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating BETWEEN 85 AND 90 AND Player_Attributes.preferred_foot = \"VALUE VALUE VALUE VALUE VALUE0\"",
        "hyp_correct": false,
        "NL_query": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "index": 744,
        "GT": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "DB": "soccer_1",
        "tables": [
            "player_attributes",
            "player"
        ]
    },
    {
        "SQL": "SELECT AVG(Player_Attributes.overall_rating) FROM Player_Attributes WHERE Player_Attributes.preferred_foot = \"VALUE VALUE\" AND Player_Attributes.preferred_foot = \"left-footed\"",
        "hyp_correct": false,
        "NL_query": "What is the average rating for right-footed players and left-footed players?",
        "index": 745,
        "GT": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "DB": "soccer_1",
        "tables": [
            "player_attributes"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Player_Attributes WHERE Player_Attributes.overall_rating > 80 AND Player_Attributes.preferred_foot = \"left-footed\"",
        "hyp_correct": false,
        "NL_query": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "index": 746,
        "GT": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "DB": "soccer_1",
        "tables": [
            "player_attributes"
        ]
    },
    {
        "SQL": "SELECT * FROM people",
        "hyp_correct": false,
        "NL_query": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "index": 756,
        "GT": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",
        "DB": "debate",
        "tables": [
            "debate",
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "SELECT people.Name, COUNT(*) FROM debate_people JOIN people ON debate_people.Affirmative = people.People_ID WHERE debate_people.Affirmative = affirmative GROUP BY debate_people.Affirmative",
        "hyp_correct": false,
        "NL_query": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "index": 757,
        "GT": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "DB": "debate",
        "tables": [
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "SELECT SUM(Claim_Headers.Amount_Claimed), AVG(Claim_Headers.Amount_Claimed) FROM Claim_Headers",
        "hyp_correct": false,
        "NL_query": "Find the total and average amount paid in claim headers.",
        "index": 761,
        "GT": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "DB": "insurance_and_eClaims",
        "tables": [
            "claim_headers"
        ]
    },
    {
        "SQL": "SELECT SUM(Claim_Headers.Amount_Claimed), AVG(Claim_Headers.Amount_Piad) FROM Claim_Headers",
        "hyp_correct": false,
        "NL_query": "What are the total amount and average amount paid in claim headers?",
        "index": 762,
        "GT": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "DB": "insurance_and_eClaims",
        "tables": [
            "claim_headers"
        ]
    },
    {
        "SQL": "SELECT Customers.Customer_ID FROM Customers WHERE Customers.Customer_Details LIKE \"% Diana %\"",
        "hyp_correct": false,
        "NL_query": "Find the names of customers whose name contains \"Diana\".",
        "index": 763,
        "GT": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Customers.Customer_ID FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID WHERE Policies.Policy_Type_Code = \"deputy\"",
        "hyp_correct": false,
        "NL_query": "Find the names of the customers who have an deputy policy.",
        "index": 765,
        "GT": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers",
            "policies"
        ]
    },
    {
        "SQL": "SELECT Accounts.account_id, Accounts.date_account_opened, Accounts.other_account_details FROM Accounts",
        "hyp_correct": false,
        "NL_query": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "index": 769,
        "GT": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "DB": "customers_and_invoices",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Accounts.account_id, Accounts.date_account_opened, Accounts.other_account_details FROM Accounts",
        "hyp_correct": false,
        "NL_query": "What are the ids, date opened, name, and other details for all accounts?",
        "index": 770,
        "GT": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "DB": "customers_and_invoices",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Accounts.account_id, Accounts.account_name, Accounts.other_account_details FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Customers.customer_first_name = \"Meaghan\"",
        "hyp_correct": false,
        "NL_query": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "index": 771,
        "GT": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "DB": "customers_and_invoices",
        "tables": [
            "customers",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Accounts.account_id, Accounts.date_account_opened, Accounts.other_account_details FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Customers.customer_first_name = \"Meaghan\"",
        "hyp_correct": false,
        "NL_query": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "index": 772,
        "GT": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "DB": "customers_and_invoices",
        "tables": [
            "customers",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Customers.customer_id, Customers.customer_first_name, COUNT(*) FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY Customers.customer_id",
        "hyp_correct": false,
        "NL_query": "Show id, first name and last name for all customers and the number of accounts.",
        "index": 779,
        "GT": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "DB": "customers_and_invoices",
        "tables": [
            "customers",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Customers.customer_first_name, Customers.customer_middle_initial, COUNT(*), Customers.customer_id FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY Customers.customer_id",
        "hyp_correct": false,
        "NL_query": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "index": 780,
        "GT": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "DB": "customers_and_invoices",
        "tables": [
            "customers",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Financial_Transactions.account_id, COUNT(*) FROM Financial_Transactions GROUP BY Financial_Transactions.account_id",
        "hyp_correct": false,
        "NL_query": "How many transaction does each account have? Show the number and account id.",
        "index": 785,
        "GT": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "DB": "customers_and_invoices",
        "tables": [
            "financial_transactions"
        ]
    },
    {
        "SQL": "SELECT Financial_Transactions.account_id, COUNT(*) FROM Financial_Transactions GROUP BY Financial_Transactions.account_id",
        "hyp_correct": false,
        "NL_query": "Count the number of financial transactions that correspond to each account id.",
        "index": 786,
        "GT": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "DB": "customers_and_invoices",
        "tables": [
            "financial_transactions"
        ]
    },
    {
        "SQL": "SELECT Financial_Transactions.account_id, COUNT(*) FROM Financial_Transactions GROUP BY Financial_Transactions.account_id HAVING COUNT(*) >= 4",
        "hyp_correct": false,
        "NL_query": "Show the account id and name with at least 4 transactions.",
        "index": 795,
        "GT": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "DB": "customers_and_invoices",
        "tables": [
            "financial_transactions",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Invoices.invoice_date, Invoices.order_id FROM Invoices",
        "hyp_correct": false,
        "NL_query": "Show invoice dates and order id and details for all invoices.",
        "index": 799,
        "GT": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "DB": "customers_and_invoices",
        "tables": [
            "invoices",
            "orders"
        ]
    },
    {
        "SQL": "SELECT Invoices.invoice_date, Invoices.order_id FROM Invoices",
        "hyp_correct": false,
        "NL_query": "What are the invoice dates, order ids, and order details for all invoices?",
        "index": 800,
        "GT": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "DB": "customers_and_invoices",
        "tables": [
            "invoices",
            "orders"
        ]
    },
    {
        "SQL": "SELECT Invoices.order_id, Orders.order_details FROM Orders JOIN Invoices ON Orders.order_id = Invoices.order_id GROUP BY Invoices.order_id HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "Return the order ids and details for orderes with two or more invoices.",
        "index": 804,
        "GT": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "DB": "customers_and_invoices",
        "tables": [
            "invoices",
            "orders"
        ]
    },
    {
        "SQL": "SELECT Products.product_name, SUM(Order_Items.product_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Order_Items.product_id",
        "hyp_correct": false,
        "NL_query": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "index": 806,
        "GT": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "products"
        ]
    },
    {
        "SQL": "SELECT Order_Items.product_id, COUNT(DISTINCT Order_Items.product_id) FROM Order_Items GROUP BY Order_Items.product_id",
        "hyp_correct": false,
        "NL_query": "Show the product ids and the number of unique orders containing each product.",
        "index": 809,
        "GT": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items"
        ]
    },
    {
        "SQL": "SELECT Orders.order_id, COUNT(*) FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id",
        "hyp_correct": false,
        "NL_query": "Show order ids and the number of products in each order.",
        "index": 811,
        "GT": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "orders"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Order_Items.product_id) FROM Order_Items",
        "hyp_correct": false,
        "NL_query": "How many different products correspond to each order id?",
        "index": 812,
        "GT": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items"
        ]
    },
    {
        "SQL": "SELECT * FROM ACCOUNTS",
        "hyp_correct": false,
        "NL_query": "What is the total balance of savings accounts not belonging to someone with the name Brown?",
        "index": 816,
        "GT": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT ACCOUNTS.name, COUNT(*) FROM CHECKING JOIN ACCOUNTS ON CHECKING.custid = ACCOUNTS.custid GROUP BY CHECKING.custid",
        "hyp_correct": false,
        "NL_query": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "index": 818,
        "GT": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT ACCOUNTS.name, SUM(SAVINGS.balance) FROM SAVINGS JOIN ACCOUNTS ON SAVINGS.custid = ACCOUNTS.custid GROUP BY SAVINGS.custid",
        "hyp_correct": false,
        "NL_query": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "index": 820,
        "GT": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT \"CHECKING\", CHECKING.balance FROM CHECKING ORDER BY CHECKING.balance ASC",
        "hyp_correct": false,
        "NL_query": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "index": 821,
        "GT": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking"
        ]
    },
    {
        "SQL": "SELECT CHECKING.custid, SUM(CHECKING.balance) FROM CHECKING JOIN SAVINGS ON CHECKING.custid = SAVINGS.custid GROUP BY CHECKING.custid ORDER BY SUM(CHECKING.balance)",
        "hyp_correct": false,
        "NL_query": "What is the sum of checking and savings balances for all customers, ordered by the total balance?",
        "index": 822,
        "GT": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking"
        ]
    },
    {
        "SQL": "SELECT ACCOUNTS.name, SAVINGS.balance FROM ACCOUNTS JOIN SAVINGS ON ACCOUNTS.custid = SAVINGS.balance",
        "hyp_correct": false,
        "NL_query": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "index": 823,
        "GT": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT School.County, SUM(School.Enrollment) FROM School GROUP BY School.County",
        "hyp_correct": false,
        "NL_query": "Show each county along with the number of schools and total enrollment in each county.",
        "index": 829,
        "GT": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",
        "DB": "school_finance",
        "tables": [
            "school"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM endowment JOIN School ON endowment.School_id = School.School_id WHERE School.School_name = \"Glenn\"",
        "hyp_correct": false,
        "NL_query": "How many donors have endowment for school named \"Glenn\"?",
        "index": 830,
        "GT": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"",
        "DB": "school_finance",
        "tables": [
            "school",
            "endowment"
        ]
    },
    {
        "SQL": "SELECT School.School_name FROM School JOIN endowment ON School.School_id = endowment.School_id WHERE endowment.amount <= 10",
        "hyp_correct": false,
        "NL_query": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "index": 831,
        "GT": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "DB": "school_finance",
        "tables": [
            "school",
            "endowment"
        ]
    },
    {
        "SQL": "SELECT SUM(budget.Budgeted) FROM budget WHERE budget.Year > 3000 OR budget.Year < 2001",
        "hyp_correct": false,
        "NL_query": "How many budgets are above 3000 in year 2001 or before?",
        "index": 833,
        "GT": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "DB": "school_finance",
        "tables": [
            "budget"
        ]
    },
    {
        "SQL": "SELECT SUM(budget.Budgeted) FROM budget WHERE budget.Year < 3000 OR budget.Budgeted < 3000",
        "hyp_correct": false,
        "NL_query": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "index": 834,
        "GT": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "DB": "school_finance",
        "tables": [
            "budget"
        ]
    },
    {
        "SQL": "SELECT SUM(budget.total_budget_percent_invested) FROM budget JOIN School ON budget.School_id = School.School_id WHERE School.School_name = \"Glenn\"",
        "hyp_correct": false,
        "NL_query": "What is the total budget amount for school \"Glenn\" in all years?",
        "index": 836,
        "GT": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'",
        "DB": "school_finance",
        "tables": [
            "school",
            "budget"
        ]
    },
    {
        "SQL": "SELECT Institution.Institution, Institution.Location FROM Institution WHERE Institution.Type = \"Private\" AND Institution.Location > 1990",
        "hyp_correct": false,
        "NL_query": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "index": 841,
        "GT": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
        "DB": "protein_institute",
        "tables": [
            "institution"
        ]
    },
    {
        "SQL": "SELECT Institution.Type, COUNT(DISTINCT Institution.Enrollment), SUM(Institution.Enrollment) FROM Institution GROUP BY Institution.Type",
        "hyp_correct": false,
        "NL_query": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "index": 842,
        "GT": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE",
        "DB": "protein_institute",
        "tables": [
            "institution"
        ]
    },
    {
        "SQL": "SELECT DISTINCT protein.protein_name, Institution.Institution FROM protein JOIN Institution ON protein.Institution_id = Institution.Institution_id JOIN Institution ON protein.Institution_id = Institution.Institution_id",
        "hyp_correct": false,
        "NL_query": "Show the protein name and the institution name.",
        "index": 846,
        "GT": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "DB": "protein_institute",
        "tables": [
            "protein",
            "institution"
        ]
    },
    {
        "SQL": "SELECT * FROM Discount_Coupons",
        "hyp_correct": false,
        "NL_query": "Are the customers holding coupons with amount 500 bad or good?",
        "index": 847,
        "GT": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "DB": "products_for_hire",
        "tables": [
            "customers",
            "discount_coupons"
        ]
    },
    {
        "SQL": "SELECT Customers.first_name, Customers.last_name, Customers.gender_mf FROM Customers ORDER BY Customers.good_or_bad_customer",
        "hyp_correct": false,
        "NL_query": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "index": 851,
        "GT": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name",
        "DB": "products_for_hire",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT Products_for_Hire.daily_hire_cost FROM Products_for_Hire WHERE Products_for_Hire.product_name LIKE \"% Book %\"",
        "hyp_correct": false,
        "NL_query": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "index": 853,
        "GT": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
        "DB": "products_for_hire",
        "tables": [
            "products_for_hire"
        ]
    },
    {
        "SQL": "SELECT Payments.payment_date FROM Payments WHERE Payments.amount_paid_in_full_yn > 300 OR Payments.payment_type_code = \"Check\"",
        "hyp_correct": false,
        "NL_query": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "index": 854,
        "GT": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'",
        "DB": "products_for_hire",
        "tables": [
            "payments"
        ]
    },
    {
        "SQL": "SELECT pilot.Join_Year FROM pilot ORDER BY pilot.Rank DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the joined year of the pilot of the highest rank?",
        "index": 858,
        "GT": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
        "DB": "pilot_record",
        "tables": [
            "pilot"
        ]
    },
    {
        "SQL": "SELECT pilot.Pilot_name, aircraft.Model FROM pilot JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID JOIN aircraft ON pilot_record.Aircraft_ID = aircraft.Aircraft_ID WHERE aircraft.Fuel_Propulsion = \"flied\"",
        "hyp_correct": false,
        "NL_query": "Show the names of pilots and models of aircrafts they have flied with.",
        "index": 860,
        "GT": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",
        "DB": "pilot_record",
        "tables": [
            "pilot_record",
            "pilot",
            "aircraft"
        ]
    },
    {
        "SQL": "SELECT pilot.Pilot_name FROM pilot JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID GROUP BY pilot.Pilot_name HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "Show names of pilots that have more than one record.",
        "index": 862,
        "GT": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "DB": "pilot_record",
        "tables": [
            "pilot_record",
            "pilot"
        ]
    },
    {
        "SQL": "SELECT Employees.role_code FROM Employees WHERE Employees.employee_name = \"Koby\"",
        "hyp_correct": false,
        "NL_query": "What is the role of the employee named Koby?",
        "index": 863,
        "GT": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "roles"
        ]
    },
    {
        "SQL": "SELECT Roles.role_description, COUNT(*) FROM Roles JOIN Employees ON Roles.role_code = Employees.role_code GROUP BY Employees.role_code",
        "hyp_correct": false,
        "NL_query": "How many employees does each role have? List role description, id and number of employees.",
        "index": 865,
        "GT": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "roles",
            "employees"
        ]
    },
    {
        "SQL": "SELECT Roles.role_description, COUNT(*) FROM Employees JOIN Roles ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "List roles that have more than one employee. List the role description and number of employees.",
        "index": 866,
        "GT": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "roles"
        ]
    },
    {
        "SQL": "SELECT Documents.document_id FROM Documents WHERE Documents.document_status_code = \"done\" AND Documents.document_type_code = \"paper\"",
        "hyp_correct": false,
        "NL_query": "List the document ids for any documents with the status code done and the type code paper.",
        "index": 868,
        "GT": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "SELECT Circulation_History.document_id, COUNT(*) FROM Circulation_History GROUP BY Circulation_History.document_id",
        "hyp_correct": false,
        "NL_query": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "index": 874,
        "GT": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "circulation_history"
        ]
    },
    {
        "SQL": "SELECT people.Name FROM people EXCEPT SELECT people.Name FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID WHERE entrepreneur.Investor = \"Rachel Elnaugh\"",
        "hyp_correct": false,
        "NL_query": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "index": 883,
        "GT": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "DB": "entrepreneur",
        "tables": [
            "people",
            "entrepreneur"
        ]
    },
    {
        "SQL": "SELECT people.Name, entrepreneur.Company FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID ORDER BY entrepreneur.Money_Requested DESC",
        "hyp_correct": false,
        "NL_query": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "index": 892,
        "GT": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "DB": "entrepreneur",
        "tables": [
            "people",
            "entrepreneur"
        ]
    },
    {
        "SQL": "SELECT entrepreneur.Investor FROM entrepreneur ORDER BY entrepreneur.Money_Requested DESC",
        "hyp_correct": false,
        "NL_query": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "index": 893,
        "GT": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "DB": "entrepreneur",
        "tables": [
            "people",
            "entrepreneur"
        ]
    },
    {
        "SQL": "SELECT perpetrator.Country FROM perpetrator GROUP BY perpetrator.Country HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "What are the countries that have at least two perpetrators?",
        "index": 899,
        "GT": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2",
        "DB": "perpetrator",
        "tables": [
            "perpetrator"
        ]
    },
    {
        "SQL": "SELECT \"candidate\" FROM candidate ORDER BY candidate.Support_rate DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "Return the top 3 greatest support rates.",
        "index": 902,
        "GT": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "SELECT candidate.Support_rate, candidate.Oppose_rate FROM candidate ORDER BY candidate.Unsure_rate ASC",
        "hyp_correct": false,
        "NL_query": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "index": 905,
        "GT": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "SELECT candidate.Support_rate, candidate.Oppose_rate FROM candidate ORDER BY candidate.Unsure_rate",
        "hyp_correct": false,
        "NL_query": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "index": 906,
        "GT": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "SELECT MAX(candidate.Poll_Source) FROM candidate ORDER BY candidate.Oppose_rate DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "which poll source does the highest oppose rate come from?",
        "index": 907,
        "GT": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "SELECT candidate.Poll_Source FROM candidate WHERE candidate.Support_rate = (SELECT MAX(candidate.Oppose_rate) FROM candidate)",
        "hyp_correct": false,
        "NL_query": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "index": 908,
        "GT": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "SELECT people.Name, people.Sex, MAX(candidate.Oppose_rate) FROM candidate JOIN people ON candidate.People_ID = people.People_ID GROUP BY people.Sex",
        "hyp_correct": false,
        "NL_query": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "index": 916,
        "GT": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "DB": "candidate_poll",
        "tables": [
            "people",
            "candidate"
        ]
    },
    {
        "SQL": "SELECT people.Name FROM candidate JOIN people ON candidate.People_ID = people.People_ID WHERE candidate.Support_rate < (SELECT MIN(candidate.Support_rate) FROM candidate)",
        "hyp_correct": false,
        "NL_query": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "index": 917,
        "GT": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "DB": "candidate_poll",
        "tables": [
            "people",
            "candidate"
        ]
    },
    {
        "SQL": "SELECT \"candidate\" FROM candidate WHERE candidate.Support_rate < (SELECT MIN(candidate.Support_rate) FROM candidate)",
        "hyp_correct": false,
        "NL_query": "What are the names of candidates who have a lower support rate than oppose rate?",
        "index": 918,
        "GT": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "DB": "candidate_poll",
        "tables": [
            "people",
            "candidate"
        ]
    },
    {
        "SQL": "SELECT MAX(candidate.Support_rate), MIN(candidate.Support_rate), MIN(candidate.Oppose_rate) FROM candidate",
        "hyp_correct": false,
        "NL_query": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "index": 921,
        "GT": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "SELECT MAX(candidate.Support_rate), MIN(candidate.Support_rate), MIN(candidate.Consider_rate) FROM candidate",
        "hyp_correct": false,
        "NL_query": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "index": 922,
        "GT": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "SELECT party.Lieutenant_Governor, party.Comptroller FROM party WHERE party.Party = \"democratic\"",
        "hyp_correct": false,
        "NL_query": "Show the lieutenant governor and comptroller from the democratic party.",
        "index": 929,
        "GT": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "SELECT party.Lieutenant_Governor, party.Comptroller FROM party WHERE party.Party = \"democratic\"",
        "hyp_correct": false,
        "NL_query": "Who are the lieutenant governor and comptroller from the democratic party?",
        "index": 930,
        "GT": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "SELECT county.County_name FROM election JOIN county ON election.Delegate = county.County_Id WHERE election.Committee = \"Appropriations\"",
        "hyp_correct": false,
        "NL_query": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.",
        "index": 938,
        "GT": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"",
        "DB": "election",
        "tables": [
            "county",
            "election"
        ]
    },
    {
        "SQL": "SELECT party.Party FROM party",
        "hyp_correct": false,
        "NL_query": "For each delegate, find the names of the party they are part of.",
        "index": 940,
        "GT": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "SELECT party.Governor FROM party WHERE party.Party = 1",
        "hyp_correct": false,
        "NL_query": "Who were the governors of the parties associated with delegates from district 1?",
        "index": 941,
        "GT": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "SELECT party.Party FROM party JOIN election ON party.Party_ID = election.Party WHERE election.District = 1",
        "hyp_correct": false,
        "NL_query": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "index": 942,
        "GT": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "SELECT county.County_name, COUNT(*) FROM county GROUP BY county.County_name",
        "hyp_correct": false,
        "NL_query": "Show the name of each county along with the corresponding number of delegates from that county.",
        "index": 945,
        "GT": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "DB": "election",
        "tables": [
            "county",
            "election"
        ]
    },
    {
        "SQL": "SELECT county.County_name, COUNT(*) FROM county GROUP BY county.County_name",
        "hyp_correct": false,
        "NL_query": "For each county, find the name of the county and the number of delegates from that county.",
        "index": 946,
        "GT": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "DB": "election",
        "tables": [
            "county",
            "election"
        ]
    },
    {
        "SQL": "SELECT party.Party, COUNT(*) FROM party JOIN election ON party.Party_ID = election.Party GROUP BY party.Party",
        "hyp_correct": false,
        "NL_query": "Show the name of each party and the corresponding number of delegates from that party.",
        "index": 947,
        "GT": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "SELECT county.County_name FROM county GROUP BY county.County_name HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "Show the names of counties that have at least two delegates.",
        "index": 953,
        "GT": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "DB": "election",
        "tables": [
            "county",
            "election"
        ]
    },
    {
        "SQL": "SELECT county.County_name FROM county GROUP BY county.County_name HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "Which counties have two or more delegates? Give me the county names.",
        "index": 954,
        "GT": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "DB": "election",
        "tables": [
            "county",
            "election"
        ]
    },
    {
        "SQL": "SELECT journalist.Name, event.Date FROM news_report JOIN event ON news_report.journalist_ID = event.Event_ID JOIN journalist ON news_report.Event_ID = journalist.journalist_ID",
        "hyp_correct": false,
        "NL_query": "Show the names of journalists and the dates of the events they reported.",
        "index": 960,
        "GT": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
        "DB": "news_report",
        "tables": [
            "journalist",
            "news_report",
            "event"
        ]
    },
    {
        "SQL": "SELECT customer.state, customer.acc_type, customer.credit_score FROM customer JOIN loan ON customer.cust_ID = loan.cust_ID WHERE customer.credit_score = 0",
        "hyp_correct": false,
        "NL_query": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "index": 966,
        "GT": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name, customer.acc_bal FROM customer WHERE customer.cust_name LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "index": 967,
        "GT": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name, customer.acc_bal FROM customer WHERE customer.cust_name LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "What are the names and account balances of customers with the letter a in their names?",
        "index": 968,
        "GT": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT bank.branch_ID FROM bank ORDER BY bank.no_of_customers DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the branch name of the bank that has the most number of customers.",
        "index": 971,
        "GT": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "SELECT bank.branch_ID FROM bank ORDER BY bank.no_of_customers DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the bank branch with the greatest number of customers?",
        "index": 972,
        "GT": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name, customer.acc_type, customer.acc_bal FROM customer ORDER BY customer.credit_score LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "index": 975,
        "GT": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT AVG(customer.acc_bal), customer.acc_type FROM customer WHERE customer.acc_type < 50 GROUP BY customer.acc_type",
        "hyp_correct": false,
        "NL_query": "What is the average account balance of customers with credit score below 50 for the different account types?",
        "index": 978,
        "GT": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT SUM(loan.amount), loan.branch_ID FROM loan GROUP BY loan.branch_ID",
        "hyp_correct": false,
        "NL_query": "Find the total amount of loans offered by each bank branch.",
        "index": 981,
        "GT": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "DB": "loan_1",
        "tables": [
            "bank",
            "loan"
        ]
    },
    {
        "SQL": "SELECT bank.bname, SUM(loan.amount) FROM bank JOIN loan ON bank.branch_ID = loan.branch_ID GROUP BY loan.branch_ID",
        "hyp_correct": false,
        "NL_query": "What are the names of the different bank branches, and what are their total loan amounts?",
        "index": 982,
        "GT": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "DB": "loan_1",
        "tables": [
            "bank",
            "loan"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name, customer.acc_bal FROM customer JOIN loan ON customer.cust_ID = loan.cust_ID WHERE loan.amount > 5000",
        "hyp_correct": false,
        "NL_query": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "index": 985,
        "GT": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name, customer.acc_bal FROM customer JOIN loan ON customer.cust_ID = loan.cust_ID WHERE customer.no_of_loans > 5000",
        "hyp_correct": false,
        "NL_query": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "index": 986,
        "GT": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "SELECT bank.city, bank.bname FROM bank JOIN loan ON bank.branch_ID = loan.branch_ID",
        "hyp_correct": false,
        "NL_query": "Find the city and name of bank branches that provide business loans.",
        "index": 991,
        "GT": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "DB": "loan_1",
        "tables": [
            "bank",
            "loan"
        ]
    },
    {
        "SQL": "SELECT loan.branch_ID, bank.city FROM bank JOIN loan ON bank.branch_ID = loan.branch_ID",
        "hyp_correct": false,
        "NL_query": "What are the names and cities of bank branches that offer loans for business?",
        "index": 992,
        "GT": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "DB": "loan_1",
        "tables": [
            "bank",
            "loan"
        ]
    },
    {
        "SQL": "SELECT SUM(loan.amount) FROM bank JOIN loan ON bank.branch_ID = loan.cust_ID WHERE bank.state = \"New York\"",
        "hyp_correct": false,
        "NL_query": "What is the total amount of money loaned by banks in New York state?",
        "index": 994,
        "GT": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "DB": "loan_1",
        "tables": [
            "bank",
            "loan"
        ]
    },
    {
        "SQL": "SELECT Third_Party_Companies.company_name, COUNT(*) FROM Third_Party_Companies JOIN Assets ON Third_Party_Companies.company_id = Assets.supplier_company_id GROUP BY Third_Party_Companies.company_id",
        "hyp_correct": false,
        "NL_query": "How many assets does each third party company supply? List the count and the company id.",
        "index": 996,
        "GT": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "DB": "assets_maintenance",
        "tables": [
            "third_party_companies",
            "assets"
        ]
    },
    {
        "SQL": "SELECT Maintenance_Engineers.first_name, Maintenance_Engineers.last_name, Skills.skill_description FROM Maintenance_Engineers JOIN Engineer_Skills ON Maintenance_Engineers.engineer_id = Engineer_Skills.engineer_id JOIN Skills ON Engineer_Skills.skill_id = Skills.skill_id",
        "hyp_correct": false,
        "NL_query": "List all every engineer's first name, last name, details and coresponding skill description.",
        "index": 998,
        "GT": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "DB": "assets_maintenance",
        "tables": [
            "engineer_skills",
            "maintenance_engineers",
            "skills"
        ]
    },
    {
        "SQL": "SELECT Skills.skill_code, MAX(Skills.skill_description) FROM Part_Faults JOIN Skills_Required_To_Fix ON Part_Faults.part_fault_id = Skills_Required_To_Fix.part_fault_id JOIN Skills ON Skills_Required_To_Fix.skill_id = Skills.skill_id GROUP BY Skills.skill_id",
        "hyp_correct": false,
        "NL_query": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "index": 999,
        "GT": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "DB": "assets_maintenance",
        "tables": [
            "part_faults",
            "skills",
            "skills_required_to_fix"
        ]
    },
    {
        "SQL": "SELECT Assets.asset_id, Assets.asset_details, Assets.asset_make FROM Assets",
        "hyp_correct": false,
        "NL_query": "List the asset id, details, make and model for every asset.",
        "index": 1002,
        "GT": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "DB": "assets_maintenance",
        "tables": [
            "assets"
        ]
    },
    {
        "SQL": "SELECT Staff.staff_name, Maintenance_Engineers.last_name FROM Staff JOIN Engineer_Visits ON Staff.staff_id = Engineer_Visits.contact_staff_id JOIN Maintenance_Engineers ON Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id",
        "hyp_correct": false,
        "NL_query": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "index": 1004,
        "GT": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
        "DB": "assets_maintenance",
        "tables": [
            "maintenance_engineers",
            "staff",
            "engineer_visits"
        ]
    },
    {
        "SQL": "SELECT Staff.staff_name, COUNT(*) FROM Staff JOIN Engineer_Visits ON Staff.staff_id = Engineer_Visits.contact_staff_id GROUP BY Engineer_Visits.contact_staff_id",
        "hyp_correct": false,
        "NL_query": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "index": 1007,
        "GT": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
        "DB": "assets_maintenance",
        "tables": [
            "staff",
            "engineer_visits"
        ]
    },
    {
        "SQL": "SELECT train.train_number, train.name FROM train ORDER BY train.time DESC",
        "hyp_correct": false,
        "NL_query": "show all train numbers and names ordered by their time from early to late.",
        "index": 1009,
        "GT": "SELECT train_number ,  name FROM train ORDER BY TIME",
        "DB": "station_weather",
        "tables": [
            "train"
        ]
    },
    {
        "SQL": "SELECT train.train_number, train.time FROM train WHERE train.origin = \"Chennai\" ORDER BY train.time",
        "hyp_correct": false,
        "NL_query": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "index": 1010,
        "GT": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME",
        "DB": "station_weather",
        "tables": [
            "train"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM train WHERE train.name LIKE \"% Express %\"",
        "hyp_correct": false,
        "NL_query": "How many trains have 'Express' in their names?",
        "index": 1011,
        "GT": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
        "DB": "station_weather",
        "tables": [
            "train"
        ]
    },
    {
        "SQL": "SELECT station.network_name, COUNT(*) FROM station JOIN route ON station.id = route.station_id GROUP BY route.station_id",
        "hyp_correct": false,
        "NL_query": "Find the number of trains for each station, as well as the station network name and services.",
        "index": 1014,
        "GT": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
        "DB": "station_weather",
        "tables": [
            "route",
            "station"
        ]
    },
    {
        "SQL": "SELECT station.id, station.local_authority FROM station JOIN weekly_weather ON station.id = weekly_weather.station_id WHERE weekly_weather.precipitation > 50 ORDER BY weekly_weather.precipitation DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "index": 1016,
        "GT": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "DB": "station_weather",
        "tables": [
            "weekly_weather",
            "station"
        ]
    },
    {
        "SQL": "SELECT club.name, player.name FROM club JOIN player ON club.Club_ID = player.Club_ID",
        "hyp_correct": false,
        "NL_query": "Please show the names and the players of clubs.",
        "index": 1022,
        "GT": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "DB": "sports_competition",
        "tables": [
            "club",
            "player"
        ]
    },
    {
        "SQL": "SELECT club.name, player.name FROM club JOIN player ON club.Club_ID = player.Club_ID",
        "hyp_correct": false,
        "NL_query": "What are the names and players of all the clubs?",
        "index": 1023,
        "GT": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "DB": "sports_competition",
        "tables": [
            "club",
            "player"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song ORDER BY song.releasedate DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the song that was released in the most recent year?",
        "index": 1034,
        "GT": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song ORDER BY song.releasedate DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the song that was released most recently?",
        "index": 1035,
        "GT": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.f_id FROM song ORDER BY song.f_id DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the id of the longest song?",
        "index": 1036,
        "GT": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT song.f_id FROM song ORDER BY song.f_id DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the id of the song that lasts the longest.",
        "index": 1037,
        "GT": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT song.song_name, song.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.rating > 9",
        "hyp_correct": false,
        "NL_query": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "index": 1038,
        "GT": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT DISTINCT song.artist_name, song.country FROM artist JOIN song ON artist.artist_name = song.f_id WHERE song.rating > 9",
        "hyp_correct": false,
        "NL_query": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
        "index": 1039,
        "GT": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM song WHERE song.releasedate = 4",
        "hyp_correct": false,
        "NL_query": "How many songs have 4 minute duration?",
        "index": 1042,
        "GT": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM song WHERE song.releasedate = 4",
        "hyp_correct": false,
        "NL_query": "What is the count of the songs that last approximately 4 minutes?",
        "index": 1043,
        "GT": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT AVG(song.rating) FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What is the average rating of songs produced by female artists?",
        "index": 1044,
        "GT": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT COUNT(song.song_name) FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "How many songs, on average, are sung by a female artist?",
        "index": 1045,
        "GT": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = \"female\" AND song.languages = \"Bangla\"",
        "hyp_correct": false,
        "NL_query": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "index": 1046,
        "GT": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = \"Bangla\" AND song.languages = \"female\"",
        "hyp_correct": false,
        "NL_query": "What countries are the female artists who sung in the language Bangla from?",
        "index": 1047,
        "GT": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM artist WHERE artist.gender = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "How many artists are male and how many are female?",
        "index": 1051,
        "GT": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT files.formats), files.formats FROM files GROUP BY files.formats",
        "hyp_correct": false,
        "NL_query": "For each file format, return the number of artists who released songs in that format.",
        "index": 1054,
        "GT": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "DB": "music_1",
        "tables": [
            "files"
        ]
    },
    {
        "SQL": "SELECT files.formats, COUNT(*) FROM files JOIN song ON files.f_id = song.genre_is GROUP BY files.formats",
        "hyp_correct": false,
        "NL_query": "How many songs were released for each format?",
        "index": 1055,
        "GT": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT genre.g_name, genre.rating FROM genre WHERE genre.g_name = \"oder\"",
        "hyp_correct": false,
        "NL_query": "List the names of all genres in alphabetical oder, together with its ratings.",
        "index": 1056,
        "GT": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "DB": "music_1",
        "tables": [
            "genre"
        ]
    },
    {
        "SQL": "SELECT genre.g_name, genre.rating FROM genre ORDER BY genre.rating",
        "hyp_correct": false,
        "NL_query": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "index": 1057,
        "GT": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "DB": "music_1",
        "tables": [
            "genre"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist WHERE artist.gender = \"UK\"",
        "hyp_correct": false,
        "NL_query": "What are the names of artists who are Male and are from UK?",
        "index": 1058,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist WHERE artist.gender = \"British\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all male British artists?",
        "index": 1059,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM genre JOIN song ON genre.g_name = song.f_id WHERE song.languages = \"English\" OR song.languages = \"modern\"",
        "hyp_correct": false,
        "NL_query": "Find the names of songs whose genre is modern or language is English.",
        "index": 1060,
        "GT": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM genre JOIN song ON genre.g_name = song.f_id WHERE song.languages = \"English\" OR song.languages = \"modern\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the songs that are modern or sung in English?",
        "index": 1061,
        "GT": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "SELECT AVG(song.rating), AVG(song.resolution) FROM song WHERE song.languages = \"Bangla\"",
        "hyp_correct": false,
        "NL_query": "What are the average rating and resolution of songs that are in Bangla?",
        "index": 1062,
        "GT": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name, song.genre_is, song.artist_name FROM genre JOIN song ON genre.g_name = song.f_id WHERE song.languages = \"English\" ORDER BY song.rating",
        "hyp_correct": false,
        "NL_query": "List the id, genre and artist name of English songs ordered by rating.",
        "index": 1064,
        "GT": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "SELECT song.song_name, song.genre_is, artist.artist_name FROM artist JOIN song ON artist.artist_name = song.f_id WHERE song.languages = \"English\" ORDER BY song.rating",
        "hyp_correct": false,
        "NL_query": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "index": 1065,
        "GT": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT AVG(player_college.year) FROM player_college WHERE player_college.college_id = \"Boston Red Stockings\"",
        "hyp_correct": false,
        "NL_query": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "index": 1066,
        "GT": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'",
        "DB": "baseball_1",
        "tables": [
            "player_college",
            "team",
            "salary"
        ]
    },
    {
        "SQL": "SELECT AVG(player_college.year) FROM player_college WHERE player_college.college_id = \"Boston Red Stockings\"",
        "hyp_correct": false,
        "NL_query": "Compute the average salary of the players in the team called 'Boston Red Stockings'.",
        "index": 1067,
        "GT": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'",
        "DB": "baseball_1",
        "tables": [
            "player_college",
            "team",
            "salary"
        ]
    },
    {
        "SQL": "SELECT all_star.player_id, all_star.game_id FROM player_college JOIN all_star ON player_college.player_id = all_star.player_id WHERE all_star.year = 1998",
        "hyp_correct": false,
        "NL_query": "What are first and last names of players participating in all star game in 1998?",
        "index": 1068,
        "GT": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "DB": "baseball_1",
        "tables": [
            "all_star",
            "player_college",
            "player"
        ]
    },
    {
        "SQL": "SELECT all_star.game_id FROM player_college JOIN all_star ON player_college.player_id = all_star.player_id WHERE all_star.year = 1998",
        "hyp_correct": false,
        "NL_query": "List the first and last name for players who participated in all star game in 1998.",
        "index": 1069,
        "GT": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "DB": "baseball_1",
        "tables": [
            "all_star",
            "player_college",
            "player"
        ]
    },
    {
        "SQL": "SELECT channel.Name FROM channel JOIN broadcast ON channel.Channel_ID = broadcast.Channel_ID WHERE broadcast.Time_of_day = \"morning\"",
        "hyp_correct": false,
        "NL_query": "Find the names of the channels that are broadcast in the morning.",
        "index": 1070,
        "GT": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "DB": "program_share",
        "tables": [
            "broadcast",
            "channel"
        ]
    },
    {
        "SQL": "SELECT channel.Name FROM channel JOIN broadcast ON channel.Channel_ID = broadcast.Channel_ID WHERE broadcast.Time_of_day = \"morning\"",
        "hyp_correct": false,
        "NL_query": "Which channels are broadcast in the morning? Give me the channel names.",
        "index": 1071,
        "GT": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "DB": "program_share",
        "tables": [
            "broadcast",
            "channel"
        ]
    },
    {
        "SQL": "SELECT Physician.Name, COUNT(*) FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician GROUP BY Prescribes.Physician",
        "hyp_correct": false,
        "NL_query": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "index": 1082,
        "GT": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "prescribes",
            "patient"
        ]
    },
    {
        "SQL": "SELECT Physician.Name, COUNT(*) FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician GROUP BY Physician.Name",
        "hyp_correct": false,
        "NL_query": "Return the name of each physician and the number of patients he or she treats.",
        "index": 1083,
        "GT": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "prescribes",
            "patient"
        ]
    },
    {
        "SQL": "SELECT Physician.Name FROM Physician JOIN Appointment ON Physician.EmployeeID = Appointment.Physician GROUP BY Appointment.Physician HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "Find the name of physicians who are in charge of more than one patient.",
        "index": 1084,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "appointment",
            "patient"
        ]
    },
    {
        "SQL": "SELECT Block.BlockCode, COUNT(*) FROM Block JOIN Room ON Block.BlockFloor = Room.BlockCode GROUP BY Block.BlockCode",
        "hyp_correct": false,
        "NL_query": "Find the number of rooms for different block code?",
        "index": 1088,
        "GT": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "DB": "hospital_1",
        "tables": [
            "room",
            "block"
        ]
    },
    {
        "SQL": "SELECT Block.BlockCode, COUNT(*) FROM Block JOIN Room ON Block.BlockFloor = Room.BlockCode GROUP BY Block.BlockCode",
        "hyp_correct": false,
        "NL_query": "How many rooms are located for each block code?",
        "index": 1089,
        "GT": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "DB": "hospital_1",
        "tables": [
            "room",
            "block"
        ]
    },
    {
        "SQL": "SELECT Medication.Brand, COUNT(*) FROM Medication GROUP BY Medication.Brand",
        "hyp_correct": false,
        "NL_query": "Find the number of medications prescribed for each brand.",
        "index": 1090,
        "GT": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "medication"
        ]
    },
    {
        "SQL": "SELECT Medication.Brand, COUNT(*) FROM Medication GROUP BY Medication.Brand",
        "hyp_correct": false,
        "NL_query": "How many medications are prescribed for each brand?",
        "index": 1091,
        "GT": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "medication"
        ]
    },
    {
        "SQL": "SELECT Physician.Name FROM Physician WHERE Physician.Position LIKE \"% senior %\"",
        "hyp_correct": false,
        "NL_query": "Find the name of physicians whose position title contains the word 'senior'.",
        "index": 1092,
        "GT": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "DB": "hospital_1",
        "tables": [
            "physician"
        ]
    },
    {
        "SQL": "SELECT Physician.Name FROM Physician WHERE Physician.Name LIKE \"% senior %\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the physicians who have 'senior' in their titles.",
        "index": 1093,
        "GT": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "DB": "hospital_1",
        "tables": [
            "physician"
        ]
    },
    {
        "SQL": "SELECT Undergoes.Patient FROM Undergoes ORDER BY Undergoes.DateUndergoes DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the patient who has the most recent undergoing treatment?",
        "index": 1094,
        "GT": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "undergoes"
        ]
    },
    {
        "SQL": "SELECT Undergoes.Patient FROM Undergoes ORDER BY Undergoes.DateUndergoes DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which patient is undergoing the most recent treatment?",
        "index": 1095,
        "GT": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "undergoes"
        ]
    },
    {
        "SQL": "SELECT Physician.EmployeeID, Affiliated_With.PrimaryAffiliation FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician WHERE Affiliated_With.Department = \"id\"",
        "hyp_correct": false,
        "NL_query": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "index": 1096,
        "GT": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "affiliated_with"
        ]
    },
    {
        "SQL": "SELECT Affiliated_With.Physician, COUNT(*) FROM Affiliated_With GROUP BY Affiliated_With.Physician",
        "hyp_correct": false,
        "NL_query": "What are each physician's employee id and department id primarily affiliated.",
        "index": 1097,
        "GT": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "affiliated_with"
        ]
    },
    {
        "SQL": "SELECT Nurse.Name FROM Nurse JOIN On_Call ON Nurse.EmployeeID = On_Call.Nurse WHERE On_Call.BlockFloor = 1 AND On_Call.BlockCode = 1",
        "hyp_correct": false,
        "NL_query": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
        "index": 1100,
        "GT": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1",
        "DB": "hospital_1",
        "tables": [
            "on_call",
            "nurse"
        ]
    },
    {
        "SQL": "SELECT Procedures.Name FROM Procedures ORDER BY Procedures.Cost DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "Find the three most expensive procedures.",
        "index": 1106,
        "GT": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "DB": "hospital_1",
        "tables": [
            "procedures"
        ]
    },
    {
        "SQL": "SELECT Procedures.Name FROM Procedures ORDER BY Procedures.Cost DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "What are the three most costly procedures?",
        "index": 1107,
        "GT": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "DB": "hospital_1",
        "tables": [
            "procedures"
        ]
    },
    {
        "SQL": "SELECT ship.Name FROM ship WHERE ship.Nationality = \"US\" OR ship.Nationality = \"UK\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the ships  that are from either the US or the UK?",
        "index": 1111,
        "GT": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"",
        "DB": "ship_mission",
        "tables": [
            "ship"
        ]
    },
    {
        "SQL": "SELECT company.Name FROM company WHERE company.Industry = \"banking\" OR company.Industry = \"retailing\"",
        "hyp_correct": false,
        "NL_query": "Show the names of companies in the banking or retailing industry?",
        "index": 1125,
        "GT": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "SELECT company.Name FROM company WHERE company.Sales_in_Billion > 200 ORDER BY company.Sales_in_Billion DESC",
        "hyp_correct": false,
        "NL_query": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "index": 1130,
        "GT": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "SELECT MIN(film_market_estimation.Low_Estimate), MIN(film_market_estimation.High_Estimate) FROM film_market_estimation",
        "hyp_correct": false,
        "NL_query": "What are the low and high estimates of film markets?",
        "index": 1131,
        "GT": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "DB": "film_rank",
        "tables": [
            "film_market_estimation"
        ]
    },
    {
        "SQL": "SELECT MIN(film_market_estimation.Low_Estimate), MIN(film_market_estimation.High_Estimate) FROM film_market_estimation",
        "hyp_correct": false,
        "NL_query": "Return the low and high estimates for all film markets.",
        "index": 1132,
        "GT": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "DB": "film_rank",
        "tables": [
            "film_market_estimation"
        ]
    },
    {
        "SQL": "SELECT film.Title, film.Studio FROM film WHERE film.Studio LIKE \"% Universal %\"",
        "hyp_correct": false,
        "NL_query": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "index": 1145,
        "GT": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "SELECT film.Title, film.Director FROM film WHERE film.Studio LIKE \"% Universal %\"",
        "hyp_correct": false,
        "NL_query": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
        "index": 1146,
        "GT": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "SELECT Organisations.organisation_id, Organisations.organisation_details FROM Organisations",
        "hyp_correct": false,
        "NL_query": "Find the organisation ids and details of the organisations which are involved in",
        "index": 1149,
        "GT": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisations",
            "grants"
        ]
    },
    {
        "SQL": "SELECT Grants.organisation_id, Organisations.organisation_details FROM Organisations JOIN Grants ON Organisations.organisation_id = Grants.organisation_id WHERE Grants.grant_amount > 6000",
        "hyp_correct": false,
        "NL_query": "What are the ids and details for all organizations that have grants of more than 6000 dollars?",
        "index": 1150,
        "GT": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisations",
            "grants"
        ]
    },
    {
        "SQL": "SELECT Project_Staff.date_from, Project_Staff.date_to FROM Project_Staff",
        "hyp_correct": false,
        "NL_query": "When do all the researcher role staff start to work, and when do they stop working?",
        "index": 1151,
        "GT": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT Project_Staff.date_from, Project_Staff.date_to FROM Project_Staff",
        "hyp_correct": false,
        "NL_query": "When did researchers start and stop working?",
        "index": 1152,
        "GT": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT Project_Staff.date_from FROM Project_Staff ORDER BY Project_Staff.date_to ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "When did the first staff for the projects started working?",
        "index": 1155,
        "GT": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT Project_Staff.date_from FROM Project_Staff ORDER BY Project_Staff.date_to ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "When did the first staff member start working?",
        "index": 1156,
        "GT": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT Document_Types.document_description FROM Document_Types WHERE Document_Types.document_description LIKE \"% Initial %\"",
        "hyp_correct": false,
        "NL_query": "Which document type is described with the prefix 'Initial'?",
        "index": 1157,
        "GT": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "document_types"
        ]
    },
    {
        "SQL": "SELECT Documents.document_type_code FROM Document_Types JOIN Documents ON Document_Types.document_type_code = Documents.document_type_code WHERE Document_Types.document_description LIKE \"% Initial %\"",
        "hyp_correct": false,
        "NL_query": "What is the type of the document whose description starts with the word 'Initial'?",
        "index": 1158,
        "GT": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "documents",
            "document_types"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Project_Staff WHERE Project_Staff.date_from < \"1989-04-24 23 : 51 : 54\" OR Project_Staff.date_from < \"1989-04-24 23 : 51 : 54\"",
        "hyp_correct": false,
        "NL_query": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "index": 1161,
        "GT": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Project_Staff WHERE Project_Staff.date_from < \"1989-04-24 23 : 51 : 54\"",
        "hyp_correct": false,
        "NL_query": "How many project members were leaders or started working before '1989-04-24 23:51:54'?",
        "index": 1162,
        "GT": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT MAX(Project_Staff.date_from) FROM Project_Staff",
        "hyp_correct": false,
        "NL_query": "What is the last date of the staff leaving the projects?",
        "index": 1163,
        "GT": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT MAX(Project_Staff.date_from) FROM Project_Staff",
        "hyp_correct": false,
        "NL_query": "What is the last date that a staff member left a project?",
        "index": 1164,
        "GT": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), Tasks.project_id FROM Tasks GROUP BY Tasks.project_id",
        "hyp_correct": false,
        "NL_query": "For each project id, how many tasks are there?",
        "index": 1166,
        "GT": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
        "DB": "tracking_grants_for_research",
        "tables": [
            "tasks",
            "projects"
        ]
    },
    {
        "SQL": "SELECT Project_Staff.role_code FROM Project_Staff",
        "hyp_correct": false,
        "NL_query": "What are the staff roles of the staff who",
        "index": 1167,
        "GT": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT Project_Staff.role_code FROM Project_Staff WHERE Project_Staff.date_from > \"2003-04 03-15 00 : 33 : 18\" AND Project_Staff.role_code = \"2016-04 03-15 00 : 33 : 18\"",
        "hyp_correct": false,
        "NL_query": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?",
        "index": 1168,
        "GT": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Person JOIN PersonFriend ON Person.name = PersonFriend.friend WHERE PersonFriend.friend = \"Dan\"",
        "hyp_correct": false,
        "NL_query": "How many friends does Dan have?",
        "index": 1169,
        "GT": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Person JOIN PersonFriend ON Person.name = PersonFriend.friend WHERE PersonFriend.friend = \"Dan\"",
        "hyp_correct": false,
        "NL_query": "How many friends does Dan have?",
        "index": 1170,
        "GT": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Person WHERE Person.age > 30 AND Person.job = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "How many people whose age is greater 30 and job is engineer?",
        "index": 1173,
        "GT": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Person WHERE Person.age > 30",
        "hyp_correct": false,
        "NL_query": "HOw many engineers are older than 30?",
        "index": 1174,
        "GT": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT AVG(Person.age), Person.gender FROM Person GROUP BY Person.gender",
        "hyp_correct": false,
        "NL_query": "What is average age of male for different job title?",
        "index": 1179,
        "GT": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT AVG(Person.age), Person.job FROM Person GROUP BY Person.job",
        "hyp_correct": false,
        "NL_query": "What is the average age for a male in each job?",
        "index": 1180,
        "GT": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT SUM(Person.age), Person.job FROM Person GROUP BY Person.job",
        "hyp_correct": false,
        "NL_query": "How old is the youngest person for each job?",
        "index": 1182,
        "GT": "SELECT min(age) ,  job FROM Person GROUP BY job",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT Person.name, Person.age FROM Person WHERE Person.gender = \"VALUE\" ORDER BY Person.age",
        "hyp_correct": false,
        "NL_query": "Find the name and age of all males in order of their age.",
        "index": 1187,
        "GT": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT Person.name, Person.age FROM Person WHERE Person.gender = \"male\" ORDER BY Person.age",
        "hyp_correct": false,
        "NL_query": "What is the name and age of every male? Order the results by age.",
        "index": 1188,
        "GT": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT PersonFriend.name FROM Person JOIN PersonFriend ON Person.name = PersonFriend.friend WHERE PersonFriend.name = \"Bob\"",
        "hyp_correct": false,
        "NL_query": "Find the name of persons who are friends with Bob.",
        "index": 1191,
        "GT": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT PersonFriend.name FROM Person JOIN PersonFriend ON Person.name = PersonFriend.friend WHERE PersonFriend.name = \"Bob\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all of Bob's friends?",
        "index": 1192,
        "GT": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT Person.name FROM Person JOIN PersonFriend ON Person.name = PersonFriend.friend WHERE Person.city = \"new york\"",
        "hyp_correct": false,
        "NL_query": "Who has a friend that is from new york city?",
        "index": 1199,
        "GT": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT PersonFriend.name FROM Person JOIN PersonFriend ON Person.name = PersonFriend.friend WHERE Person.city = \"New York\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all friends who are from New York?",
        "index": 1200,
        "GT": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT member.Name, college.College_Location FROM member JOIN college ON member.College_ID = college.College_ID ORDER BY college.Name ASC",
        "hyp_correct": false,
        "NL_query": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "index": 1206,
        "GT": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",
        "DB": "decoration_competition",
        "tables": [
            "member",
            "college"
        ]
    },
    {
        "SQL": "SELECT Premises.premises_type, Premises.premise_details FROM Premises WHERE Premises.premises_type = \"premise\"",
        "hyp_correct": false,
        "NL_query": "Find the types and details for all premises and order by the premise type.",
        "index": 1211,
        "GT": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "premises"
        ]
    },
    {
        "SQL": "SELECT Customers.customer_name, Customers.customer_phone FROM Customers JOIN Mailshot_Customers ON Customers.customer_id = Mailshot_Customers.customer_id WHERE Mailshot_Customers.outcome_code = \"no Response\"",
        "hyp_correct": false,
        "NL_query": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "index": 1214,
        "GT": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "customers",
            "mailshot_customers"
        ]
    },
    {
        "SQL": "SELECT Customers.customer_name FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.shipping_method_code = \"FedEx\"",
        "hyp_correct": false,
        "NL_query": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "index": 1217,
        "GT": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "customer_orders",
            "customers"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student WHERE Student.Fname LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "Find the first names of students whose first names contain letter \"a\".",
        "index": 1220,
        "GT": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student WHERE Student.Fname LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "What are the first names for students who have an \"a\" in their first name?",
        "index": 1221,
        "GT": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Faculty.Room FROM Faculty WHERE Faculty.Rank = \"VALUE\" AND Faculty.Building = \"NEB\"",
        "hyp_correct": false,
        "NL_query": "Find the rooms of faculties with rank professor who live in building NEB.",
        "index": 1224,
        "GT": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Faculty.Room FROM Faculty JOIN Member_of ON Faculty.FacID = Member_of.FacID JOIN Department ON Member_of.DNO = Department.DNO WHERE Faculty.Rank = \"VALUE\" AND Faculty.Building = \"NEB\"",
        "hyp_correct": false,
        "NL_query": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "index": 1225,
        "GT": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "member_of",
            "department",
            "faculty"
        ]
    },
    {
        "SQL": "SELECT Student.LName FROM Student WHERE Student.Sex = \"VALUE\" ORDER BY Student.Age DESC",
        "hyp_correct": false,
        "NL_query": "What are the last names of female students, ordered by age descending?",
        "index": 1227,
        "GT": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Faculty.Fname FROM Faculty WHERE Faculty.Rank = \"VALUE\" ORDER BY Faculty.Fname",
        "hyp_correct": false,
        "NL_query": "Find the first names of faculties of rank Professor in alphabetic order.",
        "index": 1230,
        "GT": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT Faculty.Fname FROM Faculty WHERE Faculty.Rank = \"VALUE\" ORDER BY Faculty.Fname",
        "hyp_correct": false,
        "NL_query": "What are the first names for all faculty professors, ordered by first name?",
        "index": 1231,
        "GT": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT Course.CName FROM Course JOIN Enrolled_in ON Course.CID = Enrolled_in.CID GROUP BY Course.CID HAVING COUNT(*) >= 4",
        "hyp_correct": false,
        "NL_query": "What are the name of courses that have at least five enrollments?",
        "index": 1232,
        "GT": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "DB": "college_3",
        "tables": [
            "course",
            "enrolled_in"
        ]
    },
    {
        "SQL": "SELECT Course.CName FROM Course JOIN Enrolled_in ON Course.CID = Enrolled_in.CID GROUP BY Course.CID HAVING COUNT(*) >= 4",
        "hyp_correct": false,
        "NL_query": "Give the names of the courses with at least five enrollments.",
        "index": 1233,
        "GT": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "DB": "college_3",
        "tables": [
            "course",
            "enrolled_in"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Faculty.Fname, Faculty.Lname FROM Faculty JOIN Course ON Faculty.FacID = Course.Instructor",
        "hyp_correct": false,
        "NL_query": "Find the first name and last name of the instructor of course that has course name",
        "index": 1234,
        "GT": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
        "DB": "college_3",
        "tables": [
            "course",
            "faculty"
        ]
    },
    {
        "SQL": "SELECT Department.DName, Department.Room FROM Course JOIN Department ON Department.DNO = Course.DNO WHERE Course.CName = \"COMPUTER SCIENCE\"",
        "hyp_correct": false,
        "NL_query": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "index": 1236,
        "GT": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "DB": "college_3",
        "tables": [
            "department",
            "course"
        ]
    },
    {
        "SQL": "SELECT Department.DName, Department.Room FROM Course JOIN Department ON Department.DNO = Course.DNO WHERE Course.CName = \"COMPUTER SCIENCE\"",
        "hyp_correct": false,
        "NL_query": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
        "index": 1237,
        "GT": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "DB": "college_3",
        "tables": [
            "department",
            "course"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName, Enrolled_in.Grade FROM Enrolled_in JOIN Student ON Enrolled_in.StuID = Student.StuID",
        "hyp_correct": false,
        "NL_query": "Find the student first and last names and grade points of all enrollments.",
        "index": 1238,
        "GT": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "DB": "college_3",
        "tables": [
            "student",
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName, Enrolled_in.Grade FROM Enrolled_in JOIN Student ON Enrolled_in.StuID = Student.StuID",
        "hyp_correct": false,
        "NL_query": "What are the full names and gradepoints for all enrollments?",
        "index": 1239,
        "GT": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "DB": "college_3",
        "tables": [
            "student",
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName FROM Minor_in JOIN Student ON Minor_in.StuID = Student.StuID WHERE Student.Major = 140",
        "hyp_correct": false,
        "NL_query": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "index": 1242,
        "GT": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "DB": "college_3",
        "tables": [
            "student",
            "minor_in"
        ]
    },
    {
        "SQL": "SELECT airport.International_Passengers FROM airport WHERE airport.Airport_Name = \"London\" AND airport.Domestic_Passengers = \"Heathrow\"",
        "hyp_correct": false,
        "NL_query": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
        "index": 1244,
        "GT": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "SELECT SUM(airport.Total_Passengers) FROM airport WHERE airport.Domestic_Passengers LIKE \"% London %\"",
        "hyp_correct": false,
        "NL_query": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "index": 1246,
        "GT": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "SELECT SUM(airport.Total_Passengers) FROM airport WHERE airport.Airport_Name = \"London\"",
        "hyp_correct": false,
        "NL_query": "What are the total number of domestic passengers at all London airports?",
        "index": 1247,
        "GT": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "SELECT MAX(airport.Transit_Passengers), MIN(airport.Transit_Passengers) FROM airport WHERE airport.Airport_ID = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What are the maximum and minimum number of transit passengers of all aiports.",
        "index": 1248,
        "GT": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "SELECT pilot.Name FROM pilot WHERE pilot.Age <= 30 ORDER BY pilot.Age DESC",
        "hyp_correct": false,
        "NL_query": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "index": 1250,
        "GT": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
        "DB": "aircraft",
        "tables": [
            "pilot"
        ]
    },
    {
        "SQL": "SELECT pilot.Name FROM pilot WHERE pilot.Age >= 30",
        "hyp_correct": false,
        "NL_query": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
        "index": 1251,
        "GT": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
        "DB": "aircraft",
        "tables": [
            "pilot"
        ]
    },
    {
        "SQL": "SELECT match.Location, match.Winning_Aircraft FROM match JOIN aircraft ON match.Winning_Aircraft = aircraft.Aircraft_ID",
        "hyp_correct": false,
        "NL_query": "Please list the location and the winning aircraft name.",
        "index": 1252,
        "GT": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
        "DB": "aircraft",
        "tables": [
            "match",
            "aircraft"
        ]
    },
    {
        "SQL": "SELECT match.Location, match.Winning_Aircraft FROM match JOIN aircraft ON match.Winning_Aircraft = aircraft.Aircraft_ID ORDER BY aircraft.Aircraft LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the location and name of the winning aircraft?",
        "index": 1253,
        "GT": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
        "DB": "aircraft",
        "tables": [
            "match",
            "aircraft"
        ]
    },
    {
        "SQL": "SELECT aircraft.Aircraft, match.Winning_Aircraft FROM aircraft JOIN match ON aircraft.Aircraft_ID = match.Winning_Aircraft GROUP BY match.Winning_Aircraft HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "List the names of aircrafts and that won matches at least twice.",
        "index": 1256,
        "GT": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
        "DB": "aircraft",
        "tables": [
            "match",
            "aircraft"
        ]
    },
    {
        "SQL": "SELECT Player.pName FROM Player WHERE Player.pName LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "Find the players whose names contain letter 'a'.",
        "index": 1264,
        "GT": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "DB": "soccer_2",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT Player.pName FROM Player WHERE Player.pName LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "Who are the players that have names containing the letter a?",
        "index": 1265,
        "GT": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "DB": "soccer_2",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT College.cName, College.enr FROM College WHERE College.state = \"Louisiana\" AND College.enr > 10000",
        "hyp_correct": false,
        "NL_query": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "index": 1267,
        "GT": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT College.cName FROM College WHERE College.enr > 18000",
        "hyp_correct": false,
        "NL_query": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "index": 1269,
        "GT": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT Player.pName FROM Player ORDER BY Player.HS DESC",
        "hyp_correct": false,
        "NL_query": "What are the name of the players who received a card in descending order of the hours of training?",
        "index": 1271,
        "GT": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "DB": "soccer_2",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT MIN(Player.HS), Tryout.pPos FROM Tryout JOIN Player ON Player.pID = Tryout.cName GROUP BY Tryout.pPos",
        "hyp_correct": false,
        "NL_query": "What is minimum hours of the students playing in different position?",
        "index": 1272,
        "GT": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.pPos, MIN(*) FROM Tryout GROUP BY Tryout.pPos",
        "hyp_correct": false,
        "NL_query": "For each position, what is the minimum time students spent practicing?",
        "index": 1273,
        "GT": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT College.cName FROM College GROUP BY College.state ORDER BY SUM(College.enr) LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the school with smallest enrollment size per state?",
        "index": 1277,
        "GT": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT DISTINCT College.state FROM Tryout JOIN College ON Tryout.pID = College.cName",
        "hyp_correct": false,
        "NL_query": "What are the different states that had students successfully try out?",
        "index": 1279,
        "GT": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Tryout WHERE Tryout.decision = \"yes\"",
        "hyp_correct": false,
        "NL_query": "Find the name and college of students whose decisions are yes in the tryout.",
        "index": 1280,
        "GT": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Player.pName, Tryout.cName FROM Player JOIN Tryout ON Player.pID = Tryout.pID JOIN College ON Tryout.pID = College.cName WHERE Player.yCard = \"yes\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "index": 1281,
        "GT": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Tryout ORDER BY Tryout.cName",
        "hyp_correct": false,
        "NL_query": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "index": 1282,
        "GT": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Tryout ORDER BY Tryout.cName",
        "hyp_correct": false,
        "NL_query": "What are the names of all students who tried out in alphabetical order?",
        "index": 1283,
        "GT": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName, Player.HS FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.decision = \"yes\"",
        "hyp_correct": false,
        "NL_query": "Find the name and hours of the students whose tryout decision is yes.",
        "index": 1284,
        "GT": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName, Player.HS FROM Tryout JOIN Player ON Tryout.pID = Player.pID WHERE Player.yCard = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "index": 1285,
        "GT": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Tryout WHERE Tryout.pPos = \"striker\"",
        "hyp_correct": false,
        "NL_query": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "index": 1288,
        "GT": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Tryout WHERE Tryout.pPos = \"striker\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all students who successfully tried out for the position of striker?",
        "index": 1289,
        "GT": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT AVG(Tryout.decision) FROM Tryout WHERE Tryout.decision = \"no\"",
        "hyp_correct": false,
        "NL_query": "Find the average hours for the students whose tryout decision is no.",
        "index": 1290,
        "GT": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT AVG(Player.HS) FROM Player WHERE Player.pID IN (SELECT Tryout.decision FROM Tryout)",
        "hyp_correct": false,
        "NL_query": "What is the average number of hours spent practicing for students who got rejected?",
        "index": 1291,
        "GT": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Tryout WHERE Tryout.pPos = \"goalie\"",
        "hyp_correct": false,
        "NL_query": "Which college has any student who is a goalie and succeeded in the tryout.",
        "index": 1292,
        "GT": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos = \"goalie\"",
        "hyp_correct": false,
        "NL_query": "What college has a student who successfully made the team in the role of a goalie?",
        "index": 1293,
        "GT": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT College.state, College.enr FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.decision = \"tryout\"",
        "hyp_correct": false,
        "NL_query": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "index": 1294,
        "GT": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Tryout JOIN College ON Tryout.cName = College.cName WHERE College.enr = College.enr + College.state",
        "hyp_correct": false,
        "NL_query": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?",
        "index": 1295,
        "GT": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT shop.Open_Date FROM shop WHERE shop.Shop_Name = \"Apple\"",
        "hyp_correct": false,
        "NL_query": "List the open date of open year of the shop named \"Apple\".",
        "index": 1298,
        "GT": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
        "DB": "device",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "SELECT MAX(Problem_Log.problem_id), MAX(Problem_Log.problem_log_id) FROM Problem_Log",
        "hyp_correct": false,
        "NL_query": "What is the oldest log id and its corresponding problem id?",
        "index": 1314,
        "GT": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log"
        ]
    },
    {
        "SQL": "SELECT MAX(Problem_Log.problem_id), Problem_Log.problem_log_id FROM Problem_Log",
        "hyp_correct": false,
        "NL_query": "Find the oldest log id and its corresponding problem id.",
        "index": 1315,
        "GT": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log"
        ]
    },
    {
        "SQL": "SELECT Problem_Log.problem_id, Problems.date_problem_reported FROM Problems JOIN Problem_Log ON Problems.problem_id = Problem_Log.problem_id WHERE Problem_Log.problem_log_id = 10",
        "hyp_correct": false,
        "NL_query": "For the problem with id 10, return the ids and dates of its problem logs.",
        "index": 1317,
        "GT": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "DB": "tracking_software_problems",
        "tables": [
            "problems",
            "problem_log"
        ]
    },
    {
        "SQL": "SELECT Problems.problem_description FROM Staff JOIN Problem_Log ON Staff.staff_id = Problem_Log.assigned_to_staff_id JOIN Problems ON Problem_Log.problem_id = Problems.problem_id WHERE Staff.staff_first_name = \"Christop\"",
        "hyp_correct": false,
        "NL_query": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "index": 1324,
        "GT": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "DB": "tracking_software_problems",
        "tables": [
            "staff",
            "problems",
            "problem_log"
        ]
    },
    {
        "SQL": "SELECT Problems.problem_description FROM Staff JOIN Problem_Log ON Staff.staff_id = Problem_Log.assigned_to_staff_id JOIN Problems ON Problem_Log.problem_id = Problems.problem_id WHERE Staff.staff_first_name = \"Christop\"",
        "hyp_correct": false,
        "NL_query": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.",
        "index": 1325,
        "GT": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "DB": "tracking_software_problems",
        "tables": [
            "staff",
            "problems",
            "problem_log"
        ]
    },
    {
        "SQL": "SELECT Problem_Log.problem_id FROM Staff JOIN Problem_Log ON Staff.staff_id = Problem_Log.assigned_to_staff_id WHERE Staff.staff_last_name = \"Bosco\"",
        "hyp_correct": false,
        "NL_query": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "index": 1326,
        "GT": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"",
        "DB": "tracking_software_problems",
        "tables": [
            "staff",
            "problems",
            "problem_log"
        ]
    },
    {
        "SQL": "SELECT Problem_Log.problem_id FROM Staff JOIN Problem_Log ON Staff.staff_id = Problem_Log.assigned_to_staff_id WHERE Staff.staff_last_name = \"Bosco\"",
        "hyp_correct": false,
        "NL_query": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.",
        "index": 1327,
        "GT": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"",
        "DB": "tracking_software_problems",
        "tables": [
            "staff",
            "problems",
            "problem_log"
        ]
    },
    {
        "SQL": "SELECT branch.Name FROM branch JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID ORDER BY branch.membership_amount DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "What are names for top three branches with most number of membership?",
        "index": 1334,
        "GT": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "membership_register_branch"
        ]
    },
    {
        "SQL": "SELECT branch.Name FROM branch JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID ORDER BY branch.membership_amount DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "What are the names for the 3 branches that have the most memberships?",
        "index": 1335,
        "GT": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "membership_register_branch"
        ]
    },
    {
        "SQL": "SELECT SUM(purchase.Total_pounds) FROM purchase JOIN member ON purchase.Member_ID = member.Member_ID WHERE member.Level = 6",
        "hyp_correct": false,
        "NL_query": "What is the total number of purchases for members with level 6?",
        "index": 1346,
        "GT": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "DB": "shop_membership",
        "tables": [
            "member",
            "purchase"
        ]
    },
    {
        "SQL": "SELECT SUM(purchase.Total_pounds) FROM purchase JOIN member ON purchase.Member_ID = member.Member_ID WHERE member.Level = 6",
        "hyp_correct": false,
        "NL_query": "What are the total purchases for members rated at level 6?",
        "index": 1347,
        "GT": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "DB": "shop_membership",
        "tables": [
            "member",
            "purchase"
        ]
    },
    {
        "SQL": "SELECT member.Card_Number FROM member WHERE member.Hometown LIKE \"% Kentucky %\"",
        "hyp_correct": false,
        "NL_query": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "index": 1348,
        "GT": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "DB": "shop_membership",
        "tables": [
            "member"
        ]
    },
    {
        "SQL": "SELECT member.Card_Number FROM member WHERE member.Hometown = \"Kentucky\"",
        "hyp_correct": false,
        "NL_query": "What are the card numbers of members from Kentucky?",
        "index": 1349,
        "GT": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "DB": "shop_membership",
        "tables": [
            "member"
        ]
    },
    {
        "SQL": "SELECT Customers.customer_name, Customer_Address_History.date_from, Customer_Address_History.date_to FROM Customers JOIN Customer_Address_History ON Customers.customer_id = Customer_Address_History.customer_id JOIN Addresses ON Customer_Address_History.address_id = Addresses.address_id",
        "hyp_correct": false,
        "NL_query": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "index": 1354,
        "GT": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "DB": "customers_and_products_contacts",
        "tables": [
            "addresses",
            "customer_address_history",
            "customers"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Student WHERE Student.Sex = \"F\" AND Student.Age < 25 GROUP BY \"How\"",
        "hyp_correct": false,
        "NL_query": "How many female students (sex is F) whose age is below 25?",
        "index": 1355,
        "GT": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Student WHERE Student.Age < 25 AND Student.Sex = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "How many girl students who are younger than 25?",
        "index": 1356,
        "GT": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student WHERE Student.Age BETWEEN 20 AND 25",
        "hyp_correct": false,
        "NL_query": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "index": 1357,
        "GT": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student WHERE Student.Age BETWEEN 20 AND Student.city_code = \"PHL\"",
        "hyp_correct": false,
        "NL_query": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
        "index": 1358,
        "GT": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT AVG(Dorm.student_capacity), SUM(Dorm.student_capacity) FROM Dorm JOIN Student ON Dorm.dormid = Student.StuID WHERE Student.Sex = \"X\"",
        "hyp_correct": false,
        "NL_query": "Find the average and total capacity of dorms for the students with gender X.",
        "index": 1361,
        "GT": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Dorm.student_capacity, Dorm.gender FROM Dorm JOIN Student ON Student.StuID = Dorm.dormid WHERE Dorm.dorm_name LIKE \"% Donor %\"",
        "hyp_correct": false,
        "NL_query": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
        "index": 1364,
        "GT": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Student.Major), Student.city_code FROM Student GROUP BY Student.Major, Student.city_code",
        "hyp_correct": false,
        "NL_query": "Find the numbers of different majors and cities.",
        "index": 1365,
        "GT": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Student.Major), COUNT(DISTINCT Student.city_code), Student.city_code FROM Student GROUP BY Student.city_code",
        "hyp_correct": false,
        "NL_query": "How many different majors are there and how many different city codes are there for each student?",
        "index": 1366,
        "GT": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), Dorm.gender FROM Dorm GROUP BY Dorm.gender",
        "hyp_correct": false,
        "NL_query": "Find the number of dorms and total capacity for each gender.",
        "index": 1371,
        "GT": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "SELECT SUM(Dorm.student_capacity), Dorm.gender FROM Dorm GROUP BY Dorm.gender",
        "hyp_correct": false,
        "NL_query": "How many dorms are there and what is the total capacity for each gender?",
        "index": 1372,
        "GT": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Student.city_code, AVG(Student.Age) FROM Student GROUP BY Student.city_code",
        "hyp_correct": false,
        "NL_query": "Find the number and average age of students living in each city.",
        "index": 1377,
        "GT": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Student.city_code, AVG(Student.Age) FROM Student GROUP BY Student.city_code",
        "hyp_correct": false,
        "NL_query": "How many students live in each city and what are their average ages?",
        "index": 1378,
        "GT": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Student.city_code FROM Student GROUP BY Student.city_code HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "Find the number of students for the cities where have more than one student.",
        "index": 1379,
        "GT": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT Products.product_name, COUNT(*) FROM Complaints JOIN Products ON Complaints.product_id = Products.product_id GROUP BY Complaints.product_id",
        "hyp_correct": false,
        "NL_query": "What are all the different product names, and how many complains has each received?",
        "index": 1384,
        "GT": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "DB": "customer_complaints",
        "tables": [
            "complaints",
            "products"
        ]
    },
    {
        "SQL": "SELECT Staff.last_name FROM Staff WHERE Staff.email_address LIKE \"% wrau %\"",
        "hyp_correct": false,
        "NL_query": "Find the last name of the staff whose email address contains \"wrau\".",
        "index": 1389,
        "GT": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
        "DB": "customer_complaints",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "SELECT Staff.last_name FROM Staff WHERE Staff.email_address LIKE \"% wrau %\"",
        "hyp_correct": false,
        "NL_query": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
        "index": 1390,
        "GT": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
        "DB": "customer_complaints",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "SELECT Customers.address_line_1, Customers.address_line_2 FROM Customers WHERE Customers.email_address = \"vbogisich @ example.org\"",
        "hyp_correct": false,
        "NL_query": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "index": 1391,
        "GT": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT Customers.address_line_1, Customers.address_line_2 FROM Customers WHERE Customers.email_address = \"vbogisich @ example.org\"",
        "hyp_correct": false,
        "NL_query": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "index": 1392,
        "GT": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT Complaints.complaint_status_code, COUNT(*) FROM Complaints WHERE Complaints.complaint_type_code = \"Failure\" GROUP BY Complaints.complaint_status_code",
        "hyp_correct": false,
        "NL_query": "Find the number of complaints with Product Failure type for each complaint status.",
        "index": 1393,
        "GT": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
        "DB": "customer_complaints",
        "tables": [
            "complaints"
        ]
    },
    {
        "SQL": "SELECT Student.LName FROM Student",
        "hyp_correct": false,
        "NL_query": "Show last names for all student who are on scholarship.",
        "index": 1401,
        "GT": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT Student.LName FROM Student",
        "hyp_correct": false,
        "NL_query": "What are the last names for all scholarship students?",
        "index": 1402,
        "GT": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM SportsInfo WHERE SportsInfo.SportName = \"football\"",
        "hyp_correct": false,
        "NL_query": "How many games are played for all football games by students on scholarship?",
        "index": 1403,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM SportsInfo",
        "hyp_correct": false,
        "NL_query": "What is the total number of all football games played by scholarship students?",
        "index": 1404,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT Plays_Games.StuID, COUNT(*) FROM Plays_Games GROUP BY Plays_Games.StuID",
        "hyp_correct": false,
        "NL_query": "Show all student IDs with the number of sports and total number of games played",
        "index": 1407,
        "GT": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "DB": "game_1",
        "tables": [
            "plays_games",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), Student.StuID FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID GROUP BY Student.StuID",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students along with how many sports and games did they play?",
        "index": 1408,
        "GT": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT Plays_Games.StuID, Plays_Games.Hours_Played FROM Plays_Games",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students and number of hours played?",
        "index": 1412,
        "GT": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "DB": "game_1",
        "tables": [
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT SportsInfo.GamesPlayed FROM SportsInfo WHERE SportsInfo.HoursPerWeek >= 1000",
        "hyp_correct": false,
        "NL_query": "Show all game names played by at least 1000 hours.",
        "index": 1413,
        "GT": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
        "DB": "game_1",
        "tables": [
            "plays_games",
            "sportsinfo",
            "video_games"
        ]
    },
    {
        "SQL": "SELECT roller_coaster.Status FROM roller_coaster WHERE roller_coaster.Length > 3300 OR roller_coaster.Length > 100",
        "hyp_correct": false,
        "NL_query": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "index": 1416,
        "GT": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100",
        "DB": "roller_coaster",
        "tables": [
            "roller_coaster"
        ]
    },
    {
        "SQL": "SELECT Parties.payment_method_code, Parties.party_phone FROM Parties WHERE Parties.party_email = \"enrico09 @ example.com\"",
        "hyp_correct": false,
        "NL_query": "Find the payment method and phone of the party with email \"enrico09@example.com\".",
        "index": 1425,
        "GT": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
        "DB": "e_government",
        "tables": [
            "parties"
        ]
    },
    {
        "SQL": "SELECT Parties.payment_method_code, Parties.party_phone FROM Parties WHERE Parties.party_email = \"enrico09 @ example.com\"",
        "hyp_correct": false,
        "NL_query": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?",
        "index": 1426,
        "GT": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
        "DB": "e_government",
        "tables": [
            "parties"
        ]
    },
    {
        "SQL": "SELECT Organizations.organization_name FROM Organizations ORDER BY Organizations.date_formed ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the name of the youngest organization.",
        "index": 1427,
        "GT": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "DB": "e_government",
        "tables": [
            "organizations"
        ]
    },
    {
        "SQL": "SELECT Organizations.organization_name FROM Organizations WHERE Organizations.organization_name LIKE \"% Party %\"",
        "hyp_correct": false,
        "NL_query": "Find the name of organizations whose names contain \"Party\".",
        "index": 1429,
        "GT": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "DB": "e_government",
        "tables": [
            "organizations"
        ]
    },
    {
        "SQL": "SELECT Organizations.organization_name FROM Organizations WHERE Organizations.organization_name LIKE \"% Party %\"",
        "hyp_correct": false,
        "NL_query": "What are the names of organizations that contain the word \"Party\"?",
        "index": 1430,
        "GT": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "DB": "e_government",
        "tables": [
            "organizations"
        ]
    },
    {
        "SQL": "SELECT Addresses.state_province_county FROM Addresses WHERE Addresses.address_id = \"6862 Kaitlyn Knolls\"",
        "hyp_correct": false,
        "NL_query": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "index": 1431,
        "GT": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "SELECT Addresses.state_province_county FROM Addresses WHERE Addresses.line_1_number_building = \"6862 Kaitlyn Knolls\"",
        "hyp_correct": false,
        "NL_query": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".",
        "index": 1432,
        "GT": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "SELECT driver.Party FROM driver WHERE driver.Home_city = \"Hartford\" INTERSECT SELECT driver.Party FROM driver WHERE driver.Age > 40",
        "hyp_correct": false,
        "NL_query": "Show the party with drivers from Hartford and drivers older than 40.",
        "index": 1435,
        "GT": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40",
        "DB": "school_bus",
        "tables": [
            "driver"
        ]
    },
    {
        "SQL": "SELECT school.School, driver.Name FROM school JOIN school_bus ON school.School_ID = school_bus.Driver_ID JOIN driver ON school_bus.Driver_ID = driver.Driver_ID",
        "hyp_correct": false,
        "NL_query": "Show the school name and driver name for all school buses.",
        "index": 1437,
        "GT": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
        "DB": "school_bus",
        "tables": [
            "school",
            "school_bus",
            "driver"
        ]
    },
    {
        "SQL": "SELECT school.Type, COUNT(*) FROM school GROUP BY school.Type",
        "hyp_correct": false,
        "NL_query": "Show the type of school and the number of buses for each type.",
        "index": 1439,
        "GT": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
        "DB": "school_bus",
        "tables": [
            "school",
            "school_bus"
        ]
    },
    {
        "SQL": "SELECT Documents.Document_ID, COUNT(*) FROM Documents WHERE Documents.Document_Type_Code = \"BK\" GROUP BY Documents.Document_ID",
        "hyp_correct": false,
        "NL_query": "How many documents are with document type code BK for each product id?",
        "index": 1454,
        "GT": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "SELECT Documents.Document_ID, COUNT(*) FROM Documents WHERE Documents.Document_Type_Code = \"BK\" GROUP BY Documents.Document_ID",
        "hyp_correct": false,
        "NL_query": "Count the number of documents with the type code BK that correspond to each product id.",
        "index": 1455,
        "GT": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "SELECT Statements.Statement_Details, Documents.Document_Name FROM Statements JOIN Documents ON Documents.Project_ID = Statements.Statement_ID WHERE Statements.Statement_Details = \"Private Project\"",
        "hyp_correct": false,
        "NL_query": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "index": 1463,
        "GT": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "statements"
        ]
    },
    {
        "SQL": "SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description FROM Documents JOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code",
        "hyp_correct": false,
        "NL_query": "What is the document type name and the document type description and creation date for all the documents?",
        "index": 1466,
        "GT": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "ref_document_types",
            "documents"
        ]
    },
    {
        "SQL": "SELECT Documents.Document_ID FROM Ref_Budget_Codes JOIN Documents ON Ref_Budget_Codes.Budget_Type_Code = Documents.Document_Type_Code WHERE Ref_Budget_Codes.Budget_Type_Description = \"Government\"",
        "hyp_correct": false,
        "NL_query": "Show ids for all documents with budget types described as 'Government'.",
        "index": 1478,
        "GT": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "ref_budget_codes",
            "documents_with_expenses"
        ]
    },
    {
        "SQL": "SELECT Documents_with_Expenses.Document_ID FROM Documents_with_Expenses JOIN Ref_Budget_Codes ON Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code WHERE Documents_with_Expenses.Document_Details = \"Government\"",
        "hyp_correct": false,
        "NL_query": "Give the ids for documents that have the budget description 'Government'.",
        "index": 1479,
        "GT": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "SELECT station.Name, station.Location, station.Number_of_Platforms FROM station JOIN train_station ON station.Station_ID = train_station.Station_ID",
        "hyp_correct": false,
        "NL_query": "Show the name, location, and number of platforms for all stations.",
        "index": 1482,
        "GT": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
        "DB": "train_station",
        "tables": [
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT station.Name, SUM(station.Total_Passengers) FROM station JOIN train_station ON station.Station_ID = train_station.Station_ID WHERE station.Location != \"London\"",
        "hyp_correct": false,
        "NL_query": "Show the names and total passengers for all train stations not in London.",
        "index": 1483,
        "GT": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'",
        "DB": "train_station",
        "tables": [
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT station.Name, station.Main_Services FROM station JOIN train_station ON train_station.Station_ID = station.Station_ID ORDER BY station.Total_Passengers DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "Show the names and main services for train stations that have the top three total number of passengers.",
        "index": 1484,
        "GT": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "DB": "train_station",
        "tables": [
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT station.Location, SUM(station.Total_Passengers) FROM station JOIN train_station ON station.Station_ID = train_station.Station_ID GROUP BY station.Location",
        "hyp_correct": false,
        "NL_query": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "index": 1485,
        "GT": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION",
        "DB": "train_station",
        "tables": [
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT station.Location FROM station JOIN train_station ON station.Station_ID = train_station.Station_ID WHERE station.Total_Passengers > 25 AND station.Total_Passengers > 15",
        "hyp_correct": false,
        "NL_query": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "index": 1486,
        "GT": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25",
        "DB": "train_station",
        "tables": [
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT train.Name, station.Name FROM train_station JOIN station ON train_station.Train_ID = station.Station_ID JOIN train ON train_station.Station_ID = train.Train_ID",
        "hyp_correct": false,
        "NL_query": "show the train name and station name for each train.",
        "index": 1490,
        "GT": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",
        "DB": "train_station",
        "tables": [
            "train",
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT Staff.first_name, Staff.middle_name FROM Staff",
        "hyp_correct": false,
        "NL_query": "List the first name middle name and last name of all staff.",
        "index": 1493,
        "GT": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "SELECT Addresses.city FROM Addresses JOIN Customers ON Addresses.address_id = Customers.customer_address_id JOIN Staff ON Customers.customer_address_id = Staff.staff_id WHERE Staff.first_name = \"Janessa\" AND Staff.last_name = \"Sawayn\"",
        "hyp_correct": false,
        "NL_query": "In what city does Janessa Sawayn live?",
        "index": 1504,
        "GT": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff",
            "customers"
        ]
    },
    {
        "SQL": "SELECT Addresses.state_province_county FROM Addresses JOIN Staff ON Addresses.address_id = Staff.staff_address_id GROUP BY Addresses.address_id HAVING COUNT(*) BETWEEN 2 AND 4",
        "hyp_correct": false,
        "NL_query": "List the states which have between 2 to 4 staffs living there.",
        "index": 1511,
        "GT": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT Addresses.state_province_county FROM Addresses GROUP BY Addresses.state_province_county HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "What are the names of the states that have 2 to 4 employees living there?",
        "index": 1512,
        "GT": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT Customers.cell_mobile_phone_number, Customers.email_address FROM Customers WHERE Customers.amount_outstanding > 2000",
        "hyp_correct": false,
        "NL_query": "List phone number and email address of customer with more than 2000 outstanding balance.",
        "index": 1517,
        "GT": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",
        "DB": "driving_school",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT Customers.cell_mobile_phone_number, Customers.email_address FROM Customers WHERE Customers.amount_outstanding > 2000",
        "hyp_correct": false,
        "NL_query": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
        "index": 1518,
        "GT": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",
        "DB": "driving_school",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Customers JOIN Lessons ON Customers.customer_id = Lessons.customer_id WHERE Customers.first_name = \"Rylan\" AND Customers.last_name = \"Goodwin\"",
        "hyp_correct": false,
        "NL_query": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "index": 1523,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "DB": "driving_school",
        "tables": [
            "customers",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Customers JOIN Lessons ON Customers.customer_id = Lessons.customer_id WHERE Customers.first_name = \"Ryan\" AND Customers.last_name = \"Goodwin\"",
        "hyp_correct": false,
        "NL_query": "How many lessons did the customer Ryan Goodwin complete?",
        "index": 1524,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "DB": "driving_school",
        "tables": [
            "customers",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT MAX(Customer_Payments.amount_payment), MIN(Customer_Payments.amount_payment), AVG(Customer_Payments.amount_payment) FROM Customer_Payments",
        "hyp_correct": false,
        "NL_query": "What is the maximum, minimum, and average amount of money outsanding for all customers?",
        "index": 1526,
        "GT": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;",
        "DB": "driving_school",
        "tables": [
            "customers",
            "customer_payments"
        ]
    },
    {
        "SQL": "SELECT SUM(Lessons.lesson_time) FROM Lessons JOIN Staff ON Lessons.customer_id = Staff.staff_id WHERE Staff.first_name = \"Janessa\" AND Staff.last_name = \"Sawayn\"",
        "hyp_correct": false,
        "NL_query": "What is the total time for all lessons taught by Janessa Sawayn?",
        "index": 1542,
        "GT": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "staff",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT airports.name, airports.country, airports.elevation FROM airports WHERE airports.city = \"New York\"",
        "hyp_correct": false,
        "NL_query": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "index": 1547,
        "GT": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.name, airports.country, airports.elevation FROM airports WHERE airports.city = \"New York\"",
        "hyp_correct": false,
        "NL_query": "What is the name, city, country, and elevation for every airport in the city of New York?",
        "index": 1548,
        "GT": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT airlines.country FROM airlines WHERE airlines.callsign LIKE \"Orbit\"",
        "hyp_correct": false,
        "NL_query": "Find the country of the airlines whose name starts with 'Orbit'.",
        "index": 1551,
        "GT": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
        "DB": "flight_4",
        "tables": [
            "airlines"
        ]
    },
    {
        "SQL": "SELECT airlines.country FROM airlines WHERE airlines.name LIKE \"% Orbit %\"",
        "hyp_correct": false,
        "NL_query": "What are the countries of all airlines whose names start with Orbit?",
        "index": 1552,
        "GT": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
        "DB": "flight_4",
        "tables": [
            "airlines"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airports WHERE airports.name LIKE \"% International %\"",
        "hyp_correct": false,
        "NL_query": "Find the number of airports whose name contain the word 'International'.",
        "index": 1555,
        "GT": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airports WHERE airports.name LIKE \"% Inter %\"",
        "hyp_correct": false,
        "NL_query": "How many airports' names have the word Interanation in them?",
        "index": 1556,
        "GT": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airlines WHERE airlines.name = \"American Airlines\"",
        "hyp_correct": false,
        "NL_query": "Find the number of routes operated by American Airlines.",
        "index": 1557,
        "GT": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "routes"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airlines WHERE airlines.name = \"American Airlines\"",
        "hyp_correct": false,
        "NL_query": "How many routes does American Airlines operate?",
        "index": 1558,
        "GT": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "routes"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM routes JOIN airports ON routes.src_apid = airports.apid WHERE airports.country = \"Canadian\"",
        "hyp_correct": false,
        "NL_query": "How many routes end in a Canadian airport?",
        "index": 1560,
        "GT": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT routes.dst_ap) FROM routes JOIN airlines ON airlines.alid = routes.alid WHERE airlines.name = \"American Airlines\"",
        "hyp_correct": false,
        "NL_query": "Find the number of different airports which are the destinations of the American Airlines.",
        "index": 1565,
        "GT": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "routes"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT routes.dst_ap) FROM routes JOIN airlines ON airlines.alid = routes.alid WHERE airlines.name = \"American Airlines\"",
        "hyp_correct": false,
        "NL_query": "What is the number of different different airports that are destinations for American Airlines?",
        "index": 1566,
        "GT": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "routes"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airports WHERE airports.country = \"United States\" AND airports.country > 3",
        "hyp_correct": false,
        "NL_query": "What is the number of cities in the United States with more than 3 airports?",
        "index": 1568,
        "GT": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.city FROM airports GROUP BY airports.city HAVING COUNT(*) > 2 ORDER BY COUNT(*) DESC",
        "hyp_correct": false,
        "NL_query": "List the cities which have more than 2 airports sorted by the number of airports.",
        "index": 1571,
        "GT": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.city FROM airports GROUP BY airports.city HAVING COUNT(*) > 2 ORDER BY COUNT(*) DESC",
        "hyp_correct": false,
        "NL_query": "What are the cities that have more than 2 airports sorted by number of airports?",
        "index": 1572,
        "GT": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT routes.src_ap, COUNT(*) FROM routes JOIN airports ON routes.src_apid = airports.apid GROUP BY routes.src_ap",
        "hyp_correct": false,
        "NL_query": "Find the number of routes for each source airport and the airport name.",
        "index": 1573,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.name, COUNT(*) FROM routes JOIN airports ON routes.src_apid = airports.apid GROUP BY airports.apid",
        "hyp_correct": false,
        "NL_query": "For each airport name, how many routes start at that airport?",
        "index": 1574,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM routes JOIN airports ON routes.dst_apid = airports.apid WHERE airports.country = \"Italian\"",
        "hyp_correct": false,
        "NL_query": "What is the number of routes whose destinations are Italian airports?",
        "index": 1578,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT Orders.order_id, Orders.customer_id FROM Orders ORDER BY Orders.date_order_placed DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "what are the order id and customer id of the oldest order?",
        "index": 1583,
        "GT": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "DB": "tracking_orders",
        "tables": [
            "orders"
        ]
    },
    {
        "SQL": "SELECT Orders.order_id, Orders.customer_id FROM Orders ORDER BY Orders.date_order_placed DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the order id and customer id associated with the oldest order.",
        "index": 1584,
        "GT": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "DB": "tracking_orders",
        "tables": [
            "orders"
        ]
    },
    {
        "SQL": "SELECT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = \"Packing\"",
        "hyp_correct": false,
        "NL_query": "Which customers have orders with status \"Packing\"? Give me the customer names.",
        "index": 1586,
        "GT": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Customers.customer_details FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = \"on Road\"",
        "hyp_correct": false,
        "NL_query": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "index": 1587,
        "GT": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Customers.customer_details FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = \"on Road\"",
        "hyp_correct": false,
        "NL_query": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
        "index": 1588,
        "GT": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT * FROM Customers",
        "hyp_correct": false,
        "NL_query": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "index": 1593,
        "GT": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT * FROM Customers",
        "hyp_correct": false,
        "NL_query": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "index": 1594,
        "GT": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Order_Items.product_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id WHERE Orders.date_order_placed IS NULL AND Orders.date_order_placed = \"1975-01-01-01-01\"",
        "hyp_correct": false,
        "NL_query": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "index": 1595,
        "GT": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "order_items",
            "orders"
        ]
    },
    {
        "SQL": "SELECT * FROM Customers",
        "hyp_correct": false,
        "NL_query": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "index": 1596,
        "GT": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "order_items",
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT Orders.date_order_placed FROM Orders JOIN Invoices ON Orders.order_id = Invoices.invoice_number WHERE Invoices.invoice_number = 10",
        "hyp_correct": false,
        "NL_query": "What is the placement date of the order whose invoice number is 10?",
        "index": 1599,
        "GT": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "DB": "tracking_orders",
        "tables": [
            "shipments",
            "invoices",
            "orders"
        ]
    },
    {
        "SQL": "SELECT Orders.date_order_placed FROM Orders JOIN Invoices ON Orders.order_id = Invoices.invoice_number WHERE Invoices.invoice_number = 10",
        "hyp_correct": false,
        "NL_query": "On what day was the order with invoice number 10 placed?",
        "index": 1600,
        "GT": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "DB": "tracking_orders",
        "tables": [
            "shipments",
            "invoices",
            "orders"
        ]
    },
    {
        "SQL": "SELECT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Orders.customer_id HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "What are the names of the customers who have made two or less orders?",
        "index": 1608,
        "GT": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT AVG(singer.Age), MIN(singer.Age) FROM singer WHERE singer.Country = \"France\"",
        "hyp_correct": false,
        "NL_query": "What is the average, minimum, and maximum age of all singers from France?",
        "index": 1611,
        "GT": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Country = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What is the average, minimum, and maximum age for all French singers?",
        "index": 1612,
        "GT": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium",
        "hyp_correct": false,
        "NL_query": "What is the maximum capacity and the average of all stadiums ?",
        "index": 1619,
        "GT": "select max(capacity), average from stadium",
        "DB": "concert_singer",
        "tables": [
            "stadium"
        ]
    },
    {
        "SQL": "SELECT AVG(stadium.Average), MAX(stadium.Capacity) FROM stadium",
        "hyp_correct": false,
        "NL_query": "What is the average and maximum capacities for all stadiums ?",
        "index": 1620,
        "GT": "select avg(capacity) ,  max(capacity) from stadium",
        "DB": "concert_singer",
        "tables": [
            "stadium"
        ]
    },
    {
        "SQL": "SELECT concert.concert_Name, concert.Theme, COUNT(*) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Name",
        "hyp_correct": false,
        "NL_query": "What are the names , themes , and number of singers for every concert ?",
        "index": 1628,
        "GT": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "singer",
            "singer_in_concert"
        ]
    },
    {
        "SQL": "SELECT singer.Name, COUNT(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name",
        "hyp_correct": false,
        "NL_query": "List singer names and number of concerts for each singer.",
        "index": 1629,
        "GT": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "DB": "concert_singer",
        "tables": [
            "singer_in_concert",
            "singer"
        ]
    },
    {
        "SQL": "SELECT singer.Name, COUNT(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name",
        "hyp_correct": false,
        "NL_query": "What are the names of the singers and number of concerts for each person?",
        "index": 1630,
        "GT": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "DB": "concert_singer",
        "tables": [
            "singer_in_concert",
            "singer"
        ]
    },
    {
        "SQL": "SELECT singer.Name, singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Song_Name LIKE \"% Hey %\"",
        "hyp_correct": false,
        "NL_query": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "index": 1631,
        "GT": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "DB": "concert_singer",
        "tables": [
            "singer_in_concert",
            "singer"
        ]
    },
    {
        "SQL": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE \"% Hey %\"",
        "hyp_correct": false,
        "NL_query": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "index": 1632,
        "GT": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent",
        "hyp_correct": false,
        "NL_query": "For each continent, list its id, name, and how many countries it has?",
        "index": 1634,
        "GT": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "DB": "car_1",
        "tables": [
            "continents",
            "countries"
        ]
    },
    {
        "SQL": "SELECT car_makers.FullName, car_makers.Maker, COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker",
        "hyp_correct": false,
        "NL_query": "How many models does each car maker produce? List maker full name, id and the number.",
        "index": 1635,
        "GT": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker",
        "hyp_correct": false,
        "NL_query": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "index": 1637,
        "GT": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT car_makers.Id, car_makers.FullName, COUNT(*) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Id",
        "hyp_correct": false,
        "NL_query": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "index": 1638,
        "GT": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT cars_data.Accelerate FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Make = \"amc hornet sportabout (sw\"",
        "hyp_correct": false,
        "NL_query": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "index": 1639,
        "GT": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT cars_data.Accelerate FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Accelerate WHERE car_names.Make = \"amc hornet sportaboutout\" AND car_names.Make = \"sw\"",
        "hyp_correct": false,
        "NL_query": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "index": 1640,
        "GT": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = \"France\"",
        "hyp_correct": false,
        "NL_query": "What is the number of makers of care in France?",
        "index": 1642,
        "GT": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 8",
        "hyp_correct": false,
        "NL_query": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "index": 1643,
        "GT": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 1974 AND cars_data.Year = 8",
        "hyp_correct": false,
        "NL_query": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "index": 1644,
        "GT": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "hyp_correct": false,
        "NL_query": "What are all the makers and models?",
        "index": 1645,
        "GT": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "hyp_correct": false,
        "NL_query": "What are the makers and models?",
        "index": 1646,
        "GT": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country",
        "hyp_correct": false,
        "NL_query": "What are the countries having at least one car maker? List name and id.",
        "index": 1647,
        "GT": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of all countries with at least one car maker?",
        "index": 1648,
        "GT": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT AVG(cars_data.Edispl) FROM model_list JOIN cars_data ON cars_data.Id = model_list.Maker WHERE model_list.Model = \"volvo\"",
        "hyp_correct": false,
        "NL_query": "What is the average edispl of the cars of model volvo?",
        "index": 1651,
        "GT": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT AVG(cars_data.Edispl) FROM cars_data",
        "hyp_correct": false,
        "NL_query": "What is the average edispl for all volvos?",
        "index": 1652,
        "GT": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Accelerate",
        "hyp_correct": false,
        "NL_query": "What is the maximum accelerate for different number of cylinders?",
        "index": 1653,
        "GT": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT car_makers.FullName, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3",
        "hyp_correct": false,
        "NL_query": "Which makers designed more than 3 car models? List full name and the id.",
        "index": 1657,
        "GT": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of all makers with more than 3 models?",
        "index": 1658,
        "GT": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT COUNT(car_makers.Country) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING COUNT(*) > 2",
        "hyp_correct": false,
        "NL_query": "How many countries has more than 2 car makers ?",
        "index": 1661,
        "GT": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT COUNT(car_makers.Country) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING COUNT(*) > 2",
        "hyp_correct": false,
        "NL_query": "What is the number of countries with more than 2 car makers ?",
        "index": 1662,
        "GT": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 OR cars_data.Year < 1980",
        "hyp_correct": false,
        "NL_query": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "index": 1663,
        "GT": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT employee.City FROM employee WHERE employee.Age > 30 GROUP BY employee.City HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "Which cities do more than one employee under age 30 come from?",
        "index": 1667,
        "GT": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "DB": "employee_hire_evaluation",
        "tables": [
            "employee"
        ]
    },
    {
        "SQL": "SELECT employee.City FROM employee WHERE employee.Age > 30 GROUP BY employee.City HAVING COUNT(*) > 1",
        "hyp_correct": false,
        "NL_query": "Find the cities that have more than one employee under age 30.",
        "index": 1668,
        "GT": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "DB": "employee_hire_evaluation",
        "tables": [
            "employee"
        ]
    },
    {
        "SQL": "SELECT shop.Name, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID",
        "hyp_correct": false,
        "NL_query": "Find the number of employees hired in each shop; show the shop name as well.",
        "index": 1677,
        "GT": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "DB": "employee_hire_evaluation",
        "tables": [
            "shop",
            "hiring"
        ]
    },
    {
        "SQL": "SELECT shop.Name, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID",
        "hyp_correct": false,
        "NL_query": "For each shop, return the number of employees working there and the name of the shop.",
        "index": 1678,
        "GT": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "DB": "employee_hire_evaluation",
        "tables": [
            "shop",
            "hiring"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(TV_Channel.Content) FROM TV_Channel",
        "hyp_correct": false,
        "NL_query": "List the number of different series names and contents in the TV Channel table.",
        "index": 1683,
        "GT": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(TV_Channel.Content) FROM TV_Channel",
        "hyp_correct": false,
        "NL_query": "How many different series and contents are listed in the TV Channel table?",
        "index": 1684,
        "GT": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle !\"",
        "hyp_correct": false,
        "NL_query": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "index": 1687,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"",
        "hyp_correct": false,
        "NL_query": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "index": 1688,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.id = Cartoon.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"",
        "hyp_correct": false,
        "NL_query": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "index": 1689,
        "GT": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel",
            "tv_series"
        ]
    },
    {
        "SQL": "SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"",
        "hyp_correct": false,
        "NL_query": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "index": 1690,
        "GT": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_series",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT MIN(TV_series.Share), MAX(TV_series.Share) FROM TV_series",
        "hyp_correct": false,
        "NL_query": "What is minimum and maximum share of TV series?",
        "index": 1693,
        "GT": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "SELECT TV_series.Channel FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"",
        "hyp_correct": false,
        "NL_query": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "index": 1695,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_series",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_series.Episode FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"",
        "hyp_correct": false,
        "NL_query": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "index": 1696,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_series",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"t\"",
        "hyp_correct": false,
        "NL_query": "Find the package choice and series name of the TV channel that has high definition TV.",
        "index": 1703,
        "GT": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "DB": "tvshow",
        "tables": [
            "tv_series",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = \"high definition TV\"",
        "hyp_correct": false,
        "NL_query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "index": 1704,
        "GT": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT DISTINCT department.Creation FROM management JOIN head ON management.department_ID = head.head_ID JOIN department ON management.department_ID = department.Department_ID WHERE head.born_state = \"Alabama\"",
        "hyp_correct": false,
        "NL_query": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "index": 1709,
        "GT": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "DB": "department_management",
        "tables": [
            "department",
            "management",
            "head"
        ]
    },
    {
        "SQL": "SELECT Catalogs.catalog_name FROM Catalogs JOIN Catalog_Contents ON Catalogs.catalog_id = Catalog_Contents.catalog_level_number ORDER BY Catalog_Contents.price_in_dollars LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the level name of the catalog with the lowest price (in USD).",
        "index": 1714,
        "GT": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "DB": "product_catalog",
        "tables": [
            "catalog_structure",
            "catalog_contents",
            "catalogs"
        ]
    },
    {
        "SQL": "SELECT Track.Name, Album.AlbumId FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId WHERE Track.UnitPrice > 1",
        "hyp_correct": false,
        "NL_query": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "index": 1715,
        "GT": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "SELECT Album.Title, Album.AlbumId FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId WHERE Track.UnitPrice > 1",
        "hyp_correct": false,
        "NL_query": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "index": 1716,
        "GT": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "SELECT Customer.LastName FROM Customer EXCEPT SELECT Customer.LastName FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Customer.LastName HAVING SUM(Invoice.Total) > 20",
        "hyp_correct": false,
        "NL_query": "Find all the customer last names that do not have invoice totals larger than 20.",
        "index": 1717,
        "GT": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "invoice"
        ]
    },
    {
        "SQL": "SELECT Artist.Name, Album.ArtistId FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId GROUP BY Album.ArtistId HAVING COUNT(*) >= 3 ORDER BY Album.ArtistId",
        "hyp_correct": false,
        "NL_query": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "index": 1721,
        "GT": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "SELECT Artist.Name, Artist.ArtistId FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId GROUP BY Album.ArtistId HAVING COUNT(*) >= 3",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "index": 1722,
        "GT": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "SELECT Artist.Name FROM Artist WHERE Artist.ArtistId NOT IN (SELECT Album.ArtistId FROM Album)",
        "hyp_correct": false,
        "NL_query": "Find the names of artists that do not have any albums.",
        "index": 1723,
        "GT": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "SELECT Artist.Name FROM Artist WHERE Artist.ArtistId NOT IN (SELECT Album.ArtistId FROM Album)",
        "hyp_correct": false,
        "NL_query": "What are the names of artists who have not released any albums?",
        "index": 1724,
        "GT": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "SELECT enzyme.name FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id JOIN medicine ON medicine_enzyme_interaction.medicine_id = medicine.id WHERE medicine.name = \"Amisulpride\" AND medicine_enzyme_interaction.medicine_id = \"inhibitor\"",
        "hyp_correct": false,
        "NL_query": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "index": 1725,
        "GT": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "enzyme",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine.id, medicine.name, medicine.FDA_approved FROM medicine JOIN medicine_enzyme_interaction ON medicine.id = medicine_enzyme_interaction.enzyme_id GROUP BY medicine.id ORDER BY COUNT(*) DESC",
        "hyp_correct": false,
        "NL_query": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "index": 1727,
        "GT": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine.id, medicine.name, medicine.FDA_approved FROM medicine JOIN medicine_enzyme_interaction ON medicine.id = medicine_enzyme_interaction.medicine_id ORDER BY medicine.FDA_approved DESC",
        "hyp_correct": false,
        "NL_query": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "index": 1728,
        "GT": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine_enzyme_interaction.interaction_type FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id JOIN medicine ON medicine_enzyme_interaction.medicine_id = medicine.id WHERE enzyme.name = \"ALA synthprazole\" AND medicine.name = \"Aripiprazole\"",
        "hyp_correct": false,
        "NL_query": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "index": 1729,
        "GT": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "enzyme",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine_enzyme_interaction.interaction_type FROM medicine_enzyme_interaction JOIN enzyme ON medicine_enzyme_interaction.enzyme_id = enzyme.id WHERE enzyme.name = \"ALA synthpiprazole\"",
        "hyp_correct": false,
        "NL_query": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "index": 1730,
        "GT": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "enzyme",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine_enzyme_interaction.interaction_type, COUNT(*) FROM medicine_enzyme_interaction WHERE medicine_enzyme_interaction.interaction_type = (SELECT medicine_enzyme_interaction.medicine_id FROM medicine_enzyme_interaction GROUP BY medicine_enzyme_interaction.interaction_type ORDER BY COUNT(*) DESC LIMIT 1) ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "index": 1731,
        "GT": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "SELECT * FROM medicine",
        "hyp_correct": false,
        "NL_query": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "index": 1732,
        "GT": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT university.Founded FROM university WHERE university.Founded = (SELECT MAX(university.Founded) FROM university)",
        "hyp_correct": false,
        "NL_query": "Find the founded year of the newest non public school.",
        "index": 1733,
        "GT": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.School FROM university ORDER BY university.Founded DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the founded year of the non public school that was founded most recently?",
        "index": 1734,
        "GT": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT basketball_match.Team_Name, basketball_match.School_ID FROM basketball_match ORDER BY basketball_match.ACC_Regular_Season DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "index": 1737,
        "GT": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "basketball_match",
            "university"
        ]
    },
    {
        "SQL": "SELECT basketball_match.Team_Name, basketball_match.ACC_Regular_Season FROM basketball_match JOIN basketball_match ON basketball_match.School_ID = basketball_match.Team_ID ORDER BY basketball_match.ACC_Regular_Season LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "index": 1738,
        "GT": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "basketball_match",
            "university"
        ]
    },
    {
        "SQL": "SELECT Player.id FROM Player WHERE Player.height BETWEEN 180 AND 85",
        "hyp_correct": false,
        "NL_query": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "index": 1739,
        "GT": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "DB": "soccer_1",
        "tables": [
            "player_attributes",
            "player"
        ]
    },
    {
        "SQL": "SELECT Player_Attributes.player_fifa_api_id FROM Player_Attributes ORDER BY Player_Attributes.overall_rating DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "Who are the top 3 players in terms of overall rating?",
        "index": 1740,
        "GT": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "DB": "soccer_1",
        "tables": [
            "player_attributes",
            "player"
        ]
    },
    {
        "SQL": "SELECT Player.player_name, Player.birthday FROM Player GROUP BY Player.player_name ORDER BY COUNT(*) DESC LIMIT 5",
        "hyp_correct": false,
        "NL_query": "List the names and birthdays of the top five players in terms of potential.",
        "index": 1741,
        "GT": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "DB": "soccer_1",
        "tables": [
            "player_attributes",
            "player"
        ]
    },
    {
        "SQL": "SELECT member.Name, performance.Location FROM member JOIN member_attendance ON member.Member_ID = member_attendance.Member_ID JOIN performance ON member_attendance.Performance_ID = performance.Performance_ID ORDER BY performance.Attendance",
        "hyp_correct": false,
        "NL_query": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.",
        "index": 1744,
        "GT": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
        "DB": "performance_attendance",
        "tables": [
            "member_attendance",
            "member",
            "performance"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), debate_people.Negative FROM debate_people JOIN debate ON debate_people.Debate_ID = debate.Debate_ID WHERE debate_people.Negative = debate.Venue ORDER BY debate_people.Negative",
        "hyp_correct": false,
        "NL_query": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
        "index": 1749,
        "GT": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",
        "DB": "debate",
        "tables": [
            "debate",
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "SELECT people.Name FROM debate_people JOIN people ON debate_people.Affirmative = people.People_ID WHERE debate_people.Affirmative > 200",
        "hyp_correct": false,
        "NL_query": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "index": 1750,
        "GT": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "DB": "debate",
        "tables": [
            "debate",
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "SELECT Customers.Customer_ID FROM Customers EXCEPT SELECT Policies.Customer_ID FROM Policies",
        "hyp_correct": false,
        "NL_query": "Find the names of customers who have no policies associated.",
        "index": 1754,
        "GT": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers",
            "policies"
        ]
    },
    {
        "SQL": "SELECT Customers.Customer_ID FROM Customers EXCEPT SELECT Policies.Customer_ID FROM Policies",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who do not have any policies?",
        "index": 1755,
        "GT": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers",
            "policies"
        ]
    },
    {
        "SQL": "SELECT Customers.Customer_ID FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID WHERE Policies.Policy_Type_Code = \"deputy\" OR Policies.Policy_Type_Code = \"uniformed\"",
        "hyp_correct": false,
        "NL_query": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "index": 1756,
        "GT": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers",
            "policies"
        ]
    },
    {
        "SQL": "SELECT Products.product_name FROM Products WHERE Products.product_id NOT IN (SELECT Order_Items.product_id FROM Order_Items)",
        "hyp_correct": false,
        "NL_query": "What are the names of products that have never been ordered?",
        "index": 1767,
        "GT": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "products"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT Products.product_name), Orders.customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Products.product_id",
        "hyp_correct": false,
        "NL_query": "Show all product names and the number of customers having an order on each product.",
        "index": 1768,
        "GT": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "products",
            "orders"
        ]
    },
    {
        "SQL": "SELECT Products.product_name, COUNT(DISTINCT Orders.customer_id) FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Products.product_id",
        "hyp_correct": false,
        "NL_query": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "index": 1769,
        "GT": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "products",
            "orders"
        ]
    },
    {
        "SQL": "SELECT CHECKING.balance FROM CHECKING JOIN ACCOUNTS ON CHECKING.custid = ACCOUNTS.custid WHERE ACCOUNTS.name LIKE \"% ee %\"",
        "hyp_correct": false,
        "NL_query": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "index": 1772,
        "GT": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT CHECKING.balance FROM ACCOUNTS JOIN CHECKING ON CHECKING.custid = ACCOUNTS.custid WHERE ACCOUNTS.name LIKE \"% ee %\"",
        "hyp_correct": false,
        "NL_query": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.",
        "index": 1773,
        "GT": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT CHECKING.balance FROM CHECKING JOIN ACCOUNTS ON CHECKING.custid = ACCOUNTS.custid WHERE ACCOUNTS.name = \"Brown\"",
        "hyp_correct": false,
        "NL_query": "What are the checking and savings balances in accounts belonging to Brown?",
        "index": 1775,
        "GT": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT ACCOUNTS.name, SAVINGS.balance FROM ACCOUNTS JOIN SAVINGS ON ACCOUNTS.custid = SAVINGS.custid ORDER BY SAVINGS.balance DESC",
        "hyp_correct": false,
        "NL_query": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "index": 1776,
        "GT": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT * FROM ACCOUNTS",
        "hyp_correct": false,
        "NL_query": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "index": 1777,
        "GT": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT ACCOUNTS.name FROM ACCOUNTS JOIN SAVINGS ON ACCOUNTS.custid = SAVINGS.balance WHERE SAVINGS.balance > (SELECT MIN(CHECKING.balance) FROM CHECKING)",
        "hyp_correct": false,
        "NL_query": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "index": 1778,
        "GT": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT * FROM ACCOUNTS",
        "hyp_correct": false,
        "NL_query": "What are the names of customers with a higher checking balance than savings balance?",
        "index": 1779,
        "GT": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT ACCOUNTS.name, SUM(SAVINGS.balance) FROM ACCOUNTS JOIN SAVINGS ON ACCOUNTS.custid = SAVINGS.balance GROUP BY ACCOUNTS.custid",
        "hyp_correct": false,
        "NL_query": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "index": 1780,
        "GT": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT * FROM ACCOUNTS",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "index": 1781,
        "GT": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT ACCOUNTS.name, SAVINGS.balance FROM SAVINGS JOIN ACCOUNTS ON SAVINGS.balance = ACCOUNTS.custid ORDER BY SAVINGS.balance DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "index": 1782,
        "GT": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT ACCOUNTS.name, SAVINGS.balance FROM SAVINGS JOIN ACCOUNTS ON SAVINGS.balance = ACCOUNTS.custid ORDER BY SAVINGS.balance DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "What are names and savings balances of the three accounts with the highest savings balances?",
        "index": 1783,
        "GT": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT endowment.donator_name FROM endowment WHERE endowment.amount < 9",
        "hyp_correct": false,
        "NL_query": "Show the names of all the donors except those whose donation amount less than 9.",
        "index": 1786,
        "GT": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "DB": "school_finance",
        "tables": [
            "endowment"
        ]
    },
    {
        "SQL": "SELECT building.Name, building.Height_feet FROM building JOIN Institution ON building.building_id = Institution.building_id WHERE building.Years_as_tallest > 1880 GROUP BY building.Name HAVING COUNT(*) >= 2",
        "hyp_correct": false,
        "NL_query": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "index": 1791,
        "GT": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
        "DB": "protein_institute",
        "tables": [
            "building",
            "institution"
        ]
    },
    {
        "SQL": "SELECT COUNT(DISTINCT protein.protein_name) FROM protein JOIN building ON protein.Institution_id = building.building_id WHERE building.Floors >= 20",
        "hyp_correct": false,
        "NL_query": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "index": 1793,
        "GT": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "DB": "protein_institute",
        "tables": [
            "protein",
            "building",
            "institution"
        ]
    },
    {
        "SQL": "SELECT MAX(Payments.amount_paid_in_full_yn), MAX(Payments.amount_paid) FROM Payments",
        "hyp_correct": false,
        "NL_query": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "index": 1794,
        "GT": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "DB": "products_for_hire",
        "tables": [
            "payments"
        ]
    },
    {
        "SQL": "SELECT Bookings.booking_start_date FROM Bookings JOIN Products_Booked ON Bookings.booking_id = Products_Booked.booking_id JOIN Products_for_Hire ON Products_Booked.product_id = Products_for_Hire.product_id WHERE Products_for_Hire.product_name = \"Book collection A\"",
        "hyp_correct": false,
        "NL_query": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "index": 1795,
        "GT": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
        "DB": "products_for_hire",
        "tables": [
            "products_booked",
            "bookings",
            "products_for_hire"
        ]
    },
    {
        "SQL": "SELECT pilot.Pilot_name, aircraft.Fleet_Series FROM pilot JOIN aircraft ON pilot.Pilot_ID = aircraft.Aircraft_ID ORDER BY pilot.Rank",
        "hyp_correct": false,
        "NL_query": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "index": 1798,
        "GT": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank",
        "DB": "pilot_record",
        "tables": [
            "pilot_record",
            "pilot",
            "aircraft"
        ]
    },
    {
        "SQL": "SELECT aircraft.Fleet_Series FROM aircraft JOIN pilot ON aircraft.Aircraft_ID = pilot.Pilot_ID WHERE pilot.Age < 34",
        "hyp_correct": false,
        "NL_query": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "index": 1799,
        "GT": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34",
        "DB": "pilot_record",
        "tables": [
            "pilot_record",
            "pilot",
            "aircraft"
        ]
    },
    {
        "SQL": "SELECT Draft_Copies.document_id, COUNT(*) FROM Draft_Copies GROUP BY Draft_Copies.document_id ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which document has the most draft copies? List its document id and number of draft copies.",
        "index": 1801,
        "GT": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "draft_copies"
        ]
    },
    {
        "SQL": "SELECT Employees.employee_name FROM Employees WHERE Employees.employee_id NOT IN (SELECT Circulation_History.employee_id FROM Circulation_History)",
        "hyp_correct": false,
        "NL_query": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "index": 1802,
        "GT": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "circulation_history",
            "employees"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Participants JOIN Participants_in_Events ON Participants.Participant_ID = Participants_in_Events.Participant_ID WHERE Participants.Participant_Details LIKE \"% Dr %\"",
        "hyp_correct": false,
        "NL_query": "How many events had participants whose details had the substring 'Dr.'",
        "index": 1803,
        "GT": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "DB": "local_govt_in_alabama",
        "tables": [
            "participants",
            "participants_in_events"
        ]
    },
    {
        "SQL": "SELECT Events.Event_ID FROM Events WHERE Events.Event_ID NOT IN (SELECT Participants.Participant_ID FROM Participants WHERE Participants.Participant_Details = \"Kenyatta Kuhn\")",
        "hyp_correct": false,
        "NL_query": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "index": 1806,
        "GT": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "DB": "local_govt_in_alabama",
        "tables": [
            "participants",
            "participants_in_events",
            "events"
        ]
    },
    {
        "SQL": "SELECT perpetrator.Country FROM perpetrator GROUP BY perpetrator.Country ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the country that has the most perpetrators?",
        "index": 1821,
        "GT": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "DB": "perpetrator",
        "tables": [
            "perpetrator"
        ]
    },
    {
        "SQL": "SELECT party.Comptroller FROM party JOIN election ON party.Party_ID = election.Party WHERE election.Delegate = 1 OR election.Delegate = 2",
        "hyp_correct": false,
        "NL_query": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "index": 1835,
        "GT": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "SELECT party.Party FROM party JOIN election ON party.Party_ID = election.Party WHERE election.Delegate = \"1 VALUE\" OR party.Comptroller = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "index": 1836,
        "GT": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "SELECT journalist.Name, event.Name FROM news_report JOIN event ON news_report.journalist_ID = event.Event_ID JOIN journalist ON news_report.Event_ID = journalist.journalist_ID ORDER BY event.Name",
        "hyp_correct": false,
        "NL_query": "Show the names of journalists and the names of the events they reported in ascending order",
        "index": 1845,
        "GT": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
        "DB": "news_report",
        "tables": [
            "journalist",
            "news_report",
            "event"
        ]
    },
    {
        "SQL": "SELECT DISTINCT customer.cust_name FROM customer JOIN loan ON customer.cust_ID = loan.cust_ID ORDER BY loan.amount",
        "hyp_correct": false,
        "NL_query": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "index": 1849,
        "GT": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "SELECT DISTINCT customer.cust_name FROM customer JOIN loan ON customer.cust_ID = loan.cust_ID ORDER BY loan.amount",
        "hyp_correct": false,
        "NL_query": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "index": 1850,
        "GT": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer WHERE customer.acc_type = \"checking\"",
        "hyp_correct": false,
        "NL_query": "Find the name of customers who have both saving and checking account types.",
        "index": 1851,
        "GT": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer INTERSECT SELECT customer.cust_name FROM customer WHERE customer.acc_type = \"checking\"",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who have both savings and checking accounts?",
        "index": 1852,
        "GT": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer WHERE customer.cust_ID NOT IN (SELECT customer.cust_name FROM customer)",
        "hyp_correct": false,
        "NL_query": "Find the name of customers who do not have an saving account.",
        "index": 1853,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer WHERE customer.cust_ID NOT IN (SELECT customer.cust_name FROM customer)",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who do not have saving accounts?",
        "index": 1854,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer WHERE customer.cust_ID NOT IN (SELECT loan.cust_ID FROM loan)",
        "hyp_correct": false,
        "NL_query": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "index": 1855,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer WHERE customer.cust_ID NOT IN (SELECT loan.cust_ID FROM loan)",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who have not taken a Mortage loan?",
        "index": 1856,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "SELECT customer.state FROM customer GROUP BY customer.state ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the state which has the most number of customers.",
        "index": 1859,
        "GT": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "DB": "loan_1",
        "tables": [
            "bank",
            "customer"
        ]
    },
    {
        "SQL": "SELECT DISTINCT bank.branch_ID FROM bank JOIN loan ON bank.branch_ID = loan.branch_ID JOIN customer ON loan.cust_ID = customer.cust_ID WHERE customer.credit_score < 100",
        "hyp_correct": false,
        "NL_query": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "index": 1861,
        "GT": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank",
            "loan"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer WHERE customer.credit_score < 100",
        "hyp_correct": false,
        "NL_query": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "index": 1862,
        "GT": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "DB": "loan_1",
        "tables": [
            "bank",
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "SELECT Assets.asset_model FROM Assets EXCEPT SELECT Assets.asset_model FROM Assets JOIN Fault_Log ON Assets.asset_id = Fault_Log.asset_id",
        "hyp_correct": false,
        "NL_query": "Which assets did not incur any fault log? List the asset model.",
        "index": 1867,
        "GT": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
        "DB": "assets_maintenance",
        "tables": [
            "assets",
            "fault_log"
        ]
    },
    {
        "SQL": "SELECT * FROM train",
        "hyp_correct": false,
        "NL_query": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "index": 1868,
        "GT": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"",
        "DB": "station_weather",
        "tables": [
            "route",
            "train",
            "station"
        ]
    },
    {
        "SQL": "SELECT player.Position FROM player WHERE player.Points > 20 AND 20 INTERSECT SELECT player.Position FROM player WHERE player.Points < 10",
        "hyp_correct": false,
        "NL_query": "What are the positions of both players that have more than 20 20 points and less than 10 points?",
        "index": 1874,
        "GT": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT competition.Country FROM competition WHERE competition.Competition_type = \"friendly\" INTERSECT SELECT competition.Country FROM competition WHERE competition.Competition_type = \"tournament\"",
        "hyp_correct": false,
        "NL_query": "What are the countries that participated in both friendly and tournament type competitions?",
        "index": 1878,
        "GT": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "SELECT competition.Country FROM competition WHERE competition.Competition_type != \"Friendly\"",
        "hyp_correct": false,
        "NL_query": "Find the countries that have never participated in any competition with Friendly type.",
        "index": 1879,
        "GT": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "SELECT competition.Country FROM competition WHERE competition.Competition_type != \"friendly\"",
        "hyp_correct": false,
        "NL_query": "What are the countries that have never participated in any friendly-type competitions?",
        "index": 1880,
        "GT": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name ORDER BY song.artist_name LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the artist who produced the shortest song?",
        "index": 1881,
        "GT": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "DB": "music_1",
        "tables": [
            "artist",
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name ORDER BY song.artist_name LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the names of the artists who sang the shortest song?",
        "index": 1882,
        "GT": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "DB": "music_1",
        "tables": [
            "artist",
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, song.country FROM artist JOIN song ON artist.artist_name = song.artist_name ORDER BY song.rating DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "index": 1883,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, song.country FROM artist JOIN song ON artist.artist_name = song.artist_name ORDER BY song.rating DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "index": 1884,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.country = \"UK\" AND song.languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "Find the names of the artists who are from UK and have produced English songs.",
        "index": 1887,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM artist JOIN song ON artist.artist_name = song.f_id WHERE artist.country = \"English\" AND song.languages = \"UK\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the artists that are from the UK and sang songs in English?",
        "index": 1888,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.f_id FROM song WHERE song.resolution < 1000 AND song.resolution < 1000",
        "hyp_correct": false,
        "NL_query": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "index": 1889,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT files.file_size FROM files WHERE files.formats = \"mp4\" EXCEPT SELECT files.file_size FROM files WHERE files.formats < 1000",
        "hyp_correct": false,
        "NL_query": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "index": 1890,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT DISTINCT song.song_name FROM song WHERE song.resolution > (SELECT MIN(song.resolution) FROM song WHERE song.languages = \"English\")",
        "hyp_correct": false,
        "NL_query": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "index": 1893,
        "GT": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT DISTINCT song.song_name FROM song WHERE song.resolution > (SELECT MIN(song.resolution) FROM song WHERE song.languages = \"English\")",
        "hyp_correct": false,
        "NL_query": "What are the different names for all songs that have a higher resolution than English songs?",
        "index": 1894,
        "GT": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.rating < (SELECT MIN(song.rating) FROM genre JOIN song ON genre.g_name = song.f_id WHERE genre.g_name = \"blues\")",
        "hyp_correct": false,
        "NL_query": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "index": 1895,
        "GT": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, song.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country LIKE \"% love %\"",
        "hyp_correct": false,
        "NL_query": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "index": 1897,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, song.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.artist_name LIKE \"% love %\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "index": 1898,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, artist.gender FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.releasedate = \"March\"",
        "hyp_correct": false,
        "NL_query": "List the name and gender for all artists who released songs in March.",
        "index": 1899,
        "GT": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, artist.gender FROM artist JOIN song ON artist.artist_name = song.f_id WHERE song.releasedate = \"March\"",
        "hyp_correct": false,
        "NL_query": "What are the names and genders of all artists who released songs in the month of March?",
        "index": 1900,
        "GT": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.f_id FROM song WHERE song.resolution > 720 OR song.resolution > 720",
        "hyp_correct": false,
        "NL_query": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "index": 1901,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT song.f_id FROM song WHERE song.resolution > 720 OR song.resolution > 720",
        "hyp_correct": false,
        "NL_query": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "index": 1902,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.country = \"UK\" AND song.languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "Return the names of singers who are from UK and released an English song.",
        "index": 1905,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.country = \"UK\" AND song.languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all singers that are from the UK and released a song in English?",
        "index": 1906,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT MAX(song.resolution), MIN(song.resolution) FROM song WHERE song.resolution = 3",
        "hyp_correct": false,
        "NL_query": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "index": 1907,
        "GT": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT MAX(song.resolution), MIN(song.resolution) FROM song WHERE song.resolution = 3",
        "hyp_correct": false,
        "NL_query": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
        "index": 1908,
        "GT": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT MAX(song.resolution) FROM song ORDER BY song.resolution",
        "hyp_correct": false,
        "NL_query": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "index": 1909,
        "GT": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT MAX(song.resolution), song.languages FROM song GROUP BY song.languages",
        "hyp_correct": false,
        "NL_query": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?",
        "index": 1910,
        "GT": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "SELECT MIN(song.rating), song.genre_is FROM genre JOIN song ON genre.g_name = song.genre_is GROUP BY song.genre_is",
        "hyp_correct": false,
        "NL_query": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "index": 1911,
        "GT": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "DB": "music_1",
        "tables": [
            "song",
            "files",
            "genre"
        ]
    },
    {
        "SQL": "SELECT song.genre_is, MIN(song.rating) FROM genre JOIN song ON genre.g_name = song.genre_is GROUP BY song.genre_is",
        "hyp_correct": false,
        "NL_query": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?",
        "index": 1912,
        "GT": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "DB": "music_1",
        "tables": [
            "song",
            "files",
            "genre"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, COUNT(DISTINCT song.languages) FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages = \"English\" GROUP BY song.artist_name",
        "hyp_correct": false,
        "NL_query": "Find the names and number of works of all artists who have at least one English songs.",
        "index": 1913,
        "GT": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, COUNT(*) FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages = \"English\" GROUP BY song.artist_name",
        "hyp_correct": false,
        "NL_query": "What are the names and number of works for all artists who have sung at least one song in English?",
        "index": 1914,
        "GT": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name, song.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.resolution > 900",
        "hyp_correct": false,
        "NL_query": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "index": 1915,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name, song.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.resolution > 900",
        "hyp_correct": false,
        "NL_query": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
        "index": 1916,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "artist",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.rating < (SELECT MIN(song.rating) FROM song WHERE song.languages = \"English\")",
        "hyp_correct": false,
        "NL_query": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "index": 1917,
        "GT": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.rating < (SELECT MIN(song.rating) FROM song WHERE song.languages = \"English\")",
        "hyp_correct": false,
        "NL_query": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "index": 1918,
        "GT": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.f_id FROM song WHERE song.rating > 8",
        "hyp_correct": false,
        "NL_query": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
        "index": 1920,
        "GT": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT AVG(song.f_id) FROM genre JOIN song ON genre.g_name = song.genre_is WHERE song.genre_is = \"modern\"",
        "hyp_correct": false,
        "NL_query": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
        "index": 1921,
        "GT": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "SELECT AVG(song.f_id) FROM genre JOIN song ON genre.g_name = song.genre_is WHERE song.genre_is = \"modern\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
        "index": 1922,
        "GT": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM song WHERE song.rating > 8 AND song.country != \"English\"",
        "hyp_correct": false,
        "NL_query": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "index": 1925,
        "GT": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT DISTINCT song.artist_name FROM song WHERE song.rating > 8",
        "hyp_correct": false,
        "NL_query": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "index": 1926,
        "GT": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT Physician.Name FROM Physician WHERE Physician.EmployeeID NOT IN (SELECT Appointment.Physician FROM Appointment)",
        "hyp_correct": false,
        "NL_query": "Which physicians have never taken any appointment? Find their names.",
        "index": 1929,
        "GT": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "appointment"
        ]
    },
    {
        "SQL": "SELECT Physician.Name, Affiliated_With.PrimaryAffiliation FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician JOIN Department ON Affiliated_With.Department = Department.DepartmentID",
        "hyp_correct": false,
        "NL_query": "Find the names of all physicians and their primary affiliated departments' names.",
        "index": 1930,
        "GT": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "department",
            "affiliated_with"
        ]
    },
    {
        "SQL": "SELECT Physician.Name, Affiliated_With.PrimaryAffiliation FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Department JOIN Department ON Affiliated_With.Department = Department.DepartmentID",
        "hyp_correct": false,
        "NL_query": "What are the name and primarily affiliated department name of each physician?",
        "index": 1931,
        "GT": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "department",
            "affiliated_with"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician WHERE Physician.Name = \"John Dorian\"",
        "hyp_correct": false,
        "NL_query": "How many patients' prescriptions are made by physician John Dorian?",
        "index": 1934,
        "GT": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "prescribes",
            "patient"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician WHERE Physician.Name = \"John Dorian\"",
        "hyp_correct": false,
        "NL_query": "Find the number of patients' prescriptions physician John Dorian made.",
        "index": 1935,
        "GT": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "prescribes",
            "patient"
        ]
    },
    {
        "SQL": "SELECT Physician.Name FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Name = \"Thesisin\"",
        "hyp_correct": false,
        "NL_query": "List the names of all the physicians who prescribe Thesisin as medication.",
        "index": 1939,
        "GT": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "prescribes",
            "medication"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Patient.Name FROM Patient JOIN Undergoes ON Patient.SSN = Undergoes.Patient WHERE Undergoes.AssistingNurse = 111",
        "hyp_correct": false,
        "NL_query": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "index": 1942,
        "GT": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "undergoes",
            "stay"
        ]
    },
    {
        "SQL": "SELECT Nurse.Name FROM Nurse JOIN Prescribes ON Nurse.EmployeeID = Prescribes.Physician ORDER BY Prescribes.Dose DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the names of the physician who prescribed the highest dose?",
        "index": 1944,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "prescribes",
            "nurse"
        ]
    },
    {
        "SQL": "SELECT Patient.Name FROM Patient JOIN Prescribes ON Patient.SSN = Prescribes.Patient ORDER BY Prescribes.Dose DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the physician who prescribed the highest dose. What is his or her name?",
        "index": 1945,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "prescribes",
            "physician"
        ]
    },
    {
        "SQL": "SELECT Trained_In.Physician FROM Trained_In JOIN Procedures ON Trained_In.Physician = Procedures.Code WHERE Procedures.Cost > 5000",
        "hyp_correct": false,
        "NL_query": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "index": 1946,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT Trained_In.Physician FROM Trained_In JOIN Procedures ON Trained_In.Physician = Procedures.Code WHERE Procedures.Cost > 5000",
        "hyp_correct": false,
        "NL_query": "Which physicians are trained in procedures that are more expensive than 5000?",
        "index": 1947,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT * FROM Physician",
        "hyp_correct": false,
        "NL_query": "What is the average cost of procedures that physician John Wen was trained in?",
        "index": 1948,
        "GT": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT AVG(Procedures.Cost) FROM Physician JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician JOIN Procedures ON Trained_In.Physician = Procedures.Code WHERE Physician.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "Compute the mean price of procedures physician John Wen was trained in.",
        "index": 1949,
        "GT": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Procedures.Name FROM Trained_In JOIN Physician ON Trained_In.Physician = Physician.EmployeeID JOIN Procedures ON Procedures.Code = Physician.SSN WHERE Physician.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "Find the names of procedures which physician John Wen was trained in.",
        "index": 1950,
        "GT": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Procedures.Name FROM Physician JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician JOIN Procedures ON Trained_In.Physician = Procedures.Code WHERE Physician.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "What are the names of procedures physician John Wen was trained in?",
        "index": 1951,
        "GT": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT Procedures.Name FROM Procedures JOIN Trained_In ON Procedures.Code = Trained_In.Treatment JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Physician.Name = \"John Wen\" OR Procedures.Cost > 1000",
        "hyp_correct": false,
        "NL_query": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "index": 1952,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost > 1000 OR Procedures.Cost > 1000",
        "hyp_correct": false,
        "NL_query": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
        "index": 1953,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost > 1000 AND Procedures.Cost > 1000",
        "hyp_correct": false,
        "NL_query": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "index": 1954,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost < 5000 AND Procedures.Cost = 5000",
        "hyp_correct": false,
        "NL_query": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
        "index": 1956,
        "GT": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT Procedures.Name FROM Procedures JOIN Trained_In ON Procedures.Code = Trained_In.Treatment JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Physician.Name = \"John Wen\" AND Procedures.Cost < 5000",
        "hyp_correct": false,
        "NL_query": "What procedures cost less than 5000 and have John Wen as a trained physician?",
        "index": 1957,
        "GT": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "procedures",
            "trained_in"
        ]
    },
    {
        "SQL": "SELECT Patient.Name FROM Patient WHERE Patient.SSN NOT IN (SELECT Prescribes.Patient FROM Prescribes JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Name = \"Procrastin-X\")",
        "hyp_correct": false,
        "NL_query": "What are the names of patients who are not taking the medication of Procrastin-X.",
        "index": 1959,
        "GT": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "prescribes",
            "medication"
        ]
    },
    {
        "SQL": "SELECT company.Headquarters FROM company WHERE company.Industry = \"banking\" INTERSECT SELECT company.Headquarters FROM company WHERE company.Industry = \"oil and gas\"",
        "hyp_correct": false,
        "NL_query": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "index": 1967,
        "GT": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "SELECT company.Name, employment.People_ID FROM employment JOIN company ON employment.Company_ID = company.Company_ID ORDER BY employment.Year_working DESC",
        "hyp_correct": false,
        "NL_query": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "index": 1968,
        "GT": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "DB": "company_employee",
        "tables": [
            "people",
            "employment",
            "company"
        ]
    },
    {
        "SQL": "SELECT company.Name FROM employment JOIN company ON employment.Company_ID = company.Company_ID WHERE company.Sales_in_Billion > 200",
        "hyp_correct": false,
        "NL_query": "Show the names of employees that work for companies with sales bigger than 200.",
        "index": 1969,
        "GT": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "DB": "company_employee",
        "tables": [
            "people",
            "employment",
            "company"
        ]
    },
    {
        "SQL": "SELECT company.Name, COUNT(*) FROM employment JOIN company ON employment.Company_ID = company.Company_ID GROUP BY employment.Company_ID",
        "hyp_correct": false,
        "NL_query": "Show the names of companies and the number of employees they have",
        "index": 1970,
        "GT": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "DB": "company_employee",
        "tables": [
            "people",
            "employment",
            "company"
        ]
    },
    {
        "SQL": "SELECT film.Studio FROM film WHERE film.Director = \"Nicholas Meyer\" AND film.Director = \"Walter Hill\"",
        "hyp_correct": false,
        "NL_query": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "index": 1978,
        "GT": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "SELECT Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.ClubID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Bootup Baltimore\"",
        "hyp_correct": false,
        "NL_query": "Find the last names of the members of the club \"Bootup Baltimore\".",
        "index": 1984,
        "GT": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Club.ClubName FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Bootup Baltimore\"",
        "hyp_correct": false,
        "NL_query": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
        "index": 1985,
        "GT": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.ClubID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Hopkins Student Enterprises\"",
        "hyp_correct": false,
        "NL_query": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
        "index": 1986,
        "GT": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.ClubID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Hopkins Student Enterprises\"",
        "hyp_correct": false,
        "NL_query": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".",
        "index": 1987,
        "GT": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Tennis club\"",
        "hyp_correct": false,
        "NL_query": "How many members does the club \"Tennis Club\" has?",
        "index": 1988,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Tennis club\"",
        "hyp_correct": false,
        "NL_query": "Count the members of the club \"Tennis Club\".",
        "index": 1989,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName FROM Member_of_club JOIN Student ON Member_of_club.ClubID = Student.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Sex = \"Bootup Baltimore\" AND Club.ClubName = \"female\"",
        "hyp_correct": false,
        "NL_query": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "index": 1996,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Sex = \"Bootup Baltimore\" AND Club.ClubName = \"VALUE VALUE female\"",
        "hyp_correct": false,
        "NL_query": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".",
        "index": 1997,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Club.ClubName = \"Bootup Baltimore\"",
        "hyp_correct": false,
        "NL_query": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "index": 2002,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Club.ClubName FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Bootup Baltimore\"",
        "hyp_correct": false,
        "NL_query": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.",
        "index": 2003,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Club.ClubName = \"Hopkins Student Enterprises\" AND Student.LName = \"CTO\"",
        "hyp_correct": false,
        "NL_query": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "index": 2004,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName FROM Club JOIN Student ON Club.ClubID = Student.StuID WHERE Club.ClubName = \"Hopkins Student Enterprises\" AND Club.ClubName = \"CTO\"",
        "hyp_correct": false,
        "NL_query": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?",
        "index": 2005,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Bootup Baltimore\" AND Club.ClubName > 18",
        "hyp_correct": false,
        "NL_query": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.",
        "index": 2007,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Bootup Baltimore\" AND Club.ClubName < 18",
        "hyp_correct": false,
        "NL_query": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.",
        "index": 2009,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Club.ClubID = Member_of_club.ClubID WHERE Student.Fname = \"Eric\" AND Student.LName = \"Tai\"",
        "hyp_correct": false,
        "NL_query": "How many clubs does the student named \"Eric Tai\" belong to?",
        "index": 2014,
        "GT": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Fname = \"Eric\" AND Student.LName = \"Tai\"",
        "hyp_correct": false,
        "NL_query": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
        "index": 2015,
        "GT": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Club.ClubID = Student.Advisor WHERE Student.Advisor = 1121",
        "hyp_correct": false,
        "NL_query": "Which clubs have one or more members whose advisor is \"1121\"?",
        "index": 2019,
        "GT": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT AVG(Student.Age) FROM Member_of_club JOIN Student ON Member_of_club.StuID = Student.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Tennis club\"",
        "hyp_correct": false,
        "NL_query": "Retrieve the average age of members of the club \"Tennis Club\".",
        "index": 2024,
        "GT": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT AVG(Student.Age) FROM Member_of_club JOIN Student ON Member_of_club.StuID = Student.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = \"Tennis club\"",
        "hyp_correct": false,
        "NL_query": "Compute the average age of the members in the club \"Tennis Club\".",
        "index": 2025,
        "GT": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT SUM(Grants.grant_amount) FROM Grants JOIN Organisations ON Grants.organisation_id = Organisations.organisation_id WHERE Organisations.organisation_details = \"research\"",
        "hyp_correct": false,
        "NL_query": "What is the total grant amount of the organisations described as research?",
        "index": 2026,
        "GT": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisations",
            "organisation_types",
            "grants"
        ]
    },
    {
        "SQL": "SELECT SUM(Grants.grant_amount) FROM Grants",
        "hyp_correct": false,
        "NL_query": "What is the total amount of grant money for research?",
        "index": 2027,
        "GT": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisations",
            "organisation_types",
            "grants"
        ]
    },
    {
        "SQL": "SELECT Projects.project_details FROM Projects WHERE Projects.project_id NOT IN (SELECT Project_Staff.project_id FROM Project_Staff)",
        "hyp_correct": false,
        "NL_query": "List the project details of the projects which did not hire any staff for a researcher role.",
        "index": 2028,
        "GT": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "projects"
        ]
    },
    {
        "SQL": "SELECT Projects.project_details FROM Projects WHERE Projects.project_id NOT IN (SELECT Project_Staff.project_id FROM Project_Staff)",
        "hyp_correct": false,
        "NL_query": "What are the details for all projects that did not hire any staff in a research role?",
        "index": 2029,
        "GT": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "projects"
        ]
    },
    {
        "SQL": "SELECT Project_Staff.project_id, COUNT(*) FROM Project_Staff GROUP BY Project_Staff.project_id ORDER BY Project_Staff.project_id",
        "hyp_correct": false,
        "NL_query": "How many staff does each project has? List the project id and the number in an ascending order.",
        "index": 2030,
        "GT": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "projects"
        ]
    },
    {
        "SQL": "SELECT Project_Staff.project_id, COUNT(*) FROM Project_Staff GROUP BY Project_Staff.project_id ORDER BY Project_Staff.project_id",
        "hyp_correct": false,
        "NL_query": "For each project id, how many staff does it have? List them in increasing order.",
        "index": 2031,
        "GT": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "projects"
        ]
    },
    {
        "SQL": "SELECT Documents.grant_id, COUNT(*) FROM Documents GROUP BY Documents.grant_id",
        "hyp_correct": false,
        "NL_query": "How many documents can one grant have at most? List the grant id and number.",
        "index": 2034,
        "GT": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "SELECT Organisations.organisation_details FROM Organisations WHERE Organisations.organisation_details = \"Sponsor %\" ORDER BY Organisations.organisation_details ASC",
        "hyp_correct": false,
        "NL_query": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "index": 2036,
        "GT": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisations",
            "organisation_types"
        ]
    },
    {
        "SQL": "SELECT Organisations.organisation_details FROM Organisations JOIN Project_Outcomes ON Organisations.organisation_id = Project_Outcomes.outcome_code ORDER BY Project_Outcomes.outcome_details ASC",
        "hyp_correct": false,
        "NL_query": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
        "index": 2037,
        "GT": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisations",
            "organisation_types",
            "project_outcomes"
        ]
    },
    {
        "SQL": "SELECT Project_Outcomes.outcome_details FROM Projects JOIN Project_Outcomes ON Projects.project_id = Project_Outcomes.project_id WHERE Projects.project_details = \"sint\"",
        "hyp_correct": false,
        "NL_query": "What are the result description of the project whose detail is 'sint'?",
        "index": 2038,
        "GT": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "research_outcomes",
            "project_outcomes",
            "projects"
        ]
    },
    {
        "SQL": "SELECT Research_Outcomes.outcome_description FROM Research_Outcomes JOIN Project_Outcomes ON Research_Outcomes.outcome_code = Project_Outcomes.project_id JOIN Projects ON Project_Outcomes.project_id = Projects.project_id WHERE Projects.project_details = \"sint\"",
        "hyp_correct": false,
        "NL_query": "What is the description for the results whose project detail is 'sint'?",
        "index": 2039,
        "GT": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "research_outcomes",
            "project_outcomes",
            "projects"
        ]
    },
    {
        "SQL": "SELECT Projects.project_details FROM Organisations JOIN Projects ON Organisations.organisation_id = Projects.organisation_id",
        "hyp_correct": false,
        "NL_query": "List the project details of the projects launched by the organisation",
        "index": 2040,
        "GT": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisations",
            "projects"
        ]
    },
    {
        "SQL": "SELECT Projects.project_details FROM Projects GROUP BY Projects.organisation_id ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the details for the projects which were launched by the organization with the most projects?",
        "index": 2041,
        "GT": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Person WHERE Person.age > (SELECT MAX(Person.age) FROM Person WHERE Person.job = \"VALUE\")",
        "hyp_correct": false,
        "NL_query": "Find the number of people whose age is greater than all engineers.",
        "index": 2046,
        "GT": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Person WHERE Person.age > (SELECT MIN(Person.age) FROM Person)",
        "hyp_correct": false,
        "NL_query": "How many people are older than every engineer?",
        "index": 2047,
        "GT": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT Person.name, Person.age FROM PersonFriend JOIN Person ON Person.name = PersonFriend.name WHERE PersonFriend.friend = \"Dan\" OR PersonFriend.friend = \"Alice\"",
        "hyp_correct": false,
        "NL_query": "Find the name and age of the person who is a friend of Dan or Alice.",
        "index": 2048,
        "GT": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT DISTINCT PersonFriend.name, Person.age FROM PersonFriend JOIN Person ON Person.name = PersonFriend.friend WHERE PersonFriend.friend = \"Dan\" OR PersonFriend.friend = \"alice\"",
        "hyp_correct": false,
        "NL_query": "What are the different names and ages of every friend of either Dan or alice?",
        "index": 2049,
        "GT": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT Person.name FROM Person EXCEPT SELECT PersonFriend.name FROM PersonFriend",
        "hyp_correct": false,
        "NL_query": "Find the name of the person who has no student friends.",
        "index": 2050,
        "GT": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT Person.name FROM Person WHERE Person.name NOT IN (SELECT PersonFriend.name FROM PersonFriend)",
        "hyp_correct": false,
        "NL_query": "What are the names of the people who have no friends who are students?",
        "index": 2051,
        "GT": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT Department.DName FROM Department WHERE Department.DNO NOT IN (SELECT Minor_in.DNO FROM Minor_in)",
        "hyp_correct": false,
        "NL_query": "Find the name of the department that has no students minored in?",
        "index": 2057,
        "GT": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "DB": "college_3",
        "tables": [
            "department",
            "minor_in"
        ]
    },
    {
        "SQL": "SELECT Department.DName FROM Department WHERE Department.DNO NOT IN (SELECT Minor_in.DNO FROM Minor_in)",
        "hyp_correct": false,
        "NL_query": "What is the name of the department htat has no students minoring in it?",
        "index": 2058,
        "GT": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "DB": "college_3",
        "tables": [
            "department",
            "minor_in"
        ]
    },
    {
        "SQL": "SELECT Faculty.Rank FROM Faculty GROUP BY Faculty.Rank ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the rank of the faculty that the fewest faculties belong to.",
        "index": 2059,
        "GT": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT Faculty.Lname FROM Faculty JOIN Member_of ON Faculty.FacID = Member_of.FacID JOIN Department ON Member_of.DNO = Department.DNO WHERE Department.DName = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "Find the last names of faculties who are members of computer science department.",
        "index": 2063,
        "GT": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "DB": "college_3",
        "tables": [
            "member_of",
            "department",
            "faculty"
        ]
    },
    {
        "SQL": "SELECT Faculty.Lname FROM Faculty JOIN Member_of ON Faculty.FacID = Member_of.FacID JOIN Department ON Member_of.DNO = Department.DNO WHERE Department.DName = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What are the last names of faculty who are part of the computer science department?",
        "index": 2064,
        "GT": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "DB": "college_3",
        "tables": [
            "member_of",
            "department",
            "faculty"
        ]
    },
    {
        "SQL": "SELECT AVG(Gradeconversion.gradepoint) FROM Student JOIN Gradeconversion ON Student.StuID = Gradeconversion.lettergrade WHERE Student.LName = \"Smith\"",
        "hyp_correct": false,
        "NL_query": "Find the average grade point of student whose last name is Smith.",
        "index": 2065,
        "GT": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "DB": "college_3",
        "tables": [
            "student",
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "SELECT * FROM Student",
        "hyp_correct": false,
        "NL_query": "What is the average gradepoint for students with the last name Smith?",
        "index": 2066,
        "GT": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "DB": "college_3",
        "tables": [
            "student",
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "SELECT \"max\", MIN(Student.Age) FROM Student WHERE Student.city_code = \"NYC\"",
        "hyp_correct": false,
        "NL_query": "What is the maximum and minimum grade point of students who live in NYC?",
        "index": 2067,
        "GT": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "DB": "college_3",
        "tables": [
            "student",
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "SELECT MAX(DISTINCT (\"minimum\" - Student.city_code)) FROM Student WHERE Student.city_code = \"NYC\"",
        "hyp_correct": false,
        "NL_query": "Give the maximum and minimum gradepoints for students living in NYC?",
        "index": 2068,
        "GT": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "DB": "college_3",
        "tables": [
            "student",
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "SELECT Course.CName FROM Course WHERE Course.Hours = 3 OR Course.Hours = 4",
        "hyp_correct": false,
        "NL_query": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "index": 2069,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "SELECT Course.CName FROM Course WHERE Course.CID = 3 OR Course.Credits = 4",
        "hyp_correct": false,
        "NL_query": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "index": 2070,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "SELECT Department.DName FROM Department WHERE Department.Division = \"division VALUE\" OR Department.Building = \"NEB\"",
        "hyp_correct": false,
        "NL_query": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "index": 2071,
        "GT": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "SELECT Department.DName FROM Department WHERE Department.Division = as OR Department.Building = \"NEB\"",
        "hyp_correct": false,
        "NL_query": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "index": 2072,
        "GT": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "SELECT airport.Airport_Name FROM airport JOIN airport_aircraft ON airport_aircraft.Airport_ID = airport.Airport_ID WHERE airport.Total_Passengers > (SELECT SUM(airport.Total_Passengers) FROM airport WHERE airport.Airport_ID = airport.International_Passengers) AND 10000000",
        "hyp_correct": false,
        "NL_query": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "index": 2077,
        "GT": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
        "DB": "aircraft",
        "tables": [
            "airport_aircraft",
            "aircraft",
            "airport"
        ]
    },
    {
        "SQL": "SELECT AVG(airport.Total_Passengers) FROM airport JOIN airport_aircraft ON airport.Airport_ID = airport_aircraft.Aircraft_ID JOIN aircraft ON aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID WHERE aircraft.Aircraft = \"Robinson R-22\"",
        "hyp_correct": false,
        "NL_query": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
        "index": 2079,
        "GT": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
        "DB": "aircraft",
        "tables": [
            "airport_aircraft",
            "aircraft",
            "airport"
        ]
    },
    {
        "SQL": "SELECT pilot.Name FROM pilot WHERE pilot.Pilot_Id NOT IN (SELECT match.Winning_Aircraft FROM match)",
        "hyp_correct": false,
        "NL_query": "What are the names of all aicrafts that have never won any match?",
        "index": 2082,
        "GT": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
        "DB": "aircraft",
        "tables": [
            "pilot",
            "aircraft",
            "match"
        ]
    },
    {
        "SQL": "SELECT College.state FROM College JOIN Player ON College.cName = Player.pID WHERE Player.pName = \"Charles\"",
        "hyp_correct": false,
        "NL_query": "Find the state of the college which player Charles is attending.",
        "index": 2089,
        "GT": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college",
            "player"
        ]
    },
    {
        "SQL": "SELECT College.state FROM College WHERE College.cName = \"Charles\"",
        "hyp_correct": false,
        "NL_query": "In which state is the college that Charles attends?",
        "index": 2090,
        "GT": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college",
            "player"
        ]
    },
    {
        "SQL": "SELECT MAX(Player.HS), \"What\" FROM Player WHERE Player.HS > 1000 GROUP BY \"maximum\"",
        "hyp_correct": false,
        "NL_query": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
        "index": 2091,
        "GT": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT MAX(Player.HS), 1000 FROM Player WHERE Player.HS > 1000 GROUP BY \"maximum\"",
        "hyp_correct": false,
        "NL_query": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
        "index": 2092,
        "GT": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Tryout JOIN Player ON Tryout.cName = Player.pID WHERE Player.pName LIKE \"% D %\"",
        "hyp_correct": false,
        "NL_query": "Which colleges do the tryout players whose name starts with letter D go to?",
        "index": 2093,
        "GT": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Player.pName LIKE \"% D %\"",
        "hyp_correct": false,
        "NL_query": "Which colleges does each player with a name that starts with the letter D  who tried out go to?",
        "index": 2094,
        "GT": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "player"
        ]
    },
    {
        "SQL": "SELECT DISTINCT College.cName FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos = \"goalie\" OR Tryout.pPos = \"mid\"",
        "hyp_correct": false,
        "NL_query": "Find the names of schools that have some students playing in goalie and mid positions.",
        "index": 2095,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT DISTINCT College.cName FROM Tryout JOIN College ON Tryout.cName = College.cName WHERE Tryout.pPos = \"goal\" OR Tryout.pPos = \"mid\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
        "index": 2096,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT College.cName FROM College WHERE College.cName NOT IN (SELECT Tryout.cName FROM Tryout WHERE Tryout.pPos = \"mid\" AND \"goalie\")",
        "hyp_correct": false,
        "NL_query": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "index": 2097,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "SELECT Tryout.cName FROM Tryout WHERE Tryout.pPos = \"mid\" EXCEPT SELECT Tryout.cName FROM Tryout WHERE Tryout.pPos = \"mid\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the schools with some players in the mid position but no goalies?",
        "index": 2098,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT College.state FROM College WHERE College.enr < (SELECT MIN(College.enr) FROM College)",
        "hyp_correct": false,
        "NL_query": "What are the states with colleges that have enrollments less than the some other college?",
        "index": 2100,
        "GT": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT College.cName FROM College WHERE College.enr > (SELECT MIN(College.enr) FROM College WHERE College.state = \"Florida\")",
        "hyp_correct": false,
        "NL_query": "What are the names of the colleges that are larger than at least one college in Florida?",
        "index": 2102,
        "GT": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT College.cName FROM College WHERE College.enr > (SELECT MAX(College.enr) FROM College WHERE College.state = \"Florida\")",
        "hyp_correct": false,
        "NL_query": "What are the names of all colleges with a larger enrollment than the largest college in Florida?",
        "index": 2104,
        "GT": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT shop.Location FROM shop WHERE shop.Open_Date > 2012 INTERSECT SELECT shop.Location FROM shop WHERE shop.Open_Date < 2008",
        "hyp_correct": false,
        "NL_query": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "index": 2113,
        "GT": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "DB": "device",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "SELECT shop.Location FROM shop WHERE shop.Open_Date > 2012 INTERSECT SELECT shop.Location FROM shop WHERE shop.Open_Date < 2008",
        "hyp_correct": false,
        "NL_query": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
        "index": 2114,
        "GT": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "DB": "device",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM member WHERE member.Level > (SELECT AVG(member.Level) FROM member)",
        "hyp_correct": false,
        "NL_query": "How many branches where have more than average number of memberships are there?",
        "index": 2119,
        "GT": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "member"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM branch JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID WHERE branch.membership_amount > 0",
        "hyp_correct": false,
        "NL_query": "What is the number of branches that have more than the average number of memberships?",
        "index": 2120,
        "GT": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "membership_register_branch"
        ]
    },
    {
        "SQL": "SELECT branch.Name, COUNT(*) FROM branch JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID WHERE membership_register_branch.Register_Year > 2015 GROUP BY branch.Name",
        "hyp_correct": false,
        "NL_query": "Show all branch names with the number of members in each branch registered after 2015.",
        "index": 2127,
        "GT": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "membership_register_branch"
        ]
    },
    {
        "SQL": "SELECT branch.Name FROM branch JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID WHERE branch.Open_year > 2015",
        "hyp_correct": false,
        "NL_query": "For each branch id, what are the names of the branches that were registered after 2015?",
        "index": 2128,
        "GT": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "membership_register_branch"
        ]
    },
    {
        "SQL": "SELECT Dorm.dorm_name, AVG(Student.Age) FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid GROUP BY Dorm.dormid",
        "hyp_correct": false,
        "NL_query": "Find the average age of students living in each dorm and the name of dorm.",
        "index": 2139,
        "GT": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT * FROM Student",
        "hyp_correct": false,
        "NL_query": "What is the average age for each dorm and what are the names of each dorm?",
        "index": 2140,
        "GT": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), Dorm.dormid FROM Dorm WHERE Dorm.student_capacity > 100 GROUP BY Dorm.dormid",
        "hyp_correct": false,
        "NL_query": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "index": 2141,
        "GT": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(*), Dorm.dormid FROM Dorm GROUP BY Dorm.dormid",
        "hyp_correct": false,
        "NL_query": "For each dorm, how many amenities does it have?",
        "index": 2142,
        "GT": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Dorm.dorm_name = \"Smith\"",
        "hyp_correct": false,
        "NL_query": "Find the first name of students who are living in the Smith Hall.",
        "index": 2143,
        "GT": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Student.Fname FROM Student WHERE Student.LName = \"Smith Hall\"",
        "hyp_correct": false,
        "NL_query": "What are the first names of all students in Smith Hall?",
        "index": 2144,
        "GT": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Student WHERE Student.Sex = \"M\"",
        "hyp_correct": false,
        "NL_query": "Find the total number of students living in the male dorm (with gender M).",
        "index": 2145,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Student.Sex = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What are the total number of students who are living in a male dorm?",
        "index": 2146,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Student WHERE Student.Sex = \"F\" AND Student.LName = \"Smith Hall\"",
        "hyp_correct": false,
        "NL_query": "Find the number of female students (with F sex) living in Smith Hall",
        "index": 2147,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Student WHERE Student.Sex = \"VALUE\" AND Student.LName = \"Smith Hall\"",
        "hyp_correct": false,
        "NL_query": "How many female students live in Smith Hall?",
        "index": 2148,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Dorm.dorm_name FROM Dorm WHERE Dorm.dormid = \"Smith Hall\"",
        "hyp_correct": false,
        "NL_query": "Find the name of amenities Smith Hall dorm have.",
        "index": 2149,
        "GT": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity",
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Dorm.dorm_name FROM Dorm JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid JOIN Dorm_amenity ON Dorm_amenity.amenid = Dorm.dormid WHERE Dorm.dorm_name = \"Smith Hall\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the amenities that Smith Hall has?",
        "index": 2150,
        "GT": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity",
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Dorm.dorm_name FROM Dorm EXCEPT SELECT Dorm.dorm_name FROM Dorm JOIN Dorm_amenity ON Dorm.dormid = Dorm_amenity.amenid WHERE Dorm_amenity.amenity_name = \"TV\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the dorm that does not have a TV Lounge?",
        "index": 2152,
        "GT": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity",
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT Customers.state FROM Customers GROUP BY Customers.state ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which state has the most customers?",
        "index": 2163,
        "GT": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT Customers.state FROM Customers GROUP BY Customers.state ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Give the state that has the most customers.",
        "index": 2164,
        "GT": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT Video_Games.GType FROM Video_Games GROUP BY Video_Games.GType ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the type with the fewest games?",
        "index": 2168,
        "GT": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "SELECT Student.StuID FROM Student EXCEPT SELECT Plays_Games.StuID FROM Plays_Games",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students who don't play sports?",
        "index": 2170,
        "GT": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT Student.StuID FROM Student WHERE Student.Major = 600",
        "hyp_correct": false,
        "NL_query": "Show student ids who are on scholarship and have major 600.",
        "index": 2171,
        "GT": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT Student.StuID FROM Student WHERE Student.Major = 600",
        "hyp_correct": false,
        "NL_query": "What are the student ids for those on scholarship in major number 600?",
        "index": 2172,
        "GT": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT Student.StuID FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID JOIN SportsInfo ON Plays_Games.GameID = SportsInfo.SportName WHERE Student.Sex = \"VALUE\" AND SportsInfo.SportName = \"football\"",
        "hyp_correct": false,
        "NL_query": "Show student ids who are female and play football.",
        "index": 2173,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Student.StuID FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID JOIN SportsInfo ON Plays_Games.GameID = SportsInfo.SportName WHERE Student.Sex = \"VALUE\" AND SportsInfo.SportName = \"football\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of all female students who play football?",
        "index": 2174,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT * FROM Student",
        "hyp_correct": false,
        "NL_query": "Show all male student ids who don't play football.",
        "index": 2175,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT * FROM Student",
        "hyp_correct": false,
        "NL_query": "What are the ids of all male students who do not play football?",
        "index": 2176,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT SUM(SportsInfo.HoursPerWeek), AVG(Student.LName) FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE Student.Fname = \"David\" AND Student.LName = \"Shieber\"",
        "hyp_correct": false,
        "NL_query": "Show total hours per week and number of games played for student David Shieber.",
        "index": 2177,
        "GT": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT SUM(Plays_Games.Hours_Played), AVG(Student.LName) FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID WHERE Student.Fname = \"David\" AND Student.LName = \"Shieber\"",
        "hyp_correct": false,
        "NL_query": "What is the total number of hours per work and number of games played by David Shieber?",
        "index": 2178,
        "GT": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT Plays_Games.StuID FROM Plays_Games WHERE Plays_Games.GameID = \"video\" INTERSECT SELECT Plays_Games.StuID FROM Plays_Games",
        "hyp_correct": false,
        "NL_query": "Show ids of students who play video game and play sports.",
        "index": 2181,
        "GT": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "plays_games",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT Plays_Games.StuID FROM Plays_Games WHERE Plays_Games.StuID = (SELECT MAX(Plays_Games.StuID) FROM Plays_Games)",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students who played video games and sports?",
        "index": 2182,
        "GT": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "plays_games",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT Student.LName, Student.Fname FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID JOIN SportsInfo ON Plays_Games.GameID = SportsInfo.StuID WHERE SportsInfo.SportName = \"Football\" OR SportsInfo.SportName = \"Lacrosse\"",
        "hyp_correct": false,
        "NL_query": "Find the last and first name of students who are playing Football or Lacrosse.",
        "index": 2185,
        "GT": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT Student.Fname, Student.LName FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID JOIN SportsInfo ON Plays_Games.GameID = SportsInfo.StuID WHERE SportsInfo.SportName = \"Football\" OR SportsInfo.SportName = \"Lacrosse\"",
        "hyp_correct": false,
        "NL_query": "What is the first and last name of all students who play Football or Lacrosse?",
        "index": 2186,
        "GT": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT Services.service_name FROM Services WHERE Services.service_id NOT IN (SELECT Services.service_name FROM Services)",
        "hyp_correct": false,
        "NL_query": "Find name of the services that has never been used.",
        "index": 2189,
        "GT": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "DB": "e_government",
        "tables": [
            "party_services",
            "services"
        ]
    },
    {
        "SQL": "SELECT Services.service_name FROM Services WHERE Services.service_id NOT IN (SELECT Services.service_name FROM Services)",
        "hyp_correct": false,
        "NL_query": "What are the names of the services that have never been used?",
        "index": 2190,
        "GT": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "DB": "e_government",
        "tables": [
            "party_services",
            "services"
        ]
    },
    {
        "SQL": "SELECT Addresses.town_city, Addresses.state_province_county FROM Addresses",
        "hyp_correct": false,
        "NL_query": "Find the name of all the cities and states.",
        "index": 2191,
        "GT": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "SELECT Addresses.town_city FROM Addresses WHERE Addresses.town_city = \"VALUE states\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all cities and states?",
        "index": 2192,
        "GT": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_ID NOT IN (SELECT Documents_with_Expenses.Document_ID FROM Documents_with_Expenses WHERE Documents_with_Expenses.Budget_Type_Code = \"CV\")",
        "hyp_correct": false,
        "NL_query": "Show ids for all documents in type CV without expense budgets.",
        "index": 2205,
        "GT": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "documents"
        ]
    },
    {
        "SQL": "SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_Type_Code != \"CV\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of documents with the type code CV that do not have expenses.",
        "index": 2206,
        "GT": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "documents"
        ]
    },
    {
        "SQL": "SELECT Documents_with_Expenses.Document_ID FROM Documents JOIN Documents_with_Expenses ON Documents.Document_ID = Documents_with_Expenses.Document_ID WHERE Documents.Document_Name LIKE \"% s %\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "index": 2207,
        "GT": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "documents"
        ]
    },
    {
        "SQL": "SELECT Documents_with_Expenses.Document_ID FROM Documents_with_Expenses WHERE Documents_with_Expenses.Document_ID LIKE \"% s %\"",
        "hyp_correct": false,
        "NL_query": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "index": 2208,
        "GT": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "documents"
        ]
    },
    {
        "SQL": "SELECT Accounts.Account_Details FROM Accounts WHERE Accounts.Account_Details LIKE \"% 5 %\"",
        "hyp_correct": false,
        "NL_query": "What are the account details with the largest value or with value having char '5' in it?",
        "index": 2209,
        "GT": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Accounts.Account_Details, \"the\" FROM Accounts WHERE Accounts.Account_Details LIKE MOD(\"5 order by count (*) desc limit %\", 5)",
        "hyp_correct": false,
        "NL_query": "Return the account details with the greatest value, as well as those that include the character 5.",
        "index": 2210,
        "GT": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "SELECT Lessons.lesson_id, Lessons.staff_id FROM Staff JOIN Lessons ON Staff.staff_id = Lessons.staff_id WHERE Staff.first_name = \"Janessa\" AND Staff.last_name = \"Sawayn\"",
        "hyp_correct": false,
        "NL_query": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "index": 2217,
        "GT": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "DB": "driving_school",
        "tables": [
            "staff",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT Staff.staff_id FROM Staff JOIN Lessons ON Staff.staff_id = Lessons.staff_id WHERE Staff.first_name = \"Janessa\" AND Staff.last_name LIKE \"s\"",
        "hyp_correct": false,
        "NL_query": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
        "index": 2218,
        "GT": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "DB": "driving_school",
        "tables": [
            "staff",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Staff JOIN Lessons ON Staff.staff_id = Lessons.staff_id WHERE Staff.first_name LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "index": 2219,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "DB": "driving_school",
        "tables": [
            "staff",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM Staff JOIN Lessons ON Staff.staff_id = Lessons.staff_id WHERE Staff.first_name LIKE \"% a %\"",
        "hyp_correct": false,
        "NL_query": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?",
        "index": 2220,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "DB": "driving_school",
        "tables": [
            "staff",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT Customers.last_name FROM Customers UNION SELECT Staff.last_name FROM Staff",
        "hyp_correct": false,
        "NL_query": "What are the last names that are used by customers and staff?",
        "index": 2222,
        "GT": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "DB": "driving_school",
        "tables": [
            "staff",
            "customers"
        ]
    },
    {
        "SQL": "SELECT Staff.first_name FROM Staff WHERE Staff.staff_id NOT IN (SELECT Lessons.staff_id FROM Lessons)",
        "hyp_correct": false,
        "NL_query": "What is the first name of the staff who did not give any lesson?",
        "index": 2223,
        "GT": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "DB": "driving_school",
        "tables": [
            "staff",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT Staff.first_name FROM Staff WHERE Staff.staff_id NOT IN (SELECT Lessons.staff_id FROM Lessons)",
        "hyp_correct": false,
        "NL_query": "What is the first name of all employees who do not give any lessons?",
        "index": 2224,
        "GT": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "DB": "driving_school",
        "tables": [
            "staff",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airports WHERE airports.country = \"United States\" ORDER BY COUNT(*) DESC",
        "hyp_correct": false,
        "NL_query": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "index": 2227,
        "GT": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airports WHERE airports.city = \"VALUE VALUE\"",
        "hyp_correct": false,
        "NL_query": "How many airports are there per city in the US ordered from most to least?",
        "index": 2228,
        "GT": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT routes.src_ap, COUNT(*) FROM routes JOIN airports ON routes.src_apid = airports.apid GROUP BY routes.src_ap ORDER BY COUNT(*) DESC",
        "hyp_correct": false,
        "NL_query": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",
        "index": 2229,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.name, COUNT(*) FROM routes JOIN airports ON routes.src_apid = airports.apid GROUP BY routes.src_apid ORDER BY COUNT(*) ASC",
        "hyp_correct": false,
        "NL_query": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "index": 2230,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airlines JOIN routes ON routes.dst_apid = airlines.alid WHERE airlines.name = \"American Airlines\" AND routes.airline = \"Italy\"",
        "hyp_correct": false,
        "NL_query": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "index": 2231,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM airlines JOIN routes ON routes.dst_apid = airlines.alid WHERE airlines.name = \"American Airlines\" AND routes.airline = \"Italy\"",
        "hyp_correct": false,
        "NL_query": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
        "index": 2232,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT Orders.order_id FROM Orders ORDER BY Orders.date_order_placed DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the id of the order which is shipped most recently.",
        "index": 2237,
        "GT": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)",
        "DB": "tracking_orders",
        "tables": [
            "shipments",
            "orders"
        ]
    },
    {
        "SQL": "SELECT singer.Country FROM singer WHERE singer.Age > 40 INTERSECT SELECT singer.Country FROM singer WHERE singer.Age > 30",
        "hyp_correct": false,
        "NL_query": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "index": 2245,
        "GT": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "SELECT * FROM stadium",
        "hyp_correct": false,
        "NL_query": "List all singer names in concerts in year 2014.",
        "index": 2248,
        "GT": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "DB": "concert_singer",
        "tables": [
            "singer_in_concert",
            "concert",
            "stadium",
            "singer"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the number of concerts happened in the stadium with the highest capacity .",
        "index": 2250,
        "GT": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "index": 2251,
        "GT": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "SELECT car_names.Model FROM car_names GROUP BY car_names.Model ORDER BY COUNT(*) ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which model of the car has the minimum horsepower?",
        "index": 2252,
        "GT": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT model_list.Model FROM model_list JOIN cars_data ON cars_data.Id = model_list.Maker ORDER BY cars_data.Horsepower ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the model of the car with the smallest amount of horsepower?",
        "index": 2253,
        "GT": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT DISTINCT car_names.Model FROM car_names WHERE car_names.Model > 1980",
        "hyp_correct": false,
        "NL_query": "Which distinct car models are the produced after 1980?",
        "index": 2254,
        "GT": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Model > 1980",
        "hyp_correct": false,
        "NL_query": "What are the different models for the cards produced after 1980?",
        "index": 2255,
        "GT": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT continents.Continent, COUNT(*) FROM continents JOIN car_makers ON continents.ContId = car_makers.Country GROUP BY continents.Continent",
        "hyp_correct": false,
        "NL_query": "How many car makers are there in each continents? List the continent name and the count.",
        "index": 2256,
        "GT": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "DB": "car_1",
        "tables": [
            "continents",
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT continents.Continent, COUNT(*) FROM continents JOIN car_makers ON continents.ContId = car_makers.Country GROUP BY continents.Continent",
        "hyp_correct": false,
        "NL_query": "What is the name of each continent and how many car makers are there in each one?",
        "index": 2257,
        "GT": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "DB": "car_1",
        "tables": [
            "continents",
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\"",
        "hyp_correct": false,
        "NL_query": "How many car models are produced in the usa?",
        "index": 2258,
        "GT": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM countries JOIN model_list ON countries.CountryId = model_list.Model WHERE countries.CountryName = \"VALUE\"",
        "hyp_correct": false,
        "NL_query": "What is the count of the car models produced in the United States?",
        "index": 2259,
        "GT": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = (SELECT MAX(cars_data.Horsepower) FROM cars_data)",
        "hyp_correct": false,
        "NL_query": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "index": 2260,
        "GT": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the car model with the highest mpg ?",
        "index": 2261,
        "GT": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT model_list.Model FROM model_list GROUP BY model_list.Model ORDER BY COUNT(*) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What model has the most different versions?",
        "index": 2263,
        "GT": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "index": 2264,
        "GT": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > (SELECT MAX(cars_data.Horsepower) FROM cars_data) ORDER BY SUM(cars_data.Horsepower) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "index": 2265,
        "GT": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers)",
        "hyp_correct": false,
        "NL_query": "What are the name of the countries where there is not a single car maker?",
        "index": 2266,
        "GT": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers)",
        "hyp_correct": false,
        "NL_query": "What are the names of the countries with no car makers?",
        "index": 2267,
        "GT": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "DB": "car_1",
        "tables": [
            "countries",
            "car_makers"
        ]
    },
    {
        "SQL": "SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY SUM(evaluation.Bonus) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the name of the employee who got the highest one time bonus.",
        "index": 2270,
        "GT": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "DB": "employee_hire_evaluation",
        "tables": [
            "employee",
            "evaluation"
        ]
    },
    {
        "SQL": "SELECT DISTINCT Cartoon.Title FROM Cartoon EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = \"Todd Casey\"",
        "hyp_correct": false,
        "NL_query": "What are the countries that are not playing cartoons written by Todd Casey?",
        "index": 2283,
        "GT": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT Cartoon.id FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "index": 2285,
        "GT": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = \"Ben Jones\"",
        "hyp_correct": false,
        "NL_query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "index": 2286,
        "GT": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = \"Ben Jones\"",
        "hyp_correct": false,
        "NL_query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "index": 2287,
        "GT": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    }
]