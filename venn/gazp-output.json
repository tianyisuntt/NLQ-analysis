[{
        "SQL": "select avg ( Num_Employees ) from department where between 10 and 15",
        "hyp_correct": false,
        "NL_query": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "index": 1,
        "GT": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "DB": "department_management",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "select name from head where born_state = 'California'",
        "hyp_correct": false,
        "NL_query": "What are the names of the heads who are born outside the California state?",
        "index": 2,
        "GT": "SELECT name FROM head WHERE born_state != 'California'",
        "DB": "department_management",
        "tables": [
            "head"
        ]
    },
    {
        "SQL": "select count ( temporary_acting ) from management",
        "hyp_correct": false,
        "NL_query": "How many acting statuses are there?",
        "index": 4,
        "GT": "SELECT count(DISTINCT temporary_acting) FROM management",
        "DB": "department_management",
        "tables": [
            "management"
        ]
    },
    {
        "SQL": "select catalog_name from Catalogs",
        "hyp_correct": false,
        "NL_query": "What are all the catalog entry names?",
        "index": 6,
        "GT": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "DB": "product_catalog",
        "tables": [
            "catalogs",
            "catalog_contents"
        ]
    },
    {
        "SQL": "select count ( date_of_latest_revision ) from Catalogs group by date_of_publication having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "Find the dates on which more than one revisions were made.",
        "index": 11,
        "GT": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "DB": "product_catalog",
        "tables": [
            "catalogs"
        ]
    },
    {
        "SQL": "select count ( date_of_latest_revision ) from Catalogs group by date_of_publication having count ( date_of_latest_revision ) > 1",
        "hyp_correct": false,
        "NL_query": "On which days more than one revisions were made on catalogs.",
        "index": 12,
        "GT": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "DB": "product_catalog",
        "tables": [
            "catalogs"
        ]
    },
    {
        "SQL": "select count ( catalog_name ) from Catalogs",
        "hyp_correct": false,
        "NL_query": "How many products are there in the records?",
        "index": 13,
        "GT": "SELECT count(*) FROM catalog_contents",
        "DB": "product_catalog",
        "tables": [
            "catalogs",
            "catalog_contents"
        ]
    },
    {
        "SQL": "select BillingCountry from Invoice",
        "hyp_correct": false,
        "NL_query": "What are the distinct billing countries of the invoices?",
        "index": 23,
        "GT": "SELECT distinct(BillingCountry) FROM INVOICE",
        "DB": "chinook_1",
        "tables": [
            "invoice"
        ]
    },
    {
        "SQL": "select BillingCountry from Invoice",
        "hyp_correct": false,
        "NL_query": "Find the different billing countries for all invoices.",
        "index": 24,
        "GT": "SELECT distinct(BillingCountry) FROM INVOICE",
        "DB": "chinook_1",
        "tables": [
            "invoice"
        ]
    },
    {
        "SQL": "select avg ( UnitPrice ) from InvoiceLine",
        "hyp_correct": false,
        "NL_query": "What is the average unit price of all the tracks?",
        "index": 25,
        "GT": "SELECT AVG(UnitPrice) FROM TRACK",
        "DB": "chinook_1",
        "tables": [
            "track",
            "invoiceline"
        ]
    },
    {
        "SQL": "select avg ( UnitPrice ) from InvoiceLine",
        "hyp_correct": false,
        "NL_query": "Find the average unit price for a track.",
        "index": 26,
        "GT": "SELECT AVG(UnitPrice) FROM TRACK",
        "DB": "chinook_1",
        "tables": [
            "track",
            "invoiceline"
        ]
    },
    {
        "SQL": "select count ( City ) from Employee",
        "hyp_correct": false,
        "NL_query": "How many distinct cities does the employees live in?",
        "index": 27,
        "GT": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "DB": "chinook_1",
        "tables": [
            "employee"
        ]
    },
    {
        "SQL": "select count ( City ) from Employee",
        "hyp_correct": false,
        "NL_query": "Find the number of different cities that employees live in.",
        "index": 28,
        "GT": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "DB": "chinook_1",
        "tables": [
            "employee"
        ]
    },
    {
        "SQL": "select UnitPrice from InvoiceLine",
        "hyp_correct": false,
        "NL_query": "What are the distinct unit prices of all tracks?",
        "index": 35,
        "GT": "SELECT distinct(UnitPrice) FROM TRACK",
        "DB": "chinook_1",
        "tables": [
            "track",
            "invoiceline"
        ]
    },
    {
        "SQL": "select UnitPrice from InvoiceLine",
        "hyp_correct": false,
        "NL_query": "Find the distinct unit prices for tracks.",
        "index": 36,
        "GT": "SELECT distinct(UnitPrice) FROM TRACK",
        "DB": "chinook_1",
        "tables": [
            "track",
            "invoiceline"
        ]
    },
    {
        "SQL": "select max ( OMIM ) from enzyme where Porphyria = \"mandelim\"",
        "hyp_correct": false,
        "NL_query": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "index": 41,
        "GT": "SELECT max(OMIM) FROM enzyme",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme"
        ]
    },
    {
        "SQL": "select name from enzyme except select name from enzyme where Porphyria = 'Heme'",
        "hyp_correct": false,
        "NL_query": "What are the names of enzymes who does not produce 'Heme'?",
        "index": 43,
        "GT": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme"
        ]
    },
    {
        "SQL": "select count ( * ) from medicine where FDA_approved != '",
        "hyp_correct": false,
        "NL_query": "How many medicines were not approved by the FDA?",
        "index": 46,
        "GT": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "select count ( FDA_approved ) from medicine",
        "hyp_correct": false,
        "NL_query": "How many distinct FDA approval statuses are there for the medicines?",
        "index": 47,
        "GT": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "select count ( FDA_approved ) from medicine",
        "hyp_correct": false,
        "NL_query": "How many different FDA approval statuses exist for medicines?",
        "index": 48,
        "GT": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "select count ( Affiliation ) from university",
        "hyp_correct": false,
        "NL_query": "Find how many different affiliation types there are.",
        "index": 53,
        "GT": "SELECT count(DISTINCT affiliation) FROM university",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select count ( Affiliation ) from university",
        "hyp_correct": false,
        "NL_query": "Count the number of different affiliation types.",
        "index": 54,
        "GT": "SELECT count(DISTINCT affiliation) FROM university",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select Venue from debate",
        "hyp_correct": false,
        "NL_query": "Show the distinct venues of debates",
        "index": 69,
        "GT": "SELECT DISTINCT Venue FROM debate",
        "DB": "debate",
        "tables": [
            "debate"
        ]
    },
    {
        "SQL": "select Customer_Details from Customers order by limit 1",
        "hyp_correct": false,
        "NL_query": "List the names of all the customers in alphabetical order.",
        "index": 70,
        "GT": "SELECT customer_details FROM customers ORDER BY customer_details",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select Customer_Details from Customers order by limit 1",
        "hyp_correct": false,
        "NL_query": "Sort the customer names in alphabetical order.",
        "index": 71,
        "GT": "SELECT customer_details FROM customers ORDER BY customer_details",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select count ( Claim_Stage_ID ) from Claims_Processing",
        "hyp_correct": false,
        "NL_query": "Find the number of distinct stages in claim processing.",
        "index": 75,
        "GT": "SELECT count(*) FROM claims_processing_stages",
        "DB": "insurance_and_eClaims",
        "tables": [
            "claims_processing_stages",
            "claims_processing"
        ]
    },
    {
        "SQL": "select count ( Claim_Outcome_Code ) from Claims_Processing",
        "hyp_correct": false,
        "NL_query": "How many distinct claim outcome codes are there?",
        "index": 78,
        "GT": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "DB": "insurance_and_eClaims",
        "tables": [
            "claims_processing"
        ]
    },
    {
        "SQL": "select count ( Claim_Outcome_Code ) from Claims_Processing",
        "hyp_correct": false,
        "NL_query": "Count the number of distinct claim outcome codes.",
        "index": 79,
        "GT": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "DB": "insurance_and_eClaims",
        "tables": [
            "claims_processing"
        ]
    },
    {
        "SQL": "select count ( customer_id ) from Accounts",
        "hyp_correct": false,
        "NL_query": "How many customers have opened an account?",
        "index": 82,
        "GT": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "DB": "customers_and_invoices",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "select count ( customer_id ) from Accounts",
        "hyp_correct": false,
        "NL_query": "Count the number of customers who have an account.",
        "index": 83,
        "GT": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "DB": "customers_and_invoices",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "select product_size from Products",
        "hyp_correct": false,
        "NL_query": "Show all product sizes.",
        "index": 88,
        "GT": "SELECT DISTINCT product_size FROM Products",
        "DB": "customers_and_invoices",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "select product_size from Products",
        "hyp_correct": false,
        "NL_query": "What are the different product sizes?",
        "index": 89,
        "GT": "SELECT DISTINCT product_size FROM Products",
        "DB": "customers_and_invoices",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "select product_color from Products",
        "hyp_correct": false,
        "NL_query": "Show all product colors.",
        "index": 90,
        "GT": "SELECT DISTINCT product_color FROM Products",
        "DB": "customers_and_invoices",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "select product_color from Products",
        "hyp_correct": false,
        "NL_query": "What are the different product colors?",
        "index": 91,
        "GT": "SELECT DISTINCT product_color FROM Products",
        "DB": "customers_and_invoices",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "select count ( * ) from budget where Invested < ( select total_budget_percent_invested from budget where Budget_invested_percent < 1 )",
        "hyp_correct": false,
        "NL_query": "How many budget record has a budget amount smaller than the invested amount?",
        "index": 106,
        "GT": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "DB": "school_finance",
        "tables": [
            "budget"
        ]
    },
    {
        "SQL": "select count ( School_id ) from endowment where amount < 8.5 group by amount having count ( amount ) > 1",
        "hyp_correct": false,
        "NL_query": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "index": 107,
        "GT": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "DB": "school_finance",
        "tables": [
            "endowment"
        ]
    },
    {
        "SQL": "select Type from Institution",
        "hyp_correct": false,
        "NL_query": "Show all the distinct institution types.",
        "index": 109,
        "GT": "SELECT DISTINCT TYPE FROM institution",
        "DB": "protein_institute",
        "tables": [
            "institution"
        ]
    },
    {
        "SQL": "select count ( product_type_code ) from Products_for_Hire",
        "hyp_correct": false,
        "NL_query": "How many different product types are there?",
        "index": 111,
        "GT": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
        "DB": "products_for_hire",
        "tables": [
            "products_for_hire"
        ]
    },
    {
        "SQL": "select payment_type_code from Payments",
        "hyp_correct": false,
        "NL_query": "What are all the distinct payment types?",
        "index": 113,
        "GT": "SELECT DISTINCT payment_type_code FROM payments",
        "DB": "products_for_hire",
        "tables": [
            "payments"
        ]
    },
    {
        "SQL": "select Position from pilot where Age > 30",
        "hyp_correct": false,
        "NL_query": "List the distinct positions of pilots older than 30.",
        "index": 116,
        "GT": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30",
        "DB": "pilot_record",
        "tables": [
            "pilot"
        ]
    },
    {
        "SQL": "select document_type_code from Documents",
        "hyp_correct": false,
        "NL_query": "What document type codes do we have?",
        "index": 119,
        "GT": "SELECT document_type_code FROM Ref_Document_Types;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "ref_document_types",
            "documents"
        ]
    },
    {
        "SQL": "select shipping_agent_code from Ref_Shipping_Agents where shipping_agent_name = \"shipping\"",
        "hyp_correct": false,
        "NL_query": "What is the shipping agent code of shipping agent UPS?",
        "index": 122,
        "GT": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "ref_shipping_agents"
        ]
    },
    {
        "SQL": "select role_code from Employees",
        "hyp_correct": false,
        "NL_query": "What are all role codes?",
        "index": 123,
        "GT": "SELECT role_code FROM ROLES;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "roles"
        ]
    },
    {
        "SQL": "select count ( * ) from Documents where document_status_code = 1",
        "hyp_correct": false,
        "NL_query": "How many documents have the status code done?",
        "index": 126,
        "GT": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "select document_type_code from Documents where document_status_code = 2",
        "hyp_correct": false,
        "NL_query": "List the document type code for the document with the id 2.",
        "index": 127,
        "GT": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "select T1.mailing_date from Documents_Mailed as T1 join Documents as T2 on T1.document_id = T2.document_id where T2.document_type_code = 7",
        "hyp_correct": false,
        "NL_query": "What is the mail date of the document with id 7?",
        "index": 129,
        "GT": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "documents_mailed",
            "documents"
        ]
    },
    {
        "SQL": "select Participant_ID from Participants_in_Events",
        "hyp_correct": false,
        "NL_query": "What are all the distinct participant ids who attended any events?",
        "index": 134,
        "GT": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "DB": "local_govt_in_alabama",
        "tables": [
            "participants_in_events"
        ]
    },
    {
        "SQL": "select Name from people",
        "hyp_correct": false,
        "NL_query": "What are the names of entrepreneurs?",
        "index": 143,
        "GT": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select Name from people",
        "hyp_correct": false,
        "NL_query": "Return the names of entrepreneurs.",
        "index": 144,
        "GT": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select count ( Perpetrator_ID ) from perpetrator",
        "hyp_correct": false,
        "NL_query": "How many perpetrators are there?",
        "index": 149,
        "GT": "SELECT count(*) FROM perpetrator",
        "DB": "perpetrator",
        "tables": [
            "perpetrator"
        ]
    },
    {
        "SQL": "select Injured from perpetrator order by Killed asc",
        "hyp_correct": false,
        "NL_query": "List the number of people injured by perpetrators in ascending order.",
        "index": 151,
        "GT": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "DB": "perpetrator",
        "tables": [
            "perpetrator"
        ]
    },
    {
        "SQL": "select Name from people",
        "hyp_correct": false,
        "NL_query": "What are the names of perpetrators?",
        "index": 154,
        "GT": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
        "DB": "perpetrator",
        "tables": [
            "perpetrator",
            "people"
        ]
    },
    {
        "SQL": "select Name from people order by Date_of_Birth desc",
        "hyp_correct": false,
        "NL_query": "List all people names in the order of their date of birth from old to young.",
        "index": 159,
        "GT": "SELECT name FROM people ORDER BY date_of_birth",
        "DB": "candidate_poll",
        "tables": [
            "people"
        ]
    },
    {
        "SQL": "select District from election",
        "hyp_correct": false,
        "NL_query": "Show all the distinct districts for elections.",
        "index": 167,
        "GT": "SELECT DISTINCT District FROM election",
        "DB": "election",
        "tables": [
            "election"
        ]
    },
    {
        "SQL": "select District from election",
        "hyp_correct": false,
        "NL_query": "What are the distinct districts for elections?",
        "index": 168,
        "GT": "SELECT DISTINCT District FROM election",
        "DB": "election",
        "tables": [
            "election"
        ]
    },
    {
        "SQL": "select count ( Governor ) from party",
        "hyp_correct": false,
        "NL_query": "How many distinct governors are there?",
        "index": 173,
        "GT": "SELECT count(DISTINCT Governor) FROM party",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "select count ( Governor ) from party",
        "hyp_correct": false,
        "NL_query": "Count the number of distinct governors.",
        "index": 174,
        "GT": "SELECT count(DISTINCT Governor) FROM party",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "select Year from party where Governor = \"Eliot\" and Lieutenant_Governor = 1",
        "hyp_correct": false,
        "NL_query": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "index": 175,
        "GT": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "select Year from party where Governor = \"Eliot Spitzer\"",
        "hyp_correct": false,
        "NL_query": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "index": 176,
        "GT": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "select count ( * ) from customer",
        "hyp_correct": false,
        "NL_query": "How many customers are there?",
        "index": 190,
        "GT": "SELECT sum(no_of_customers) FROM bank",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select count ( * ) from customer",
        "hyp_correct": false,
        "NL_query": "What is the total number of customers across banks?",
        "index": 191,
        "GT": "SELECT sum(no_of_customers) FROM bank",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select count ( * ) from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID where T2.city = \"New York\" and T2.state = 1",
        "hyp_correct": false,
        "NL_query": "Find the number of customers in the banks at New York City.",
        "index": 192,
        "GT": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select count ( * ) from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID where T2.city = \"New York\"",
        "hyp_correct": false,
        "NL_query": "What is the total number of customers who use banks in New York City?",
        "index": 193,
        "GT": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select state from bank where city = \"New York\"",
        "hyp_correct": false,
        "NL_query": "Find the branch names of banks in the New York state.",
        "index": 198,
        "GT": "SELECT bname FROM bank WHERE state  =  'New York'",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "select state from bank where state = \"New York\"",
        "hyp_correct": false,
        "NL_query": "What are the names of banks in the state of New York?",
        "index": 199,
        "GT": "SELECT bname FROM bank WHERE state  =  'New York'",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "select count ( city ) from bank",
        "hyp_correct": false,
        "NL_query": "Find the number of different cities which banks are located at.",
        "index": 202,
        "GT": "SELECT count(DISTINCT city) FROM bank",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "select count ( city ) from bank",
        "hyp_correct": false,
        "NL_query": "In how many different cities are banks located?",
        "index": 203,
        "GT": "SELECT count(DISTINCT city) FROM bank",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "select count ( state ) from bank",
        "hyp_correct": false,
        "NL_query": "Find the number of different states which banks are located at.",
        "index": 204,
        "GT": "SELECT count(DISTINCT state) FROM bank",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "select count ( state ) from bank",
        "hyp_correct": false,
        "NL_query": "In how many different states are banks located?",
        "index": 205,
        "GT": "SELECT count(DISTINCT state) FROM bank",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "select count ( acc_type ) from customer",
        "hyp_correct": false,
        "NL_query": "How many distinct types of accounts are there?",
        "index": 206,
        "GT": "SELECT count(DISTINCT acc_type) FROM customer",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select count ( acc_type ) from customer",
        "hyp_correct": false,
        "NL_query": "Count the number of different account types.",
        "index": 207,
        "GT": "SELECT count(DISTINCT acc_type) FROM customer",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select branch_ID from loan",
        "hyp_correct": false,
        "NL_query": "Find the name of bank branches that provided some loans.",
        "index": 208,
        "GT": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "DB": "loan_1",
        "tables": [
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "select count ( no_of_loans ) from customer",
        "hyp_correct": false,
        "NL_query": "What are the names of the different banks that have provided loans?",
        "index": 209,
        "GT": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "select count () from Fault_Log_Parts",
        "hyp_correct": false,
        "NL_query": "How many fault status codes are recorded in the fault log parts table?",
        "index": 211,
        "GT": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "DB": "assets_maintenance",
        "tables": [
            "fault_log_parts"
        ]
    },
    {
        "SQL": "select count ( services ) from station",
        "hyp_correct": false,
        "NL_query": "How many different services are provided by all stations?",
        "index": 213,
        "GT": "SELECT count(DISTINCT services) FROM station",
        "DB": "station_weather",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "select Year from competition where Competition_type != \"Tournament\"",
        "hyp_correct": false,
        "NL_query": "What are the distinct years in which the competitions type is not \"Tournament\"?",
        "index": 221,
        "GT": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "select Year from competition where Competition_type != 1",
        "hyp_correct": false,
        "NL_query": "What are the different years for all competitions that are not of type equal to tournament?",
        "index": 222,
        "GT": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "select name from club order by Start_year desc limit 1",
        "hyp_correct": false,
        "NL_query": "What are the names of all the clubs starting with the oldest?",
        "index": 226,
        "GT": "SELECT name FROM club ORDER BY Start_year ASC",
        "DB": "sports_competition",
        "tables": [
            "club"
        ]
    },
    {
        "SQL": "select Position from player where Position > 20 group by Position having avg ( Points ) > 1",
        "hyp_correct": false,
        "NL_query": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "index": 229,
        "GT": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select Position from player where Position > ( select avg ( Points ) from player group by Position",
        "hyp_correct": false,
        "NL_query": "What are the positions of players whose average number of points scored by that position is larger than 20?",
        "index": 230,
        "GT": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select Competition_type from competition group by Competition_type order by count ( * ) desc limit 5",
        "hyp_correct": false,
        "NL_query": "What are the types of competition that have most 5 competitions for that type?",
        "index": 232,
        "GT": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "select Points from player",
        "hyp_correct": false,
        "NL_query": "Show total points of all players.",
        "index": 233,
        "GT": "SELECT sum(Points) FROM player",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select count ( Position ) from player",
        "hyp_correct": false,
        "NL_query": "how many different positions are there?",
        "index": 235,
        "GT": "SELECT count(DISTINCT POSITION) FROM player",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select count ( Position ) from player",
        "hyp_correct": false,
        "NL_query": "How many different position for players are listed?",
        "index": 236,
        "GT": "SELECT count(DISTINCT POSITION) FROM player",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select song_name from song where languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all English songs.",
        "index": 237,
        "GT": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select song_name from song where languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all songs in English?",
        "index": 238,
        "GT": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select formats from files where formats = \"mp3\"",
        "hyp_correct": false,
        "NL_query": "What are the id of all the files in mp3 format?",
        "index": 240,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "DB": "music_1",
        "tables": [
            "files"
        ]
    },
    {
        "SQL": "select count ( * ) from artist where country = \"Bangladeshi\"",
        "hyp_correct": false,
        "NL_query": "How many Bangladeshi artists are listed?",
        "index": 242,
        "GT": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "select count ( * ) from company where Headquarters = 1",
        "hyp_correct": false,
        "NL_query": "How many companies are headquartered in the US?",
        "index": 250,
        "GT": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "select Country from market group by Country order by count ( * ) desc",
        "hyp_correct": false,
        "NL_query": "List all countries of markets in descending order of number of cities.",
        "index": 265,
        "GT": "SELECT Country FROM market ORDER BY Number_cities DESC",
        "DB": "film_rank",
        "tables": [
            "market"
        ]
    },
    {
        "SQL": "select Country from market group by Country order by count ( * ) desc",
        "hyp_correct": false,
        "NL_query": "What are the countries for each market ordered by decreasing number of cities?",
        "index": 266,
        "GT": "SELECT Country FROM market ORDER BY Number_cities DESC",
        "DB": "film_rank",
        "tables": [
            "market"
        ]
    },
    {
        "SQL": "select Studio from film group by avg ( Gross_in_dollar ) > 4500000",
        "hyp_correct": false,
        "NL_query": "List the studios which average gross is above 4500000.",
        "index": 269,
        "GT": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "select Fname from Student",
        "hyp_correct": false,
        "NL_query": "What are the first names of all the students?",
        "index": 277,
        "GT": "SELECT DISTINCT fname FROM student",
        "DB": "club_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Fname from Student",
        "hyp_correct": false,
        "NL_query": "Find each student's first name.",
        "index": 278,
        "GT": "SELECT DISTINCT fname FROM student",
        "DB": "club_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select count ( * ) from Staff_Roles",
        "hyp_correct": false,
        "NL_query": "How many kinds of roles are there for the staff?",
        "index": 293,
        "GT": "SELECT count(DISTINCT role_code) FROM Project_Staff",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "staff_roles"
        ]
    },
    {
        "SQL": "select count ( role_code ) from Project_Staff",
        "hyp_correct": false,
        "NL_query": "How many different roles are there on the project staff?",
        "index": 294,
        "GT": "SELECT count(DISTINCT role_code) FROM Project_Staff",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "select T5.role_description , T7.organisation_type_description from Research_Outcomes as T1 join Project_Outcomes as T2 on T1.outcome_code = T2.outcome_code join Projects as T3 on T2.project_id = T3.project_id join Project_Staff as T4 on T3.project_id = T4.project_id join Staff_Roles as T5 on T4.role_code = T5.role_code join Organisations as T6 on T3.organisation_id = T6.organisation_id join Organisation_Types as T7 on T6.organisation_type = T7.organisation_type where T1.outcome_description = 1",
        "hyp_correct": false,
        "NL_query": "What is the complete description of the researcher role.",
        "index": 295,
        "GT": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "research_outcomes",
            "project_outcomes",
            "organisations",
            "project_staff",
            "projects",
            "staff_roles",
            "organisation_types"
        ]
    },
    {
        "SQL": "select sum ( organisation_type_description ) from Organisation_Types",
        "hyp_correct": false,
        "NL_query": "What is the complete description of the job of a researcher?",
        "index": 296,
        "GT": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisation_types",
            "staff_roles"
        ]
    },
    {
        "SQL": "select count ( * ) from Project_Outcomes",
        "hyp_correct": false,
        "NL_query": "How many Patent outcomes are generated from all the projects?",
        "index": 297,
        "GT": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_outcomes"
        ]
    },
    {
        "SQL": "select count ( outcome_code ) from Project_Outcomes",
        "hyp_correct": false,
        "NL_query": "How many patents outcomes were listed for all the projects?",
        "index": 298,
        "GT": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_outcomes"
        ]
    },
    {
        "SQL": "select outcome_description from Research_Outcomes",
        "hyp_correct": false,
        "NL_query": "What are the descriptions of all the project outcomes?",
        "index": 303,
        "GT": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_outcomes",
            "research_outcomes"
        ]
    },
    {
        "SQL": "select outcome_description from Research_Outcomes",
        "hyp_correct": false,
        "NL_query": "List the description of the outcomes for all projects.",
        "index": 304,
        "GT": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_outcomes",
            "research_outcomes"
        ]
    },
    {
        "SQL": "select count ( gender ) from Person where limit 'f' = 1",
        "hyp_correct": false,
        "NL_query": "How many females does this network has?",
        "index": 305,
        "GT": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select count ( job ) from Person",
        "hyp_correct": false,
        "NL_query": "How many type of jobs do they have?",
        "index": 311,
        "GT": "SELECT count(DISTINCT job) FROM Person",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select count ( job ) from Person",
        "hyp_correct": false,
        "NL_query": "How many different jobs are listed?",
        "index": 312,
        "GT": "SELECT count(DISTINCT job) FROM Person",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select T1.name from Person as T1 join PersonFriend as T2 on T1.name = T2.name group by T2.friend having count ( * ) = 1",
        "hyp_correct": false,
        "NL_query": "Find the person who has exactly one friend.",
        "index": 317,
        "GT": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select premises_type from Premises",
        "hyp_correct": false,
        "NL_query": "What are all the distinct premise types?",
        "index": 323,
        "GT": "SELECT DISTINCT premises_type FROM premises",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "premises"
        ]
    },
    {
        "SQL": "select address_type_code from Customer_Addresses",
        "hyp_correct": false,
        "NL_query": "What are the distinct address type codes for all customer addresses?",
        "index": 324,
        "GT": "SELECT DISTINCT address_type_code FROM customer_addresses",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "customer_addresses"
        ]
    },
    {
        "SQL": "select CName from Course group by CName having count ( Credits ) = 1",
        "hyp_correct": false,
        "NL_query": "List all names of courses with 1 credit?",
        "index": 329,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  1",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "select CName from Course group by CName having count ( Credits ) = 1",
        "hyp_correct": false,
        "NL_query": "What are the names of courses with 1 credit?",
        "index": 330,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  1",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "select T2.CName from Department as T1 join Course as T2 on T1.DNO = T2.DNO where T1.DName = \"MTW\"",
        "hyp_correct": false,
        "NL_query": "What are the course names for courses taught on MTW?",
        "index": 332,
        "GT": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
        "DB": "college_3",
        "tables": [
            "course",
            "department"
        ]
    },
    {
        "SQL": "select DPhone from Department where Division = 268",
        "hyp_correct": false,
        "NL_query": "What are the phones of departments in Room 268?",
        "index": 335,
        "GT": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "DB": "college_3",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "select count ( * ) from Enrolled_in as T1 join Student as T2 on T1.StuID = T2.StuID where T1.Grade = 'b'",
        "hyp_correct": false,
        "NL_query": "Find the number of students that have at least one grade \"B\".",
        "index": 337,
        "GT": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "DB": "college_3",
        "tables": [
            "student",
            "enrolled_in"
        ]
    },
    {
        "SQL": "select count ( * ) from Enrolled_in as T1 join Student as T2 on T1.StuID = T2.StuID where T1.Grade = \"B\"",
        "hyp_correct": false,
        "NL_query": "How many students have had at least one \"B\" grade?",
        "index": 338,
        "GT": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "DB": "college_3",
        "tables": [
            "student",
            "enrolled_in"
        ]
    },
    {
        "SQL": "select Fname from Student order by Age asc",
        "hyp_correct": false,
        "NL_query": "What are the first names of students, ordered by age from greatest to least?",
        "index": 346,
        "GT": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select count ( * ) from airport_aircraft",
        "hyp_correct": false,
        "NL_query": "What is the number of aircraft?",
        "index": 348,
        "GT": "SELECT count(*) FROM aircraft",
        "DB": "aircraft",
        "tables": [
            "aircraft",
            "airport_aircraft"
        ]
    },
    {
        "SQL": "select count ( enr ) from College",
        "hyp_correct": false,
        "NL_query": "How many students are enrolled in college?",
        "index": 360,
        "GT": "SELECT sum(enr) FROM College",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select avg ( enr ) , count ( * ) from College group by cName",
        "hyp_correct": false,
        "NL_query": "How many students, on average, does each college have enrolled?",
        "index": 362,
        "GT": "SELECT avg(enr) FROM College",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select count ( cName ) from College",
        "hyp_correct": false,
        "NL_query": "How many different colleges are there?",
        "index": 364,
        "GT": "SELECT count(*) FROM College",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select count ( HS ) from Player where HS > 1000",
        "hyp_correct": false,
        "NL_query": "How many different players trained for more than 1000 hours?",
        "index": 366,
        "GT": "SELECT count(*) FROM Player WHERE HS  >  1000",
        "DB": "soccer_2",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select count ( cName ) from Tryout",
        "hyp_correct": false,
        "NL_query": "How many different colleges do attend the tryout test?",
        "index": 371,
        "GT": "SELECT count(DISTINCT cName) FROM tryout",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select count ( cName ) from Tryout",
        "hyp_correct": false,
        "NL_query": "How many different colleges were represented at tryouts?",
        "index": 372,
        "GT": "SELECT count(DISTINCT cName) FROM tryout",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select pPos from Tryout",
        "hyp_correct": false,
        "NL_query": "What are the unique types of player positions in the tryout?",
        "index": 373,
        "GT": "SELECT count(DISTINCT pPos) FROM tryout",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select pPos from Tryout",
        "hyp_correct": false,
        "NL_query": "What are the different types of player positions?",
        "index": 374,
        "GT": "SELECT count(DISTINCT pPos) FROM tryout",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select count ( * ) from Tryout",
        "hyp_correct": false,
        "NL_query": "How many students received a yes from tryouts?",
        "index": 376,
        "GT": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select count ( T1.pPos ) from Tryout as T1 join Player as T2 on T1.pID = T2.pID where T2.pName = \"goalie\"",
        "hyp_correct": false,
        "NL_query": "What is the number of students playing as a goalie?",
        "index": 378,
        "GT": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select avg ( enr ) from College where state = \"Florida\"",
        "hyp_correct": false,
        "NL_query": "What is average number of students enrolled in Florida colleges?",
        "index": 380,
        "GT": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select * from College order by enr desc",
        "hyp_correct": false,
        "NL_query": "What information do you have on colleges sorted by increasing enrollment numbers?",
        "index": 384,
        "GT": "SELECT * FROM College ORDER BY enr",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select T1.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName order by T2.cName",
        "hyp_correct": false,
        "NL_query": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "index": 385,
        "GT": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select T1.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName order by T2.cName",
        "hyp_correct": false,
        "NL_query": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "index": 386,
        "GT": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select state from College",
        "hyp_correct": false,
        "NL_query": "Find the states where have some college students in tryout.",
        "index": 387,
        "GT": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select count ( state ) from College",
        "hyp_correct": false,
        "NL_query": "What are the different states that have students trying out?",
        "index": 388,
        "GT": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select count ( cName ) from Tryout where pPos = \"goalie\" and pPos = \"mid\"",
        "hyp_correct": false,
        "NL_query": "How many schools have some students playing in goalie and mid positions.",
        "index": 389,
        "GT": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select count ( cName ) from Tryout where pPos = \"goalie\" and pPos = \"mid field\"",
        "hyp_correct": false,
        "NL_query": "How many schools have students playing in goalie and mid-field positions?",
        "index": 390,
        "GT": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select count ( T2.state ) from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = 'mid' except select T4.state from Tryout as T3 join College as T4 on T3.cName = T4.cName where T3.pPos = 'goalie'",
        "hyp_correct": false,
        "NL_query": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "index": 391,
        "GT": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select count ( T2.state ) from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = ' and T1.cName = \"goalies\"",
        "hyp_correct": false,
        "NL_query": "What is the count of states with college students playing in the mid position but not as goalies?",
        "index": 392,
        "GT": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select Carrier from device order by Device asc",
        "hyp_correct": false,
        "NL_query": "List the carriers of devices in ascending alphabetical order.",
        "index": 395,
        "GT": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "DB": "device",
        "tables": [
            "device"
        ]
    },
    {
        "SQL": "select Carrier from device order by Device",
        "hyp_correct": false,
        "NL_query": "What are the different carriers for devices, listed in alphabetical order?",
        "index": 396,
        "GT": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "DB": "device",
        "tables": [
            "device"
        ]
    },
    {
        "SQL": "select Device from device except select Carrier from device where Software_Platform = 'Android'",
        "hyp_correct": false,
        "NL_query": "Return the device carriers that do not have Android as their software platform.",
        "index": 398,
        "GT": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
        "DB": "device",
        "tables": [
            "device"
        ]
    },
    {
        "SQL": "select count ( Software_Platform ) from device",
        "hyp_correct": false,
        "NL_query": "How many different software platforms are there for devices?",
        "index": 403,
        "GT": "SELECT count(DISTINCT Software_Platform) FROM device",
        "DB": "device",
        "tables": [
            "device"
        ]
    },
    {
        "SQL": "select count ( Software_Platform ) from device",
        "hyp_correct": false,
        "NL_query": "Count the number of different software platforms.",
        "index": 404,
        "GT": "SELECT count(DISTINCT Software_Platform) FROM device",
        "DB": "device",
        "tables": [
            "device"
        ]
    },
    {
        "SQL": "select T2.City from membership_register_branch as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID group by T1.Branch_ID having count ( * ) >= 100",
        "hyp_correct": false,
        "NL_query": "Show all distinct city where branches with at least 100 memberships are located.",
        "index": 413,
        "GT": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "membership_register_branch"
        ]
    },
    {
        "SQL": "select T1.Hometown from member as T1 join purchase as T2 on T1.Member_ID = T2.Member_ID join branch as T3 on T2.Branch_ID = T3.Branch_ID where T3.City > 100",
        "hyp_correct": false,
        "NL_query": "What are the different cities that have more than 100 memberships?",
        "index": 414,
        "GT": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "DB": "shop_membership",
        "tables": [
            "member",
            "branch",
            "purchase"
        ]
    },
    {
        "SQL": "select Open_year from branch group by Open_year having count ( ) >= 2",
        "hyp_correct": false,
        "NL_query": "List all open years when at least two shops are opened.",
        "index": 415,
        "GT": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2",
        "DB": "shop_membership",
        "tables": [
            "branch"
        ]
    },
    {
        "SQL": "select Open_year from branch group by Open_year having count ( ) >= 2",
        "hyp_correct": false,
        "NL_query": "What are the opening years in which at least two shops opened?",
        "index": 416,
        "GT": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2",
        "DB": "shop_membership",
        "tables": [
            "branch"
        ]
    },
    {
        "SQL": "select count ( Level ) from member",
        "hyp_correct": false,
        "NL_query": "How many different levels do members have?",
        "index": 417,
        "GT": "SELECT count(DISTINCT LEVEL) FROM member",
        "DB": "shop_membership",
        "tables": [
            "member"
        ]
    },
    {
        "SQL": "select Level from member",
        "hyp_correct": false,
        "NL_query": "What are the different membership levels?",
        "index": 418,
        "GT": "SELECT count(DISTINCT LEVEL) FROM member",
        "DB": "shop_membership",
        "tables": [
            "member"
        ]
    },
    {
        "SQL": "select dorm_name from Dorm where gender = 'F' and gender = 1",
        "hyp_correct": false,
        "NL_query": "Find the name of dorms only for female (F gender).",
        "index": 422,
        "GT": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "select dorm_name from Dorm where gender = 'f'",
        "hyp_correct": false,
        "NL_query": "What are the names of the all-female dorms?",
        "index": 423,
        "GT": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "select count ( amenity_name ) from Dorm_amenity",
        "hyp_correct": false,
        "NL_query": "Find the number of distinct amenities.",
        "index": 430,
        "GT": "SELECT count(*) FROM dorm_amenity",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select count ( amenity_name ) from Dorm_amenity",
        "hyp_correct": false,
        "NL_query": "How many diffrent dorm amenities are there?",
        "index": 431,
        "GT": "SELECT count(*) FROM dorm_amenity",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select count ( * ) from Dorm_amenity",
        "hyp_correct": false,
        "NL_query": "Find the number of dorms that have some amenity.",
        "index": 436,
        "GT": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select count ( dorm_name ) from Dorm",
        "hyp_correct": false,
        "NL_query": "How many dorms have amenities?",
        "index": 437,
        "GT": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "has_amenity"
        ]
    },
    {
        "SQL": "select count ( gender ) from Dorm",
        "hyp_correct": false,
        "NL_query": "Find the number of distinct gender for dorms.",
        "index": 438,
        "GT": "SELECT count(DISTINCT gender) FROM dorm",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "select count ( gender ) from Dorm",
        "hyp_correct": false,
        "NL_query": "How many different genders are there in the dorms?",
        "index": 439,
        "GT": "SELECT count(DISTINCT gender) FROM dorm",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "select amenity_name from Dorm_amenity order by limit 1",
        "hyp_correct": false,
        "NL_query": "List in alphabetic order all different amenities.",
        "index": 440,
        "GT": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "DB": "dorm_1",
        "tables": [
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select T3.amenity_name from Dorm as T1 join Has_amenity as T2 on T1.dormid = T2.dormid join Dorm_amenity as T3 on T2.amenid = T3.amenid order by T1.dorm_name",
        "hyp_correct": false,
        "NL_query": "What are the different dorm amenity names in alphabetical order?",
        "index": 441,
        "GT": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "has_amenity",
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select count ( complaint_type_code ) from Complaints",
        "hyp_correct": false,
        "NL_query": "How many distinct complaint type codes are there in the database?",
        "index": 448,
        "GT": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "DB": "customer_complaints",
        "tables": [
            "complaints"
        ]
    },
    {
        "SQL": "select count ( complaint_type_code ) from Complaints",
        "hyp_correct": false,
        "NL_query": "Count the number of different complaint type codes.",
        "index": 449,
        "GT": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "DB": "customer_complaints",
        "tables": [
            "complaints"
        ]
    },
    {
        "SQL": "select count ( * ) from Video_Games",
        "hyp_correct": false,
        "NL_query": "How many video game types exist?",
        "index": 452,
        "GT": "SELECT count(DISTINCT gtype) FROM Video_games",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "select GName from Video_Games where GType = \"videoible\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all video games that are collectible cards?",
        "index": 457,
        "GT": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "select GType from Video_Games where GName = \"call video of destiny\"",
        "hyp_correct": false,
        "NL_query": "What is the type of video game Call of Destiny.",
        "index": 458,
        "GT": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "select GType from Video_Games where GName = \"call destiny\"",
        "hyp_correct": false,
        "NL_query": "What type of game is Call of Destiny?",
        "index": 459,
        "GT": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "select count ( * ) from Video_Games where GType = \"Massively multiplayer online\"",
        "hyp_correct": false,
        "NL_query": "How many video games have type Massively multiplayer online game?",
        "index": 460,
        "GT": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "select count ( * ) from Video_Games where GType = \"Massively multiplayer online\"",
        "hyp_correct": false,
        "NL_query": "Count the number of video games with Massively multiplayer online game type .",
        "index": 461,
        "GT": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "select Advisor from Student",
        "hyp_correct": false,
        "NL_query": "What are the advisors",
        "index": 469,
        "GT": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
        "DB": "game_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select count ( * ) from SportsInfo",
        "hyp_correct": false,
        "NL_query": "How many sports do we have?",
        "index": 470,
        "GT": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "select count ( GType ) from Video_Games",
        "hyp_correct": false,
        "NL_query": "How many different types of sports do we offer?",
        "index": 471,
        "GT": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "video_games",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select count ( StuID ) from Plays_Games",
        "hyp_correct": false,
        "NL_query": "How many students play sports?",
        "index": 472,
        "GT": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select count ( StuID ) from SportsInfo",
        "hyp_correct": false,
        "NL_query": "How many different students are involved in sports?",
        "index": 473,
        "GT": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "select StuID from Student",
        "hyp_correct": false,
        "NL_query": "List ids for all student who are on scholarship.",
        "index": 474,
        "GT": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select StuID from SportsInfo",
        "hyp_correct": false,
        "NL_query": "What are the ids for all sporty students who are on scholarship?",
        "index": 475,
        "GT": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "select count ( * ) from Plays_Games",
        "hyp_correct": false,
        "NL_query": "How many games are played for all students?",
        "index": 476,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select count ( * ) from Plays_Games",
        "hyp_correct": false,
        "NL_query": "What is the total number of games played?",
        "index": 477,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select T1.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID group by T3.StuID having sum ( T1.HoursPerWeek ) > 10",
        "hyp_correct": false,
        "NL_query": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "index": 478,
        "GT": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select count ( T2.StuID ) from Video_Games as T1 join Plays_Games as T2 on T1.GameID = T2.GameID where T1.GType = \"video games\"",
        "hyp_correct": false,
        "NL_query": "How many students play video games?",
        "index": 480,
        "GT": "SELECT count(DISTINCT StuID) FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "video_games",
            "plays_games"
        ]
    },
    {
        "SQL": "select count ( StuID ) from Plays_Games",
        "hyp_correct": false,
        "NL_query": "How many different students play games?",
        "index": 481,
        "GT": "SELECT count(DISTINCT StuID) FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "plays_games"
        ]
    },
    {
        "SQL": "select form_type_code from Forms",
        "hyp_correct": false,
        "NL_query": "List all the types of forms.",
        "index": 487,
        "GT": "SELECT DISTINCT form_type_code FROM forms",
        "DB": "e_government",
        "tables": [
            "forms"
        ]
    },
    {
        "SQL": "select form_type_code from Forms",
        "hyp_correct": false,
        "NL_query": "What are the different types of forms?",
        "index": 488,
        "GT": "SELECT DISTINCT form_type_code FROM forms",
        "DB": "e_government",
        "tables": [
            "forms"
        ]
    },
    {
        "SQL": "select count ( town_city ) from Addresses where state_province_county = \"Colorado\"",
        "hyp_correct": false,
        "NL_query": "How many cities are there in state \"Colorado\"?",
        "index": 493,
        "GT": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "select count ( town_city ) from Addresses where state_province_county = \"Colorado\"",
        "hyp_correct": false,
        "NL_query": "Count the number of cities in the state of Colorado.",
        "index": 494,
        "GT": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "select count ( payment_method_code ) from Parties",
        "hyp_correct": false,
        "NL_query": "How many distinct payment methods are used by parties?",
        "index": 497,
        "GT": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "DB": "e_government",
        "tables": [
            "parties"
        ]
    },
    {
        "SQL": "select count ( payment_method_code ) from Parties",
        "hyp_correct": false,
        "NL_query": "Count the number of different payment method codes used by parties.",
        "index": 498,
        "GT": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "DB": "e_government",
        "tables": [
            "parties"
        ]
    },
    {
        "SQL": "select T1.individual_last_name from Individuals as T1 join Organization_Contact_Individuals as T2 on T1.individual_id = T2.individual_id join Organizations as T3 on T2.organization_id = T3.organization_id where T3.organization_name = 1",
        "hyp_correct": false,
        "NL_query": "Find the last name of the individuals that have been contact individuals of an organization.",
        "index": 499,
        "GT": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "DB": "e_government",
        "tables": [
            "organizations",
            "organization_contact_individuals",
            "individuals"
        ]
    },
    {
        "SQL": "select individual_last_name from Individuals",
        "hyp_correct": false,
        "NL_query": "What are the last names of individuals who have been contact individuals for an organization?",
        "index": 500,
        "GT": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "DB": "e_government",
        "tables": [
            "organization_contact_individuals",
            "individuals"
        ]
    },
    {
        "SQL": "select Home_city from driver",
        "hyp_correct": false,
        "NL_query": "Show all different home cities.",
        "index": 503,
        "GT": "SELECT DISTINCT home_city FROM driver",
        "DB": "school_bus",
        "tables": [
            "driver"
        ]
    },
    {
        "SQL": "select count ( * ) from train_station",
        "hyp_correct": false,
        "NL_query": "How many train stations are there?",
        "index": 527,
        "GT": "SELECT count(*) FROM station",
        "DB": "train_station",
        "tables": [
            "station",
            "train_station"
        ]
    },
    {
        "SQL": "select Location from station",
        "hyp_correct": false,
        "NL_query": "What are all locations of train stations?",
        "index": 528,
        "GT": "SELECT DISTINCT LOCATION FROM station",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "select count ( first_name ) from Staff where first_name = 'Ludie'",
        "hyp_correct": false,
        "NL_query": "How many employees have a first name of Ludie?",
        "index": 538,
        "GT": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "select count ( * ) from Staff as T1 join Addresses as T2 on T1.staff_address_id = T2.address_id where T2.state_province_county = \"Georgia\"",
        "hyp_correct": false,
        "NL_query": "How many staff live in state Georgia?",
        "index": 541,
        "GT": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "select count ( * ) from Staff as T1 join Addresses as T2 on T1.staff_address_id = T2.address_id where T2.state_province_county = \"Georgia\"",
        "hyp_correct": false,
        "NL_query": "How many employees live in Georgia?",
        "index": 542,
        "GT": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "select count ( * ) from Lessons where lesson_status_code = \"cancelled\"",
        "hyp_correct": false,
        "NL_query": "How many lessons were in cancelled state?",
        "index": 547,
        "GT": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "DB": "driving_school",
        "tables": [
            "lessons"
        ]
    },
    {
        "SQL": "select count ( lesson_date ) from Lessons",
        "hyp_correct": false,
        "NL_query": "How many lessons have been cancelled?",
        "index": 548,
        "GT": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "DB": "driving_school",
        "tables": [
            "lessons"
        ]
    },
    {
        "SQL": "select name from airports where elevation between 50 and 50",
        "hyp_correct": false,
        "NL_query": "Find the name of airports whose altitude is between -50 and 50.",
        "index": 557,
        "GT": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select name from airports where elevation between 50 and 50",
        "hyp_correct": false,
        "NL_query": "What are the names of all airports whose elevation is between -50 and 50?",
        "index": 558,
        "GT": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select count ( city ) from airports where country = \"Greenland\"",
        "hyp_correct": false,
        "NL_query": "How many different cities do have some airport in the country of Greenland?",
        "index": 559,
        "GT": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select count ( * ) from airports where country = \"Greenland\"",
        "hyp_correct": false,
        "NL_query": "In how many cities are there airports in the country of Greenland?",
        "index": 560,
        "GT": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select count ( * ) from airports group by city having count ( * ) > 3",
        "hyp_correct": false,
        "NL_query": "How many cities are there that have more than 3 airports?",
        "index": 561,
        "GT": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select count ( * ) from airports group by city having count ( * ) > 3",
        "hyp_correct": false,
        "NL_query": "What is the count of cities with more than 3 airports?",
        "index": 562,
        "GT": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select order_id from Order_Items where product_id = 11",
        "hyp_correct": false,
        "NL_query": "Find the ids of all the order items whose product id is 11.",
        "index": 567,
        "GT": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "DB": "tracking_orders",
        "tables": [
            "order_items"
        ]
    },
    {
        "SQL": "select order_id from Order_Items where product_id = 11",
        "hyp_correct": false,
        "NL_query": "Find all the order items whose product id is 11. What are the order item ids?",
        "index": 568,
        "GT": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "DB": "tracking_orders",
        "tables": [
            "order_items"
        ]
    },
    {
        "SQL": "select T2.order_id from Orders as T1 join Shipments as T2 on T1.order_id = T2.order_id where T1.date_order_placed > \"2000 - 01 - 01\"",
        "hyp_correct": false,
        "NL_query": "Find the ids of orders which are shipped after 2000-01-01.",
        "index": 569,
        "GT": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "orders",
            "shipments"
        ]
    },
    {
        "SQL": "select product_name from Products order by product_name",
        "hyp_correct": false,
        "NL_query": "List the names of all distinct products in alphabetical order.",
        "index": 571,
        "GT": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "DB": "tracking_orders",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "select product_name from Products order by product_name",
        "hyp_correct": false,
        "NL_query": "Sort all the distinct products in alphabetical order.",
        "index": 572,
        "GT": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "DB": "tracking_orders",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "select Country from singer where Age > 20",
        "hyp_correct": false,
        "NL_query": "What are all distinct countries where singers above age 20 are from?",
        "index": 577,
        "GT": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "select Country from singer where Age > 20",
        "hyp_correct": false,
        "NL_query": "What are  the different countries with singers above age 20?",
        "index": 578,
        "GT": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "select avg ( Horsepower ) from cars_data where Cylinders = 4",
        "hyp_correct": false,
        "NL_query": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "index": 584,
        "GT": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select count ( * ) from car_names where Make = 1980",
        "hyp_correct": false,
        "NL_query": "In 1980, how many cars were made?",
        "index": 592,
        "GT": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "select Year from cars_data where Weight < 3000 and Weight < 4000",
        "hyp_correct": false,
        "NL_query": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "index": 593,
        "GT": "select distinct year from cars_data where weight between 3000 and 4000;",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select count ( * ) from Cartoon where Written_by = \"Joseph Kuhr\" and Title = 1",
        "hyp_correct": false,
        "NL_query": "How many cartoons were written by \"Joseph Kuhr\"?",
        "index": 611,
        "GT": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "DB": "tvshow",
        "tables": [
            "cartoon"
        ]
    },
    {
        "SQL": "select count ( * ) from Cartoon where Written_by = \"Joseph\"",
        "hyp_correct": false,
        "NL_query": "What is the number of cartoones written by Joseph Kuhr?",
        "index": 612,
        "GT": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "DB": "tvshow",
        "tables": [
            "cartoon"
        ]
    },
    {
        "SQL": "select Air_Date from TV_series where Episode = \"a love a lifetime\"",
        "hyp_correct": false,
        "NL_query": "When did the episode \"A Love of a Lifetime\" air?",
        "index": 622,
        "GT": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "select Weekly_Rank from TV_series where Episode = \"a love love a lifetime\"",
        "hyp_correct": false,
        "NL_query": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "index": 624,
        "GT": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "select id from TV_Channel group by count ( * ) > 2",
        "hyp_correct": false,
        "NL_query": "What are the ids of all tv channels that have more than 2 TV channels?",
        "index": 626,
        "GT": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "select T1.Name , count ( * ) from department as T1 join management as T2 on T1.Department_ID = T2.department_ID join head as T3 on T2.head_ID = T3.head_ID where T2.temporary_acting = 'Yes' group by T3.name",
        "hyp_correct": false,
        "NL_query": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "index": 630,
        "GT": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
        "DB": "department_management",
        "tables": [
            "head",
            "management",
            "department"
        ]
    },
    {
        "SQL": "select age from head",
        "hyp_correct": false,
        "NL_query": "What are the distinct ages of the heads who are acting?",
        "index": 631,
        "GT": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "DB": "department_management",
        "tables": [
            "head",
            "management"
        ]
    },
    {
        "SQL": "select T1.Name , T3.name , count ( * ) from department as T1 join management as T2 on T1.Department_ID = T2.department_ID join head as T3 on T2.head_ID = T3.head_ID group by T3.head_ID having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "index": 632,
        "GT": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
        "DB": "department_management",
        "tables": [
            "head",
            "management",
            "department"
        ]
    },
    {
        "SQL": "select T1.catalog_name , T2.catalog_level_name from Catalogs as T1 join Catalog_Structure as T2 on T1.catalog_id = T2.catalog_id where T2.catalog_level_number between 5 and 10",
        "hyp_correct": false,
        "NL_query": "Find the name and level of catalog structure with level between 5 and 10.",
        "index": 634,
        "GT": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "DB": "product_catalog",
        "tables": [
            "catalogs",
            "catalog_structure"
        ]
    },
    {
        "SQL": "select T1.catalog_name , T2.catalog_level_name from Catalogs as T1 join Catalog_Structure as T2 on T1.catalog_id = T2.catalog_id where T2.catalog_level_number between 5 and 10",
        "hyp_correct": false,
        "NL_query": "What are the name and level of catalog structure with level number between 5 and 10",
        "index": 635,
        "GT": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "DB": "product_catalog",
        "tables": [
            "catalogs",
            "catalog_structure"
        ]
    },
    {
        "SQL": "select catalog_name from Catalogs where catalog_publisher like \"% Murray %\"",
        "hyp_correct": false,
        "NL_query": "Find all the catalog publishers whose name contains \"Murray\"",
        "index": 636,
        "GT": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "DB": "product_catalog",
        "tables": [
            "catalogs"
        ]
    },
    {
        "SQL": "select catalog_publisher from Catalogs where catalog_name like \"% Murray %\"",
        "hyp_correct": false,
        "NL_query": "Which catalog publishers have substring \"Murray\" in their names?",
        "index": 637,
        "GT": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "DB": "product_catalog",
        "tables": [
            "catalogs"
        ]
    },
    {
        "SQL": "select T1.catalog_name , T1.date_of_publication from Catalogs as T1 join Catalog_Structure as T2 on T1.catalog_id = T2.catalog_id where T2.catalog_level_name > 5",
        "hyp_correct": false,
        "NL_query": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "index": 638,
        "GT": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "DB": "product_catalog",
        "tables": [
            "catalogs",
            "catalog_structure"
        ]
    },
    {
        "SQL": "select T1.catalog_name , T1.date_of_publication from Catalogs as T1 join Catalog_Structure as T2 on T1.catalog_id = T2.catalog_id join Catalog_Contents as T3 on T2.catalog_level_number = T3.catalog_level_number where T3.catalog_level_number > 5",
        "hyp_correct": false,
        "NL_query": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "index": 639,
        "GT": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "DB": "product_catalog",
        "tables": [
            "catalogs",
            "catalog_contents",
            "catalog_structure"
        ]
    },
    {
        "SQL": "select catalog_entry_name from Catalog_Contents order by price_in_pounds desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the entry name of the most expensive catalog (in USD)?",
        "index": 640,
        "GT": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select avg ( price_in_dollars ) , min ( price_in_euros ) from Catalog_Contents where limit 1",
        "hyp_correct": false,
        "NL_query": "What are the average and minimum price (in Euro) of all products?",
        "index": 642,
        "GT": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select avg ( price_in_dollars ) , min ( price_in_euros ) from Catalog_Contents where limit 1",
        "hyp_correct": false,
        "NL_query": "Give me the average and minimum price (in Euro) of the products.",
        "index": 643,
        "GT": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select capacity from Catalog_Contents order by capacity limit 1",
        "hyp_correct": false,
        "NL_query": "Find the name of the product that has the smallest capacity.",
        "index": 646,
        "GT": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select product_stock_number from Catalog_Contents where product_stock_number like 2%'",
        "hyp_correct": false,
        "NL_query": "Find the names of all the products whose stock number starts with \"2\".",
        "index": 648,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select catalog_entry_name from Catalog_Contents where product_stock_number like 2",
        "hyp_correct": false,
        "NL_query": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "index": 649,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select T1.catalog_entry_name from Catalog_Contents as T1 join Catalog_Structure as T2 on T1.catalog_level_number = T2.catalog_level_number where T2.catalog_level_name = 8",
        "hyp_correct": false,
        "NL_query": "Find the names of catalog entries with level number 8.",
        "index": 650,
        "GT": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalog_contents_additional_attributes",
            "catalog_structure"
        ]
    },
    {
        "SQL": "select catalog_entry_name from Catalog_Contents where catalog_level_number = 8",
        "hyp_correct": false,
        "NL_query": "What are the names of catalog entries with level number 8?",
        "index": 651,
        "GT": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalog_contents_additional_attributes"
        ]
    },
    {
        "SQL": "select count ( height ) from Catalog_Contents where length < 3 or width > 5",
        "hyp_correct": false,
        "NL_query": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "index": 652,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select T3.catalog_entry_name from Catalogs as T1 join Catalog_Structure as T2 on T1.catalog_id = T2.catalog_id join Catalog_Contents as T3 on T2.catalog_level_number = T3.catalog_level_number where T3.length < 3 group by T1.catalog_name having count ( T3.width ) > 5",
        "hyp_correct": false,
        "NL_query": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "index": 653,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "DB": "product_catalog",
        "tables": [
            "catalogs",
            "catalog_contents",
            "catalog_structure"
        ]
    },
    {
        "SQL": "select height , capacity from Catalog_Contents where price_in_dollars > 700",
        "hyp_correct": false,
        "NL_query": "Find the name and capacity of products with price greater than 700 (in USD).",
        "index": 656,
        "GT": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select catalog_entry_name , height from Catalog_Contents where price_in_dollars > 700",
        "hyp_correct": false,
        "NL_query": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "index": 657,
        "GT": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "select Name from Artist where Name like \"% a %\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all artists that have \"a\" in their names.",
        "index": 660,
        "GT": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "DB": "chinook_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "select T2.Title from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId where T1.Name = \"ac / dc\"",
        "hyp_correct": false,
        "NL_query": "Find the title of all the albums of the artist \"AC/DC\".",
        "index": 662,
        "GT": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "select T2.Title from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId where T1.Name = \"ac / dc\"",
        "hyp_correct": false,
        "NL_query": "What are the titles of albums by the artist \"AC/DC\"?",
        "index": 663,
        "GT": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "select Name from Track where Name like \"% you %\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all the tracks that contain the word \"you\".",
        "index": 668,
        "GT": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "DB": "chinook_1",
        "tables": [
            "track"
        ]
    },
    {
        "SQL": "select Name from Track where Name like 1",
        "hyp_correct": false,
        "NL_query": "What are the names of tracks that contain the the word you in them?",
        "index": 669,
        "GT": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "DB": "chinook_1",
        "tables": [
            "track"
        ]
    },
    {
        "SQL": "select Milliseconds , max ( Milliseconds ) from Track order by Milliseconds limit 1",
        "hyp_correct": false,
        "NL_query": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "index": 670,
        "GT": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "DB": "chinook_1",
        "tables": [
            "track"
        ]
    },
    {
        "SQL": "select T2.Title , T1.AlbumId , count ( * ) from Track as T1 join Album as T2 on T1.AlbumId = T2.AlbumId group by T2.Title",
        "hyp_correct": false,
        "NL_query": "Show the album names, ids and the number of tracks for each album.",
        "index": 672,
        "GT": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "select T2.Title , count ( * ) from Track as T1 join Album as T2 on T1.AlbumId = T2.AlbumId group by T2.AlbumId",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of the different albums, and how many tracks are on each?",
        "index": 673,
        "GT": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "select count ( * ) from Genre as T1 join Track as T2 on T1.GenreId = T2.GenreId where T1.Name = \"rock\"",
        "hyp_correct": false,
        "NL_query": "How many tracks belong to rock genre?",
        "index": 674,
        "GT": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre"
        ]
    },
    {
        "SQL": "select count ( * ) from Genre as T1 join Track as T2 on T1.GenreId = T2.GenreId where T1.Name = \"rock\"",
        "hyp_correct": false,
        "NL_query": "Count the number of tracks that are part of the rock genre.",
        "index": 675,
        "GT": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre"
        ]
    },
    {
        "SQL": "select avg ( T3.UnitPrice ) from Genre as T1 join Track as T2 on T1.GenreId = T2.GenreId join InvoiceLine as T3 on T2.TrackId = T3.TrackId where T1.Name = \"jazz\"",
        "hyp_correct": false,
        "NL_query": "Find the average unit price of jazz tracks.",
        "index": 677,
        "GT": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre",
            "invoiceline"
        ]
    },
    {
        "SQL": "select FirstName , LastName from Customer where Email = \"luisg @ . embraer com br\"",
        "hyp_correct": false,
        "NL_query": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
        "index": 678,
        "GT": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "DB": "chinook_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select FirstName , LastName from Customer where Email = \"luisg . @ embraer com br\"",
        "hyp_correct": false,
        "NL_query": "Find the full name of the customer with the email \"luisg@embraer.com.br\".",
        "index": 679,
        "GT": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "DB": "chinook_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select count ( * ) from Customer where Email like \"gmail . com %\"",
        "hyp_correct": false,
        "NL_query": "How many customers have email that contains \"gmail.com\"?",
        "index": 680,
        "GT": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "DB": "chinook_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select count ( * ) from Customer where Email = \"gmail . com\"",
        "hyp_correct": false,
        "NL_query": "Count the number of customers that have an email containing \"gmail.com\".",
        "index": 681,
        "GT": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "DB": "chinook_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select City from Employee where PostalCode = 70174",
        "hyp_correct": false,
        "NL_query": "What city does the employee who helps the customer with postal code 70174 live in?",
        "index": 684,
        "GT": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "DB": "chinook_1",
        "tables": [
            "employee",
            "customer"
        ]
    },
    {
        "SQL": "select T2.FirstName from Invoice as T1 join Customer as T2 on T1.CustomerId = T2.CustomerId where T2.Country = 'Brazil' and T1.BillingCountry = '` Brazil'",
        "hyp_correct": false,
        "NL_query": "Find the first names of all customers that live in Brazil and have an invoice.",
        "index": 688,
        "GT": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "invoice"
        ]
    },
    {
        "SQL": "select T2.FirstName from Invoice as T1 join Customer as T2 on T1.CustomerId = T2.CustomerId where T2.Country = 'Brazil' and T1.BillingCountry = 1",
        "hyp_correct": false,
        "NL_query": "What are the different first names for customers from Brazil who have also had an invoice?",
        "index": 689,
        "GT": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "invoice"
        ]
    },
    {
        "SQL": "select T2.Address from Invoice as T1 join Customer as T2 on T1.CustomerId = T2.CustomerId where T2.Country = \"Germany\" and T1.BillingCountry = \"Germany\"",
        "hyp_correct": false,
        "NL_query": "Find the address of all customers that live in Germany and have invoice.",
        "index": 690,
        "GT": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "invoice"
        ]
    },
    {
        "SQL": "select count ( * ) from MediaType as T1 join Track as T2 on T1.MediaTypeId = T2.MediaTypeId where T1.Name = \"AAC audio file media\"",
        "hyp_correct": false,
        "NL_query": "How many tracks are in the AAC audio file media type?",
        "index": 692,
        "GT": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "mediatype"
        ]
    },
    {
        "SQL": "select T1.FirstName , T1.EmployeeId from Employee as T1 join Customer as T2 on T1.EmployeeId = T2.SupportRepId group by T2.FirstName having count ( * ) >= 10",
        "hyp_correct": false,
        "NL_query": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "index": 694,
        "GT": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "DB": "chinook_1",
        "tables": [
            "employee",
            "customer"
        ]
    },
    {
        "SQL": "select T1.FirstName , T2.FirstName , T3.CustomerId from Employee as T1 join Customer as T2 on T1.EmployeeId = T2.SupportRepId join Invoice as T3 on T2.CustomerId = T3.CustomerId group by T1.EmployeeId having count ( T2.CustomerId ) >= 10",
        "hyp_correct": false,
        "NL_query": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "index": 695,
        "GT": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "DB": "chinook_1",
        "tables": [
            "employee",
            "customer",
            "invoice"
        ]
    },
    {
        "SQL": "select T1.LastName from Employee as T1 join Customer as T2 on T1.EmployeeId = T2.SupportRepId where T2.LastName < 20 group by T1.LastName having count ( * ) >= 1",
        "hyp_correct": false,
        "NL_query": "Please show the employee last names that serves no more than 20 customers.",
        "index": 696,
        "GT": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "DB": "chinook_1",
        "tables": [
            "employee",
            "customer"
        ]
    },
    {
        "SQL": "select T1.LastName from Employee as T1 join Customer as T2 on T1.EmployeeId = T2.SupportRepId where T2.LastName <= 20",
        "hyp_correct": false,
        "NL_query": "What are the last names of employees who serve at most 20 customers?",
        "index": 697,
        "GT": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "DB": "chinook_1",
        "tables": [
            "employee",
            "customer"
        ]
    },
    {
        "SQL": "select avg ( T3.UnitPrice ) from Genre as T1 join Track as T2 on T1.GenreId = T2.GenreId join InvoiceLine as T3 on T2.TrackId = T3.TrackId where T1.Name = \"rock\"",
        "hyp_correct": false,
        "NL_query": "What is the average unit price of rock tracks?",
        "index": 698,
        "GT": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre",
            "invoiceline"
        ]
    },
    {
        "SQL": "select name , Trade_Name from medicine where FDA_approved = \"\"",
        "hyp_correct": false,
        "NL_query": "What are the names and trade names of the medcines that are FDA approved?",
        "index": 705,
        "GT": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "select T2.name from medicine_enzyme_interaction as T1 join medicine as T2 on T1.medicine_id = T2.id group by T1.medicine_id having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "index": 707,
        "GT": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select T3.id , T2.name from medicine_enzyme_interaction as T1 join medicine as T2 on T1.medicine_id = T2.id join enzyme as T3 on T1.enzyme_id = T3.id group by T1.medicine_id having count ( * ) >= 3",
        "hyp_correct": false,
        "NL_query": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "index": 708,
        "GT": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme",
            "medicine",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select T1.medicine_id , T2.name from medicine_enzyme_interaction as T1 join medicine as T2 on T1.medicine_id = T2.id group by T1.medicine_id having count ( * ) >= 3",
        "hyp_correct": false,
        "NL_query": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "index": 709,
        "GT": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select T2.name , T2.Location , T2.Product from medicine_enzyme_interaction as T1 join enzyme as T2 on T1.enzyme_id = T2.id where T1.interaction_type = 'inhibitor'",
        "hyp_correct": false,
        "NL_query": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "index": 710,
        "GT": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select T2.name , T2.Location , T2.Product from medicine_enzyme_interaction as T1 join enzyme as T2 on T1.enzyme_id = T2.id where T1.interaction_type = \"inhibitor\"",
        "hyp_correct": false,
        "NL_query": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "index": 711,
        "GT": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select name from enzyme where name like \"% ALA %\"",
        "hyp_correct": false,
        "NL_query": "Which enzyme names have the substring \"ALA\"?",
        "index": 712,
        "GT": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme"
        ]
    },
    {
        "SQL": "select count ( * ) , Trade_Name from medicine group by name",
        "hyp_correct": false,
        "NL_query": "How many medicines are offered by each trade name?",
        "index": 715,
        "GT": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "select School , Location from university",
        "hyp_correct": false,
        "NL_query": "List all public schools and their locations.",
        "index": 718,
        "GT": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select School , Location from university",
        "hyp_correct": false,
        "NL_query": "What are the public schools and what are their locations?",
        "index": 719,
        "GT": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select School from university order by Founded desc limit 1",
        "hyp_correct": false,
        "NL_query": "When was the school with the largest enrollment founded?",
        "index": 720,
        "GT": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select ACC_Percent from basketball_match order by limit 1 ( ACC_Percent ) desc",
        "hyp_correct": false,
        "NL_query": "What is the highest acc percent score in the competition?",
        "index": 722,
        "GT": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "basketball_match"
        ]
    },
    {
        "SQL": "select T1.Location , T2.Team_Name from university as T1 join basketball_match as T2 on T1.School_ID = T2.School_ID where T1.School = \"Clemson\"",
        "hyp_correct": false,
        "NL_query": "Find the location and all games score of the school that has Clemson as its team name.",
        "index": 724,
        "GT": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "DB": "university_basketball",
        "tables": [
            "university",
            "basketball_match"
        ]
    },
    {
        "SQL": "select Location , School from university where Nickname = \"Clemson\"",
        "hyp_correct": false,
        "NL_query": "What are the all games score and location of the school called Clemson?",
        "index": 725,
        "GT": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "DB": "university_basketball",
        "tables": [
            "university",
            "basketball_match"
        ]
    },
    {
        "SQL": "select Enrollment , Primary_conference from university order by limit 1 ( Primary_conference )",
        "hyp_correct": false,
        "NL_query": "Show the enrollment and primary_conference of the oldest college.",
        "index": 726,
        "GT": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select sum ( Enrollment ) , max ( Enrollment ) from university",
        "hyp_correct": false,
        "NL_query": "What is the total and minimum enrollment of all schools?",
        "index": 728,
        "GT": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select sum ( Enrollment ) , max ( Enrollment ) from university",
        "hyp_correct": false,
        "NL_query": "Return the total and minimum enrollments across all schools.",
        "index": 729,
        "GT": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select School from university where Founded > 1850 or Founded < 1",
        "hyp_correct": false,
        "NL_query": "Find the schools that were either founded after 1850 or public.",
        "index": 732,
        "GT": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select count ( * ) from university where Location like \"% ny %\"",
        "hyp_correct": false,
        "NL_query": "How many universities have a location that contains NY?",
        "index": 735,
        "GT": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select Affiliation , count ( Enrollment ) from university where Founded > 1850 group by Affiliation",
        "hyp_correct": false,
        "NL_query": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "index": 738,
        "GT": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select country_id , name from League",
        "hyp_correct": false,
        "NL_query": "List all country and league names.",
        "index": 740,
        "GT": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
        "DB": "soccer_1",
        "tables": [
            "league",
            "country"
        ]
    },
    {
        "SQL": "select count ( * ) from sqlite_sequence as T1 join League as T2 where T1.seq = \"England\"",
        "hyp_correct": false,
        "NL_query": "How many leagues are there in England?",
        "index": 741,
        "GT": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
        "DB": "soccer_1",
        "tables": [
            "league",
            "sqlite_sequence",
            "country"
        ]
    },
    {
        "SQL": "select max ( height ) , min ( height ) from Player",
        "hyp_correct": false,
        "NL_query": "What is the maximum and minimum height of all players?",
        "index": 742,
        "GT": "SELECT max(weight) ,  min(weight) FROM Player",
        "DB": "soccer_1",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select T2.player_name from Player_Attributes as T1 join Player as T2 on T1.player_fifa_api_id = T2.player_fifa_api_id where T1.preferred_foot > 90 and T1.crossing > 1",
        "hyp_correct": false,
        "NL_query": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "index": 743,
        "GT": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "select T2.player_name from Player_Attributes as T1 join Player as T2 on T1.player_fifa_api_id = T2.player_fifa_api_id where T1.overall_rating between 85 and 90",
        "hyp_correct": false,
        "NL_query": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "index": 744,
        "GT": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "select avg ( T1.overall_rating ) from Player_Attributes as T1 join Player as T2 on T1.player_fifa_api_id = T2.player_fifa_api_id where T2.height = \"l\" and T2.weight = \"t\"",
        "hyp_correct": false,
        "NL_query": "What is the average rating for right-footed players and left-footed players?",
        "index": 745,
        "GT": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "select count ( * ) from Player_Attributes as T1 join Player as T2 on T1.player_fifa_api_id = T2.player_fifa_api_id where T1.overall_rating > 80 and T1.overall_rating > 'right footed'",
        "hyp_correct": false,
        "NL_query": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "index": 746,
        "GT": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "select T2.Name , count ( * ) from debate_people as T1 join people as T2 on T1.Affirmative = T2.People_ID where T1.Affirmative = \"affirmative\" group by T1.Negative",
        "hyp_correct": false,
        "NL_query": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "index": 757,
        "GT": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "DB": "debate",
        "tables": [
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "select T2.Name from debate_people as T1 join people as T2 on T1.Affirmative = T2.People_ID group by T1.Affirmative having count ( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "Show the names of people who have been on the negative side of debates at least twice.",
        "index": 758,
        "GT": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "DB": "debate",
        "tables": [
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "select T1.Policy_Type_Code from Policies as T1 join Claim_Headers as T2 on T1.Policy_ID = T2.Policy_ID where T2.Claim_Type_Code = \"Dayana Robel\"",
        "hyp_correct": false,
        "NL_query": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "index": 759,
        "GT": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "policies",
            "customers",
            "claim_headers"
        ]
    },
    {
        "SQL": "select Policy_Type_Code from Policies where Customer_ID = \"Dayana Robel\"",
        "hyp_correct": false,
        "NL_query": "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
        "index": 760,
        "GT": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "policies",
            "customers"
        ]
    },
    {
        "SQL": "select sum ( Amount_Claimed ) , avg ( Amount_Piad ) from Claim_Headers",
        "hyp_correct": false,
        "NL_query": "Find the total and average amount paid in claim headers.",
        "index": 761,
        "GT": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "DB": "insurance_and_eClaims",
        "tables": [
            "claim_headers"
        ]
    },
    {
        "SQL": "select sum ( Amount_Claimed ) , avg ( Amount_Piad ) from Claim_Headers",
        "hyp_correct": false,
        "NL_query": "What are the total amount and average amount paid in claim headers?",
        "index": 762,
        "GT": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "DB": "insurance_and_eClaims",
        "tables": [
            "claim_headers"
        ]
    },
    {
        "SQL": "select Customer_Details from Customers where like \"% Diana %\"",
        "hyp_correct": false,
        "NL_query": "Find the names of customers whose name contains \"Diana\".",
        "index": 763,
        "GT": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select Customer_ID from Policies where Policy_Type_Code = 'deputy'",
        "hyp_correct": false,
        "NL_query": "Find the names of the customers who have an deputy policy.",
        "index": 765,
        "GT": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "policies",
            "customers"
        ]
    },
    {
        "SQL": "select T1.account_id , T1.account_name , T1.other_account_details from Accounts as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.customer_first_name = \"Meaghan\"",
        "hyp_correct": false,
        "NL_query": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "index": 771,
        "GT": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "DB": "customers_and_invoices",
        "tables": [
            "customers",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.customer_id , T1.date_account_opened , T1.account_name , T1.other_account_details from Accounts as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.customer_first_name = \"Meaghan\"",
        "hyp_correct": false,
        "NL_query": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "index": 772,
        "GT": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "DB": "customers_and_invoices",
        "tables": [
            "customers",
            "accounts"
        ]
    },
    {
        "SQL": "select customer_first_name , customer_last_name , phone_number from Customers",
        "hyp_correct": false,
        "NL_query": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "index": 775,
        "GT": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "DB": "customers_and_invoices",
        "tables": [
            "customers",
            "accounts"
        ]
    },
    {
        "SQL": "select T2.customer_first_name , T2.customer_last_name , T2.phone_number from Accounts as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.customer_id = 1",
        "hyp_correct": false,
        "NL_query": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "index": 776,
        "GT": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "DB": "customers_and_invoices",
        "tables": [
            "customers",
            "accounts"
        ]
    },
    {
        "SQL": "select count ( * ) , account_id from Financial_Transactions group by transaction_id",
        "hyp_correct": false,
        "NL_query": "How many transaction does each account have? Show the number and account id.",
        "index": 785,
        "GT": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "DB": "customers_and_invoices",
        "tables": [
            "financial_transactions"
        ]
    },
    {
        "SQL": "select account_id , count ( * ) from Financial_Transactions group by account_id",
        "hyp_correct": false,
        "NL_query": "Count the number of financial transactions that correspond to each account id.",
        "index": 786,
        "GT": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "DB": "customers_and_invoices",
        "tables": [
            "financial_transactions"
        ]
    },
    {
        "SQL": "select avg ( transaction_amount ) , min ( transaction_amount ) , max ( transaction_amount ) from Financial_Transactions",
        "hyp_correct": false,
        "NL_query": "What is the average, minimum, maximum, and total transaction amount?",
        "index": 789,
        "GT": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "DB": "customers_and_invoices",
        "tables": [
            "financial_transactions"
        ]
    },
    {
        "SQL": "select avg ( T1.transaction_amount ) , min ( T6.product_quantity ) , max ( T1.transaction_amount ) from Financial_Transactions as T1 join Accounts as T2 on T1.account_id = T2.account_id join Customers as T3 on T2.customer_id = T3.customer_id join Orders as T4 on T3.customer_id = T4.customer_id join Order_Items as T5 on T4.order_id = T5.order_id join Invoice_Line_Items as T6 on T5.order_item_id = T6.order_item_id",
        "hyp_correct": false,
        "NL_query": "Return the average, minimum, maximum, and total transaction amounts.",
        "index": 790,
        "GT": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "DB": "customers_and_invoices",
        "tables": [
            "orders",
            "invoice_line_items",
            "accounts",
            "financial_transactions",
            "customers",
            "order_items"
        ]
    },
    {
        "SQL": "select T1.account_name , T2.account_id , count ( * ) from Accounts as T1 join Financial_Transactions as T2 on T1.account_id = T2.account_id group by T1.account_name",
        "hyp_correct": false,
        "NL_query": "Return the names and ids of each account, as well as the number of transactions.",
        "index": 794,
        "GT": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "DB": "customers_and_invoices",
        "tables": [
            "accounts",
            "financial_transactions"
        ]
    },
    {
        "SQL": "select T1.order_id , T2.order_details from Invoices as T1 join Orders as T2 on T1.order_id = T2.order_id group by T1.order_id having count ( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "Return the order ids and details for orderes with two or more invoices.",
        "index": 804,
        "GT": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "DB": "customers_and_invoices",
        "tables": [
            "invoices",
            "orders"
        ]
    },
    {
        "SQL": "select T2.product_id , count ( T1.product_id ) from Invoice_Line_Items as T1 join Order_Items as T2 on T1.order_item_id = T2.order_item_id group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "Show the product ids and the number of unique orders containing each product.",
        "index": 809,
        "GT": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "invoice_line_items"
        ]
    },
    {
        "SQL": "select count ( T2.product_id ) , T1.product_id from Invoice_Line_Items as T1 join Order_Items as T2 on T1.order_item_id = T2.order_item_id group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "How many distinct order ids correspond to each product?",
        "index": 810,
        "GT": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "invoice_line_items"
        ]
    },
    {
        "SQL": "select T2.order_id , count ( * ) from Invoice_Line_Items as T1 join Order_Items as T2 on T1.order_item_id = T2.order_item_id group by T1.product_id",
        "hyp_correct": false,
        "NL_query": "Show order ids and the number of products in each order.",
        "index": 811,
        "GT": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "invoice_line_items"
        ]
    },
    {
        "SQL": "select count ( T2.product_id ) , T1.product_id from Invoice_Line_Items as T1 join Order_Items as T2 on T1.order_item_id = T2.order_item_id group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "How many different products correspond to each order id?",
        "index": 812,
        "GT": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "DB": "customers_and_invoices",
        "tables": [
            "order_items",
            "invoice_line_items"
        ]
    },
    {
        "SQL": "select sum ( T1.balance ) from SAVINGS as T1 join ACCOUNTS as T2 on T1.custid = T2.custid where T2.name = \"Brown\"",
        "hyp_correct": false,
        "NL_query": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.",
        "index": 815,
        "GT": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select count ( * ) , T1.custid from ACCOUNTS as T1 join CHECKING as T2 on T1.custid = T2.custid group by T2.custid",
        "hyp_correct": false,
        "NL_query": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "index": 818,
        "GT": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name , sum ( T2.balance ) from ACCOUNTS as T1 join SAVINGS as T2 on T1.custid = T2.custid group by T1.custid",
        "hyp_correct": false,
        "NL_query": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "index": 820,
        "GT": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "DB": "small_bank_1",
        "tables": [
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select sum ( T1.balance ) , T2.balance from SAVINGS as T1 join CHECKING as T2 on T1.custid = T2.custid order by T1.balance",
        "hyp_correct": false,
        "NL_query": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "index": 821,
        "GT": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings"
        ]
    },
    {
        "SQL": "select sum () , T1.balance from SAVINGS as T1 join CHECKING as T2 on T1.custid = T2.custid order by T2.balance",
        "hyp_correct": false,
        "NL_query": "What is the sum of checking and savings balances for all customers, ordered by the total balance?",
        "index": 822,
        "GT": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings"
        ]
    },
    {
        "SQL": "select County , count ( * ) from School group by County",
        "hyp_correct": false,
        "NL_query": "Show each county along with the number of schools and total enrollment in each county.",
        "index": 829,
        "GT": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",
        "DB": "school_finance",
        "tables": [
            "school"
        ]
    },
    {
        "SQL": "select count ( * ) from School as T1 join endowment as T2 on T1.School_id = T2.School_id where T1.School_name = \"Glenn\"",
        "hyp_correct": false,
        "NL_query": "How many donors have endowment for school named \"Glenn\"?",
        "index": 830,
        "GT": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"",
        "DB": "school_finance",
        "tables": [
            "endowment",
            "school"
        ]
    },
    {
        "SQL": "select T1.School_name from School as T1 join endowment as T2 on T1.School_id = T2.School_id where T2.amount <= 10",
        "hyp_correct": false,
        "NL_query": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "index": 831,
        "GT": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "DB": "school_finance",
        "tables": [
            "endowment",
            "school"
        ]
    },
    {
        "SQL": "select count ( * ) from budget where Year >= 3000",
        "hyp_correct": false,
        "NL_query": "How many budgets are above 3000 in year 2001 or before?",
        "index": 833,
        "GT": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "DB": "school_finance",
        "tables": [
            "budget"
        ]
    },
    {
        "SQL": "select count ( * ) from budget where Year < 2001 or Budgeted > 3000",
        "hyp_correct": false,
        "NL_query": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "index": 834,
        "GT": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "DB": "school_finance",
        "tables": [
            "budget"
        ]
    },
    {
        "SQL": "select T2.School_name , T1.Budgeted , T1.total_budget_percent_budgeted from budget as T1 join School as T2 on T1.School_id = T2.School_id where T1.Year >= 2002",
        "hyp_correct": false,
        "NL_query": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "index": 835,
        "GT": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "DB": "school_finance",
        "tables": [
            "school",
            "budget"
        ]
    },
    {
        "SQL": "select sum ( T1.total_budget_percent_budgeted ) from budget as T1 join School as T2 on T1.School_id = T2.School_id where T2.School_name = \"Glenn\"",
        "hyp_correct": false,
        "NL_query": "What is the total budget amount for school \"Glenn\" in all years?",
        "index": 836,
        "GT": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'",
        "DB": "school_finance",
        "tables": [
            "school",
            "budget"
        ]
    },
    {
        "SQL": "select Institution , Location from Institution where Type = 1990",
        "hyp_correct": false,
        "NL_query": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "index": 841,
        "GT": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
        "DB": "protein_institute",
        "tables": [
            "institution"
        ]
    },
    {
        "SQL": "select Type , count ( Enrollment ) from Institution group by Type",
        "hyp_correct": false,
        "NL_query": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "index": 842,
        "GT": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE",
        "DB": "protein_institute",
        "tables": [
            "institution"
        ]
    },
    {
        "SQL": "select Type from Institution where Founded > 1990 group by Institution having count ( Enrollment ) >= 1000",
        "hyp_correct": false,
        "NL_query": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "index": 843,
        "GT": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "DB": "protein_institute",
        "tables": [
            "institution"
        ]
    },
    {
        "SQL": "select T2.coupon_id from Discount_Coupons as T1 join Customers as T2 on T1.coupon_id = T2.coupon_id where T2.good_or_bad_customer = 500 or T1.coupon_amount = 1",
        "hyp_correct": false,
        "NL_query": "Are the customers holding coupons with amount 500 bad or good?",
        "index": 847,
        "GT": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "DB": "products_for_hire",
        "tables": [
            "discount_coupons",
            "customers"
        ]
    },
    {
        "SQL": "select first_name , last_name , gender_mf from Customers order by good_or_bad_customer",
        "hyp_correct": false,
        "NL_query": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "index": 851,
        "GT": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name",
        "DB": "products_for_hire",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select max ( booked_count ) , min ( booked_amount ) , avg ( booked_count ) from Products_Booked",
        "hyp_correct": false,
        "NL_query": "What are the maximum, minimum, and average booked count for the products booked?",
        "index": 852,
        "GT": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked",
        "DB": "products_for_hire",
        "tables": [
            "products_booked"
        ]
    },
    {
        "SQL": "select payment_date from Payments where amount_paid > 300 or payment_type_code = Check",
        "hyp_correct": false,
        "NL_query": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "index": 854,
        "GT": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'",
        "DB": "products_for_hire",
        "tables": [
            "payments"
        ]
    },
    {
        "SQL": "select product_name , product_description from Products_for_Hire where daily_hire_cost < 'Cutlery' and product_type_code = 20",
        "hyp_correct": false,
        "NL_query": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "index": 855,
        "GT": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20",
        "DB": "products_for_hire",
        "tables": [
            "products_for_hire"
        ]
    },
    {
        "SQL": "select Join_Year from pilot order by Rank desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the joined year of the pilot of the highest rank?",
        "index": 858,
        "GT": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
        "DB": "pilot_record",
        "tables": [
            "pilot"
        ]
    },
    {
        "SQL": "select T2.Pilot_name from pilot_record as T1 join pilot as T2 on T1.Pilot_ID = T2.Pilot_ID group by T1.Pilot_ID having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "Show names of pilots that have more than one record.",
        "index": 862,
        "GT": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "DB": "pilot_record",
        "tables": [
            "pilot_record",
            "pilot"
        ]
    },
    {
        "SQL": "select role_code from Employees where employee_name = \"Koby\"",
        "hyp_correct": false,
        "NL_query": "What is the role of the employee named Koby?",
        "index": 863,
        "GT": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "roles"
        ]
    },
    {
        "SQL": "select T1.role_description , count () , T2.role_code from Roles as T1 join Employees as T2 on T1.role_code = T2.role_code group by T2.employee_id",
        "hyp_correct": false,
        "NL_query": "How many employees does each role have? List role description, id and number of employees.",
        "index": 865,
        "GT": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "roles"
        ]
    },
    {
        "SQL": "select role_description , count ( * ) from Roles group by role_description having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "List roles that have more than one employee. List the role description and number of employees.",
        "index": 866,
        "GT": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "roles"
        ]
    },
    {
        "SQL": "select document_status_description from Ref_Document_Status where document_status_code = 1",
        "hyp_correct": false,
        "NL_query": "What is the document status description of the document with id 1?",
        "index": 867,
        "GT": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "ref_document_status",
            "documents"
        ]
    },
    {
        "SQL": "select document_id , document_status_code from Documents where document_type_code = \"paper\"",
        "hyp_correct": false,
        "NL_query": "List the document ids for any documents with the status code done and the type code paper.",
        "index": 868,
        "GT": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "select shipping_agent_name from Ref_Shipping_Agents where shipping_agent_code = 2",
        "hyp_correct": false,
        "NL_query": "What is the name of the shipping agent of the document with id 2?",
        "index": 869,
        "GT": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "ref_shipping_agents",
            "documents"
        ]
    },
    {
        "SQL": "select count ( * ) from Documents where shipping_agent_code = \"USPS\"",
        "hyp_correct": false,
        "NL_query": "How many documents were shipped by USPS?",
        "index": 870,
        "GT": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "ref_shipping_agents",
            "documents"
        ]
    },
    {
        "SQL": "select mailed_to_address_id from Documents_Mailed where document_id = 4",
        "hyp_correct": false,
        "NL_query": "What address was the document with id 4 mailed to?",
        "index": 871,
        "GT": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "documents_mailed",
            "addresses"
        ]
    },
    {
        "SQL": "select count ( * ) , T2.employee_id from Employees as T1 join Circulation_History as T2 on T1.employee_id = T2.employee_id group by T2.employee_id , count () >= 1",
        "hyp_correct": false,
        "NL_query": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "index": 874,
        "GT": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "circulation_history"
        ]
    },
    {
        "SQL": "select T3.Event_ID , T1.Participant_Details from Participants as T1 join Participants_in_Events as T2 on T1.Participant_ID = T2.Participant_ID join Events as T3 on T2.Event_ID = T3.Event_ID group by T2.Participant_ID having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "What are the ids and details of events that have more than one participants?",
        "index": 876,
        "GT": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
        "DB": "local_govt_in_alabama",
        "tables": [
            "events",
            "participants_in_events",
            "participants"
        ]
    },
    {
        "SQL": "select T1.Participant_ID , T1.Participant_Type_Code , count () from Participants as T1 join Participants_in_Events as T2 on T1.Participant_ID = T2.Participant_ID group by T2.Participant_ID",
        "hyp_correct": false,
        "NL_query": "How many events have each participants attended? List the participant id, type and the number.",
        "index": 877,
        "GT": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
        "DB": "local_govt_in_alabama",
        "tables": [
            "participants_in_events",
            "participants"
        ]
    },
    {
        "SQL": "select Name from people except select Investor from entrepreneur where Investor > \"Rachel Elnaugh\"",
        "hyp_correct": false,
        "NL_query": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "index": 883,
        "GT": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select sum ( T1.Money_Requested ) from entrepreneur as T1 join people as T2 on T1.People_ID = T2.People_ID where T2.Height > 85.",
        "hyp_correct": false,
        "NL_query": "What is the total money requested by entrepreneurs with height more than 1.85?",
        "index": 886,
        "GT": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select sum ( T1.Money_Requested ) from entrepreneur as T1 join people as T2 on T1.People_ID = T2.People_ID where T2.Height > 85.",
        "hyp_correct": false,
        "NL_query": "Give the total money requested by entrepreneurs who are taller than 1.85.",
        "index": 887,
        "GT": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select T2.Name , T1.Company from entrepreneur as T1 join people as T2 on T1.People_ID = T2.People_ID order by T1.Money_Requested desc",
        "hyp_correct": false,
        "NL_query": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "index": 892,
        "GT": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select Investor , Money_Requested from entrepreneur order by Money_Requested desc",
        "hyp_correct": false,
        "NL_query": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "index": 893,
        "GT": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select Country from perpetrator where Country != \"China\"",
        "hyp_correct": false,
        "NL_query": "What are the names of perpetrators whose country is not \"China\"?",
        "index": 895,
        "GT": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
        "DB": "perpetrator",
        "tables": [
            "perpetrator",
            "people"
        ]
    },
    {
        "SQL": "select sum ( T2.Killed ) from people as T1 join perpetrator as T2 on T1.People_ID = T2.People_ID where T1.Height > 84.",
        "hyp_correct": false,
        "NL_query": "What is the total kills of the perpetrators with height more than 1.84.",
        "index": 896,
        "GT": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
        "DB": "perpetrator",
        "tables": [
            "perpetrator",
            "people"
        ]
    },
    {
        "SQL": "select Country from perpetrator group by Country having count ( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "What are the countries that have at least two perpetrators?",
        "index": 899,
        "GT": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2",
        "DB": "perpetrator",
        "tables": [
            "perpetrator"
        ]
    },
    {
        "SQL": "select Year from perpetrator order by Year desc",
        "hyp_correct": false,
        "NL_query": "List the names of perpetrators in descending order of the year.",
        "index": 900,
        "GT": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
        "DB": "perpetrator",
        "tables": [
            "perpetrator",
            "people"
        ]
    },
    {
        "SQL": "select Poll_Source from candidate where Support_rate = 1",
        "hyp_correct": false,
        "NL_query": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "index": 908,
        "GT": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "select avg ( Height ) , avg ( Weight ) from people where Sex = \"m\"",
        "hyp_correct": false,
        "NL_query": "Find the average height and weight for all males (sex is M).",
        "index": 909,
        "GT": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "DB": "candidate_poll",
        "tables": [
            "people"
        ]
    },
    {
        "SQL": "select avg ( Height ) , avg ( Weight ) from people where Sex = \"m\"",
        "hyp_correct": false,
        "NL_query": "What are the average height and weight across males (sex is M)?",
        "index": 910,
        "GT": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "DB": "candidate_poll",
        "tables": [
            "people"
        ]
    },
    {
        "SQL": "select T1.Name , T1.Sex , T2.Oppose_rate from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID group by T1.Sex",
        "hyp_correct": false,
        "NL_query": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "index": 915,
        "GT": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "DB": "candidate_poll",
        "tables": [
            "candidate",
            "people"
        ]
    },
    {
        "SQL": "select T1.Sex , T1.Name , T2.Oppose_rate from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID",
        "hyp_correct": false,
        "NL_query": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "index": 916,
        "GT": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "DB": "candidate_poll",
        "tables": [
            "candidate",
            "people"
        ]
    },
    {
        "SQL": "select T1.Name from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID where T2.Support_rate < ( select Oppose_rate from candidate where Support_rate < 1",
        "hyp_correct": false,
        "NL_query": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "index": 917,
        "GT": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "DB": "candidate_poll",
        "tables": [
            "candidate",
            "people"
        ]
    },
    {
        "SQL": "select T1.Name from people as T1 join candidate as T2 on T1.People_ID = T2.People_ID where T2.Support_rate < ( select Oppose_rate from candidate where Consider_rate = 1 )",
        "hyp_correct": false,
        "NL_query": "What are the names of candidates who have a lower support rate than oppose rate?",
        "index": 918,
        "GT": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "DB": "candidate_poll",
        "tables": [
            "candidate",
            "people"
        ]
    },
    {
        "SQL": "select max ( Support_rate ) , Consider_rate , Oppose_rate from candidate group by Support_rate",
        "hyp_correct": false,
        "NL_query": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "index": 921,
        "GT": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "select max ( Support_rate ) , min ( Oppose_rate ) , Consider_rate from candidate group by Oppose_rate",
        "hyp_correct": false,
        "NL_query": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "index": 922,
        "GT": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "DB": "candidate_poll",
        "tables": [
            "candidate"
        ]
    },
    {
        "SQL": "select Governor , Comptroller from party where Party = \"democratic\"",
        "hyp_correct": false,
        "NL_query": "Show the lieutenant governor and comptroller from the democratic party.",
        "index": 929,
        "GT": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "select Governor , Comptroller from party where Party = \"democratic\"",
        "hyp_correct": false,
        "NL_query": "Who are the lieutenant governor and comptroller from the democratic party?",
        "index": 930,
        "GT": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "select Delegate from election",
        "hyp_correct": false,
        "NL_query": "For each delegate, find the names of the party they are part of.",
        "index": 940,
        "GT": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "select Party from party where Governor = 1",
        "hyp_correct": false,
        "NL_query": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "index": 942,
        "GT": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "select T1.Committee from election as T1 join party as T2 on T1.Party = T2.Party_ID where T2.Party = \"Democratic party\"",
        "hyp_correct": false,
        "NL_query": "Return all the committees that have delegates from Democratic party.",
        "index": 943,
        "GT": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "select T1.County_name , count ( * ) from county as T1 join election as T2 on T1.County_Id = T2.District join party as T3 on T2.Party = T3.Party_ID group by T1.County_name",
        "hyp_correct": false,
        "NL_query": "Show the name of each county along with the corresponding number of delegates from that county.",
        "index": 945,
        "GT": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "DB": "election",
        "tables": [
            "county",
            "party",
            "election"
        ]
    },
    {
        "SQL": "select T1.County_name , count ( * ) from county as T1 join election as T2 on T1.County_Id = T2.District join party as T3 on T2.Party = T3.Party_ID group by T1.County_name",
        "hyp_correct": false,
        "NL_query": "For each county, find the name of the county and the number of delegates from that county.",
        "index": 946,
        "GT": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "DB": "election",
        "tables": [
            "county",
            "party",
            "election"
        ]
    },
    {
        "SQL": "select Party , count ( * ) from party group by Party",
        "hyp_correct": false,
        "NL_query": "Show the name of each party and the corresponding number of delegates from that party.",
        "index": 947,
        "GT": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "select Party , count ( * ) from party group by Party",
        "hyp_correct": false,
        "NL_query": "For each party, return the name of the party and the number of delegates from that party.",
        "index": 948,
        "GT": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "select County_name from county group by County_name having count ( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "Show the names of counties that have at least two delegates.",
        "index": 953,
        "GT": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "DB": "election",
        "tables": [
            "county",
            "election"
        ]
    },
    {
        "SQL": "select County_name from county group by County_name having count ( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "Which counties have two or more delegates? Give me the county names.",
        "index": 954,
        "GT": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "DB": "election",
        "tables": [
            "county",
            "election"
        ]
    },
    {
        "SQL": "select city , state from bank where city = \"morningside\"",
        "hyp_correct": false,
        "NL_query": "What city and state is the bank with the name morningside in?",
        "index": 964,
        "GT": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
        "DB": "loan_1",
        "tables": [
            "bank"
        ]
    },
    {
        "SQL": "select state , acc_type , acc_bal from customer where no_of_loans > \"loan\"",
        "hyp_correct": false,
        "NL_query": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "index": 965,
        "GT": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select T1.state , T1.acc_type , T1.acc_bal from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID where T1.no_of_loans != \"2\" group by T2.loan_type",
        "hyp_correct": false,
        "NL_query": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "index": 966,
        "GT": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select sum ( T1.acc_bal ) from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID where T1.state = \"Utah\" or T2.state = \"Texas\"",
        "hyp_correct": false,
        "NL_query": "Find the total account balance of each customer from Utah or Texas.",
        "index": 969,
        "GT": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select cust_name from customer group by branch_ID order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the branch name of the bank that has the most number of customers.",
        "index": 971,
        "GT": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select T1.cust_name from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID group by T2.no_of_customers order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the bank branch with the greatest number of customers?",
        "index": 972,
        "GT": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select acc_type , avg ( acc_bal ) from customer group by acc_type having avg ( credit_score ) < 50",
        "hyp_correct": false,
        "NL_query": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "index": 977,
        "GT": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select acc_type , avg ( acc_bal ) from customer group by acc_type having avg ( credit_score ) < 50",
        "hyp_correct": false,
        "NL_query": "What is the average account balance of customers with credit score below 50 for the different account types?",
        "index": 978,
        "GT": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select state , sum ( acc_bal ) from customer group by state having sum ( no_of_loans ) > 100",
        "hyp_correct": false,
        "NL_query": "For each state, find the total account balance of customers whose credit score is above 100.",
        "index": 979,
        "GT": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select sum ( T2.amount ) , T1.branch_ID from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID group by T2.branch_ID",
        "hyp_correct": false,
        "NL_query": "Find the total amount of loans offered by each bank branch.",
        "index": 981,
        "GT": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "select sum ( T2.amount ) , T2.branch_ID from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID group by T1.branch_ID",
        "hyp_correct": false,
        "NL_query": "What are the names of the different bank branches, and what are their total loan amounts?",
        "index": 982,
        "GT": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "select T1.cust_name , T1.acc_bal from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID where T2.amount > 5000 group by T1.credit_score",
        "hyp_correct": false,
        "NL_query": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "index": 985,
        "GT": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select T1.cust_name , T1.acc_bal from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID where T1.no_of_loans > 5000 group by T2.cust_ID",
        "hyp_correct": false,
        "NL_query": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "index": 986,
        "GT": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select cust_name , credit_score from customer",
        "hyp_correct": false,
        "NL_query": "Find the name and credit score of the customers who have some loans.",
        "index": 987,
        "GT": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select cust_name , credit_score from customer where no_of_loans > 'loan'",
        "hyp_correct": false,
        "NL_query": "What are the different names and credit scores of customers who have taken a loan?",
        "index": 988,
        "GT": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select T2.city , T1.branch_ID from loan as T1 join bank as T2 on T1.branch_ID = T2.branch_ID",
        "hyp_correct": false,
        "NL_query": "Find the city and name of bank branches that provide business loans.",
        "index": 991,
        "GT": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "DB": "loan_1",
        "tables": [
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "select city , city from bank",
        "hyp_correct": false,
        "NL_query": "What are the names and cities of bank branches that offer loans for business?",
        "index": 992,
        "GT": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "DB": "loan_1",
        "tables": [
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "select T1.maintenance_contract_id , T2.maintenance_contract_id from Maintenance_Contracts as T1 join Assets as T2 on T1.maintenance_contract_id = T2.maintenance_contract_id group by T2.maintenance_contract_id",
        "hyp_correct": false,
        "NL_query": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "index": 995,
        "GT": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "DB": "assets_maintenance",
        "tables": [
            "maintenance_contracts",
            "assets"
        ]
    },
    {
        "SQL": "select count ( * ) from Asset_Parts as T1 join Assets as T2 on T1.asset_id = T2.asset_id group by T2.supplier_company_id",
        "hyp_correct": false,
        "NL_query": "How many assets does each third party company supply? List the count and the company id.",
        "index": 996,
        "GT": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "DB": "assets_maintenance",
        "tables": [
            "asset_parts",
            "assets",
            "third_party_companies"
        ]
    },
    {
        "SQL": "select T1.part_name , T2.part_id from Parts as T1 join Part_Faults as T2 on T1.part_id = T2.part_id join Fault_Log_Parts as T3 on T2.part_fault_id = T3.part_fault_id group by Fault_Log_T1.part_fault_id having count ( * ) > 2",
        "hyp_correct": false,
        "NL_query": "Which parts have more than 2 faults? Show the part name and id.",
        "index": 997,
        "GT": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
        "DB": "assets_maintenance",
        "tables": [
            "fault_log_parts",
            "parts",
            "part_faults"
        ]
    },
    {
        "SQL": "select T1.first_name , T1.last_name , T1.other_details , T7.skill_description from Maintenance_Engineers as T1 join Engineer_Visits as T2 on T1.engineer_id = T2.engineer_id join Fault_Log as T3 on T2.fault_log_entry_id = T3.fault_log_entry_id join Fault_Log_Parts as T4 on T3.fault_log_entry_id = T4.fault_log_entry_id join Part_Faults as T5 on T4.part_fault_id = T5.part_fault_id join Skills_Required_To_Fix as T6 on T5.part_fault_id = T6.part_fault_id join Skills as T7 on T6.skill_id = T7.skill_id",
        "hyp_correct": false,
        "NL_query": "List all every engineer's first name, last name, details and coresponding skill description.",
        "index": 998,
        "GT": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "DB": "assets_maintenance",
        "tables": [
            "skills",
            "maintenance_engineers",
            "fault_log",
            "skills_required_to_fix",
            "engineer_skills",
            "fault_log_parts",
            "engineer_visits",
            "part_faults"
        ]
    },
    {
        "SQL": "select T1.part_name , T2.fault_description from Parts as T1 join Part_Faults as T2 on T1.part_id = T2.part_id",
        "hyp_correct": false,
        "NL_query": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "index": 999,
        "GT": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "DB": "assets_maintenance",
        "tables": [
            "skills_required_to_fix",
            "parts",
            "skills",
            "part_faults"
        ]
    },
    {
        "SQL": "select T1.part_name , count () from Parts as T1 join Asset_Parts as T2 on T1.part_id = T2.part_id group by T1.part_name",
        "hyp_correct": false,
        "NL_query": "How many assets can each parts be used in? List the part name and the number.",
        "index": 1000,
        "GT": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
        "DB": "assets_maintenance",
        "tables": [
            "parts",
            "asset_parts"
        ]
    },
    {
        "SQL": "select T1.fault_description , T2.fault_status from Part_Faults as T1 join Fault_Log_Parts as T2 on T1.part_fault_id = T2.part_fault_id",
        "hyp_correct": false,
        "NL_query": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "index": 1001,
        "GT": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
        "DB": "assets_maintenance",
        "tables": [
            "fault_log_parts",
            "fault_log",
            "part_faults"
        ]
    },
    {
        "SQL": "select asset_make , asset_model , asset_details , asset_disposed_date from Assets order by asset_disposed_date",
        "hyp_correct": false,
        "NL_query": "List the all the assets make, model, details by the disposed date ascendingly.",
        "index": 1005,
        "GT": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "DB": "assets_maintenance",
        "tables": [
            "assets"
        ]
    },
    {
        "SQL": "select train_number , name from train order by time desc",
        "hyp_correct": false,
        "NL_query": "show all train numbers and names ordered by their time from early to late.",
        "index": 1009,
        "GT": "SELECT train_number ,  name FROM train ORDER BY TIME",
        "DB": "station_weather",
        "tables": [
            "train"
        ]
    },
    {
        "SQL": "select count ( * ) from train where name like \"% Express %\"",
        "hyp_correct": false,
        "NL_query": "How many trains have 'Express' in their names?",
        "index": 1011,
        "GT": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
        "DB": "station_weather",
        "tables": [
            "train"
        ]
    },
    {
        "SQL": "select train_number , time from train where origin = \"Chennai\"",
        "hyp_correct": false,
        "NL_query": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "index": 1012,
        "GT": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'",
        "DB": "station_weather",
        "tables": [
            "train"
        ]
    },
    {
        "SQL": "select T3.name , T1.network_name , T1.services from station as T1 join route as T2 on T1.id = T2.station_id join train as T3 on T2.train_id = T3.id group by T1.network_name",
        "hyp_correct": false,
        "NL_query": "Find the number of trains for each station, as well as the station network name and services.",
        "index": 1014,
        "GT": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
        "DB": "station_weather",
        "tables": [
            "route",
            "train",
            "station"
        ]
    },
    {
        "SQL": "select avg ( low_temperature ) , day_of_week from weekly_weather group by day_of_week",
        "hyp_correct": false,
        "NL_query": "What is the average high temperature for each day of week?",
        "index": 1015,
        "GT": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
        "DB": "station_weather",
        "tables": [
            "weekly_weather"
        ]
    },
    {
        "SQL": "select T1.station_id , T2.local_authority from weekly_weather as T1 join station as T2 on T1.station_id = T2.id where T1.precipitation > 50",
        "hyp_correct": false,
        "NL_query": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "index": 1016,
        "GT": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "DB": "station_weather",
        "tables": [
            "weekly_weather",
            "station"
        ]
    },
    {
        "SQL": "select low_temperature , high_temperature , wind_speed_mph from weekly_weather order by day_of_week limit 1",
        "hyp_correct": false,
        "NL_query": "show the lowest low temperature and highest wind speed in miles per hour.",
        "index": 1017,
        "GT": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "DB": "station_weather",
        "tables": [
            "weekly_weather"
        ]
    },
    {
        "SQL": "select max ( Gold ) , min ( Silver ) from club_rank",
        "hyp_correct": false,
        "NL_query": "What are the maximum and minimum number of silver medals for clubs.",
        "index": 1020,
        "GT": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "DB": "sports_competition",
        "tables": [
            "club_rank"
        ]
    },
    {
        "SQL": "select max ( Gold ) , min ( Silver ) from club_rank",
        "hyp_correct": false,
        "NL_query": "What are the maximum and minimum number of silver medals for all the clubs?",
        "index": 1021,
        "GT": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "DB": "sports_competition",
        "tables": [
            "club_rank"
        ]
    },
    {
        "SQL": "select T1.name , T2.Club_ID from club as T1 join player as T2 on T1.Club_ID = T2.Club_ID",
        "hyp_correct": false,
        "NL_query": "Please show the names and the players of clubs.",
        "index": 1022,
        "GT": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "DB": "sports_competition",
        "tables": [
            "player",
            "club"
        ]
    },
    {
        "SQL": "select T1.name , T2.Club_ID from club as T1 join player as T2 on T1.Club_ID = T2.Club_ID",
        "hyp_correct": false,
        "NL_query": "What are the names and players of all the clubs?",
        "index": 1023,
        "GT": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "DB": "sports_competition",
        "tables": [
            "player",
            "club"
        ]
    },
    {
        "SQL": "select song_name from song order by limit 1 ( song_name ) desc",
        "hyp_correct": false,
        "NL_query": "What is the name of the song that was released in the most recent year?",
        "index": 1034,
        "GT": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select song_name from song order by releasedate desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the song that was released most recently?",
        "index": 1035,
        "GT": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select f_id from song order by releasedate desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the id of the longest song?",
        "index": 1036,
        "GT": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select f_id from song order by limit 1 ( song_name ) desc",
        "hyp_correct": false,
        "NL_query": "Find the id of the song that lasts the longest.",
        "index": 1037,
        "GT": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select country , country from song where rating > 9",
        "hyp_correct": false,
        "NL_query": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "index": 1038,
        "GT": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.country , T2.country from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.rating > 9",
        "hyp_correct": false,
        "NL_query": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
        "index": 1039,
        "GT": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select count ( T2.song_name ) from files as T1 join song as T2 on T1.f_id = T2.f_id where T1.duration = 4",
        "hyp_correct": false,
        "NL_query": "How many songs have 4 minute duration?",
        "index": 1042,
        "GT": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select count ( * ) from song where song_name = 4",
        "hyp_correct": false,
        "NL_query": "What is the count of the songs that last approximately 4 minutes?",
        "index": 1043,
        "GT": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select avg ( T2.rating ) from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T1.gender = 'f'",
        "hyp_correct": false,
        "NL_query": "What is the average rating of songs produced by female artists?",
        "index": 1044,
        "GT": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select avg () from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T1.gender = \"f\"",
        "hyp_correct": false,
        "NL_query": "How many songs, on average, are sung by a female artist?",
        "index": 1045,
        "GT": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.country from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T1.gender = \"female\" and T2.genre_is = \"Bangla\"",
        "hyp_correct": false,
        "NL_query": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "index": 1046,
        "GT": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.country from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.languages = \"Bangla\" and T1.gender = 1",
        "hyp_correct": false,
        "NL_query": "What countries are the female artists who sung in the language Bangla from?",
        "index": 1047,
        "GT": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select avg ( T1.duration ) from files as T1 join song as T2 on T1.f_id = T2.f_id where T1.formats = 800 and T2.resolution < 1",
        "hyp_correct": false,
        "NL_query": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "index": 1048,
        "GT": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select avg ( T1.duration ) from files as T1 join song as T2 on T1.f_id = T2.f_id where T1.formats = 800 and T2.resolution < 1",
        "hyp_correct": false,
        "NL_query": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?",
        "index": 1049,
        "GT": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select count ( * ) , gender from artist where gender = \"\" group by gender",
        "hyp_correct": false,
        "NL_query": "How many artists are male and how many are female?",
        "index": 1051,
        "GT": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "select formats , count ( artist_name ) from files group by formats",
        "hyp_correct": false,
        "NL_query": "For each file format, return the number of artists who released songs in that format.",
        "index": 1054,
        "GT": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "DB": "music_1",
        "tables": [
            "files"
        ]
    },
    {
        "SQL": "select T1.formats , count ( * ) from files as T1 join song as T2 on T1.f_id = T2.f_id group by T2.genre_is",
        "hyp_correct": false,
        "NL_query": "How many songs were released for each format?",
        "index": 1055,
        "GT": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select T1.g_name , T1.rating from genre as T1 join song as T2 on T1.g_name = T2.genre_is order by T2.rating",
        "hyp_correct": false,
        "NL_query": "List the names of all genres in alphabetical oder, together with its ratings.",
        "index": 1056,
        "GT": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "select T1.g_name , T1.rating from genre as T1 join song as T2 on T1.g_name = T2.genre_is order by T2.rating",
        "hyp_correct": false,
        "NL_query": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "index": 1057,
        "GT": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "select artist_name from artist where gender = 'm'",
        "hyp_correct": false,
        "NL_query": "What are the names of all male British artists?",
        "index": 1059,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "select song_name from song where genre_is = \"modern\" or languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "Find the names of songs whose genre is modern or language is English.",
        "index": 1060,
        "GT": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select song_name from song where languages = \"modern\" or genre_is = \"English\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the songs that are modern or sung in English?",
        "index": 1061,
        "GT": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select avg ( rating ) , avg ( resolution ) from song where genre_is = \"Bangla\"",
        "hyp_correct": false,
        "NL_query": "What are the average rating and resolution of songs that are in Bangla?",
        "index": 1062,
        "GT": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select avg ( rating ) , avg ( resolution ) from song where genre_is = \"bangla\"",
        "hyp_correct": false,
        "NL_query": "What is the average rating and resolution of all bangla songs?",
        "index": 1063,
        "GT": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select T2.f_id , T2.genre_is , T2.artist_name from genre as T1 join song as T2 on T1.g_name = T2.genre_is where T2.rating order by T1.rating",
        "hyp_correct": false,
        "NL_query": "List the id, genre and artist name of English songs ordered by rating.",
        "index": 1064,
        "GT": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "select T2.f_id , T2.genre_is , T1.g_name , T2.artist_name from genre as T1 join song as T2 on T1.g_name = T2.genre_is order by T2.rating",
        "hyp_correct": false,
        "NL_query": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "index": 1065,
        "GT": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "select avg ( T2.salary ) from team_franchise as T1 join salary as T2 where T1.franchise_name = \"Boston Red Stockings\"",
        "hyp_correct": false,
        "NL_query": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "index": 1066,
        "GT": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'",
        "DB": "baseball_1",
        "tables": [
            "team_franchise",
            "salary",
            "team"
        ]
    },
    {
        "SQL": "select avg ( T2.salary ) from team_franchise as T1 join salary as T2 where T1.franchise_name = \"Boston Red Stockings\"",
        "hyp_correct": false,
        "NL_query": "Compute the average salary of the players in the team called 'Boston Red Stockings'.",
        "index": 1067,
        "GT": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'",
        "DB": "baseball_1",
        "tables": [
            "team_franchise",
            "salary",
            "team"
        ]
    },
    {
        "SQL": "select T2.name_first , T2.name_last from pitching as T1 join player as T2 where T1.year = 1998",
        "hyp_correct": false,
        "NL_query": "What are first and last names of players participating in all star game in 1998?",
        "index": 1068,
        "GT": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "DB": "baseball_1",
        "tables": [
            "player",
            "all_star",
            "pitching"
        ]
    },
    {
        "SQL": "select T1.Name from channel as T1 join broadcast as T2 on T1.Channel_ID = T2.Channel_ID where T2.Time_of_day = 1",
        "hyp_correct": false,
        "NL_query": "Find the names of the channels that are broadcast in the morning.",
        "index": 1070,
        "GT": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "DB": "program_share",
        "tables": [
            "channel",
            "broadcast"
        ]
    },
    {
        "SQL": "select T1.Name from channel as T1 join broadcast as T2 on T1.Channel_ID = T2.Channel_ID where T2.Time_of_day = 1",
        "hyp_correct": false,
        "NL_query": "Which channels are broadcast in the morning? Give me the channel names.",
        "index": 1071,
        "GT": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "DB": "program_share",
        "tables": [
            "channel",
            "broadcast"
        ]
    },
    {
        "SQL": "select count ( * ) , T1.Date from broadcast_share as T1 join broadcast as T2 on T1.Channel_ID = T2.Channel_ID group by T2.Time_of_day",
        "hyp_correct": false,
        "NL_query": "how many programs are broadcast in each time section of the day?",
        "index": 1072,
        "GT": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",
        "DB": "program_share",
        "tables": [
            "broadcast_share",
            "broadcast"
        ]
    },
    {
        "SQL": "select count ( * ) , T2.Time_of_day from broadcast_share as T1 join broadcast as T2 on T1.Channel_ID = T2.Channel_ID group by T1.Date",
        "hyp_correct": false,
        "NL_query": "Count the number of programs broadcast for each time section of a day.",
        "index": 1073,
        "GT": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",
        "DB": "program_share",
        "tables": [
            "broadcast_share",
            "broadcast"
        ]
    },
    {
        "SQL": "select Name from channel where Owner = \"CCTV\" or limit \"HBS\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the channels owned by CCTV or HBS?",
        "index": 1074,
        "GT": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'",
        "DB": "program_share",
        "tables": [
            "channel"
        ]
    },
    {
        "SQL": "select T3.Name , T1.Phone from Patient as T1 join Appointment as T2 on T1.SSN = T2.Patient join Physician as T3 on T1.PCP = T3.EmployeeID group by T2.Patient having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "what are name and phone number of patients who had more than one appointment?",
        "index": 1078,
        "GT": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "physician",
            "appointment"
        ]
    },
    {
        "SQL": "select T3.Name , count ( * ) from Prescribes as T1 join Appointment as T2 on T1.Appointment = T2.AppointmentID join Physician as T3 on T1.Physician = T3.EmployeeID group by T2.Physician",
        "hyp_correct": false,
        "NL_query": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "index": 1082,
        "GT": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "prescribes",
            "patient",
            "appointment"
        ]
    },
    {
        "SQL": "select T3.Name , count ( * ) from Prescribes as T1 join Undergoes as T2 on T1.Physician = T2.Physician join Nurse as T3 on T2.AssistingNurse = T3.EmployeeID join Physician as T4 on T1.Physician = T4.EmployeeID group by T4.Name",
        "hyp_correct": false,
        "NL_query": "Return the name of each physician and the number of patients he or she treats.",
        "index": 1083,
        "GT": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "undergoes",
            "nurse",
            "physician",
            "prescribes"
        ]
    },
    {
        "SQL": "select T2.Name from Appointment as T1 join Physician as T2 on T1.Physician = T2.EmployeeID group by T1.Physician having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "Find the name of physicians who are in charge of more than one patient.",
        "index": 1084,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "patient",
            "appointment"
        ]
    },
    {
        "SQL": "select T2.Name from Appointment as T1 join Physician as T2 on T1.Physician = T2.EmployeeID group by T1.Physician having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "Which physicians are in charge of more than one patient? Give me their names.",
        "index": 1085,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "patient",
            "appointment"
        ]
    },
    {
        "SQL": "select T1.BlockFloor , count ( * ) from Block as T1 join Room as T2 on T1.BlockFloor = T2.BlockFloor group by T2.BlockFloor",
        "hyp_correct": false,
        "NL_query": "Find the number of rooms located on each block floor.",
        "index": 1086,
        "GT": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
        "DB": "hospital_1",
        "tables": [
            "room",
            "block"
        ]
    },
    {
        "SQL": "select T1.BlockFloor , count ( * ) from Block as T1 join Room as T2 on T1.BlockFloor = T2.BlockFloor group by T2.BlockFloor",
        "hyp_correct": false,
        "NL_query": "How many rooms does each block floor have?",
        "index": 1087,
        "GT": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
        "DB": "hospital_1",
        "tables": [
            "room",
            "block"
        ]
    },
    {
        "SQL": "select T1.BlockCode , count ( * ) from Block as T1 join Room as T2 on T1.BlockFloor = T2.BlockFloor group by T2.BlockCode",
        "hyp_correct": false,
        "NL_query": "Find the number of rooms for different block code?",
        "index": 1088,
        "GT": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "DB": "hospital_1",
        "tables": [
            "room",
            "block"
        ]
    },
    {
        "SQL": "select T1.BlockCode , count ( * ) from Block as T1 join Room as T2 on T1.BlockFloor = T2.BlockFloor group by T2.BlockFloor",
        "hyp_correct": false,
        "NL_query": "How many rooms are located for each block code?",
        "index": 1089,
        "GT": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "DB": "hospital_1",
        "tables": [
            "room",
            "block"
        ]
    },
    {
        "SQL": "select T2.Brand , count ( * ) from Prescribes as T1 join Medication as T2 on T1.Medication = T2.Code group by T2.Brand",
        "hyp_correct": false,
        "NL_query": "Find the number of medications prescribed for each brand.",
        "index": 1090,
        "GT": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "medication"
        ]
    },
    {
        "SQL": "select T2.Brand , count ( * ) from Prescribes as T1 join Medication as T2 on T1.Medication = T2.Code group by T2.Brand",
        "hyp_correct": false,
        "NL_query": "How many medications are prescribed for each brand?",
        "index": 1091,
        "GT": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "medication"
        ]
    },
    {
        "SQL": "select T1.Name from Nurse as T1 join Physician as T2 on T1.EmployeeID = T2.EmployeeID where T2.Name like '%senior%'",
        "hyp_correct": false,
        "NL_query": "Find the name of physicians whose position title contains the word 'senior'.",
        "index": 1092,
        "GT": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "DB": "hospital_1",
        "tables": [
            "nurse",
            "physician"
        ]
    },
    {
        "SQL": "select T4.Name from Medication as T1 join Prescribes as T2 on T1.Code = T2.Medication join Undergoes as T3 on T2.Physician = T3.Physician join Nurse as T4 on T3.AssistingNurse = T4.EmployeeID where T1.Name like '%senior%'",
        "hyp_correct": false,
        "NL_query": "What are the names of the physicians who have 'senior' in their titles.",
        "index": 1093,
        "GT": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "DB": "hospital_1",
        "tables": [
            "undergoes",
            "nurse",
            "medication",
            "physician",
            "prescribes"
        ]
    },
    {
        "SQL": "select Patient from Undergoes order by DateUndergoes desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the patient who has the most recent undergoing treatment?",
        "index": 1094,
        "GT": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "undergoes"
        ]
    },
    {
        "SQL": "select Patient from Undergoes order by DateUndergoes desc limit 1",
        "hyp_correct": false,
        "NL_query": "Which patient is undergoing the most recent treatment?",
        "index": 1095,
        "GT": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "undergoes"
        ]
    },
    {
        "SQL": "select Physician , PrimaryAffiliation from Affiliated_With",
        "hyp_correct": false,
        "NL_query": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "index": 1096,
        "GT": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "affiliated_with"
        ]
    },
    {
        "SQL": "select T2.EmployeeID , T1.Physician , T1.Department from Affiliated_With as T1 join Physician as T2 on T1.Physician = T2.EmployeeID",
        "hyp_correct": false,
        "NL_query": "What are each physician's employee id and department id primarily affiliated.",
        "index": 1097,
        "GT": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "affiliated_with",
            "physician"
        ]
    },
    {
        "SQL": "select T1.Name from Department as T1 join Affiliated_With as T2 on T1.DepartmentID = T2.Department where T2.PrimaryAffiliation != 1",
        "hyp_correct": false,
        "NL_query": "List the names of departments where some physicians are primarily affiliated with.",
        "index": 1098,
        "GT": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "affiliated_with",
            "department"
        ]
    },
    {
        "SQL": "select T1.Name from Department as T1 join Affiliated_With as T2 on T1.DepartmentID = T2.Department where T2.PrimaryAffiliation != 1",
        "hyp_correct": false,
        "NL_query": "What are the names of departments that have primarily affiliated physicians.",
        "index": 1099,
        "GT": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "affiliated_with",
            "department"
        ]
    },
    {
        "SQL": "select T2.Name from On_Call as T1 join Nurse as T2 on T1.Nurse = T2.EmployeeID where T1.BlockFloor = \"block -\" and T1.BlockCode = 1",
        "hyp_correct": false,
        "NL_query": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
        "index": 1100,
        "GT": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1",
        "DB": "hospital_1",
        "tables": [
            "on_call",
            "nurse"
        ]
    },
    {
        "SQL": "select avg ( Cost ) , max ( Cost ) , min ( Cost ) from Procedures group by limit 1",
        "hyp_correct": false,
        "NL_query": "What are the highest cost, lowest cost and average cost of procedures?",
        "index": 1102,
        "GT": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures",
        "DB": "hospital_1",
        "tables": [
            "procedures"
        ]
    },
    {
        "SQL": "select max ( Cost ) , avg ( Cost ) , min ( Cost ) from Procedures",
        "hyp_correct": false,
        "NL_query": "Tell me the highest, lowest, and average cost of procedures.",
        "index": 1103,
        "GT": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures",
        "DB": "hospital_1",
        "tables": [
            "procedures"
        ]
    },
    {
        "SQL": "select Cost from Procedures order by Cost desc limit 3",
        "hyp_correct": false,
        "NL_query": "Find the three most expensive procedures.",
        "index": 1106,
        "GT": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "DB": "hospital_1",
        "tables": [
            "procedures"
        ]
    },
    {
        "SQL": "select Cost from Procedures group by Cost order by count ( * ) desc limit 3",
        "hyp_correct": false,
        "NL_query": "What are the three most costly procedures?",
        "index": 1107,
        "GT": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "DB": "hospital_1",
        "tables": [
            "procedures"
        ]
    },
    {
        "SQL": "select Name from ship where Nationality = 'US' or Nationality = 'UK'",
        "hyp_correct": false,
        "NL_query": "What are the names of the ships  that are from either the US or the UK?",
        "index": 1111,
        "GT": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"",
        "DB": "ship_mission",
        "tables": [
            "ship"
        ]
    },
    {
        "SQL": "select Code , Fate from mission",
        "hyp_correct": false,
        "NL_query": "Show codes and fates of missions, and names of ships involved.",
        "index": 1118,
        "GT": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "DB": "ship_mission",
        "tables": [
            "ship",
            "mission"
        ]
    },
    {
        "SQL": "select Name from company where Industry = 'banking' or Industry = 'retailing'",
        "hyp_correct": false,
        "NL_query": "Show the names of companies in the banking or retailing industry?",
        "index": 1125,
        "GT": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "select Name , count ( Name ) from company",
        "hyp_correct": false,
        "NL_query": "Show the names of companies and of employees.",
        "index": 1129,
        "GT": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID",
        "DB": "company_employee",
        "tables": [
            "employment",
            "company",
            "people"
        ]
    },
    {
        "SQL": "select Name , Sales_in_Billion from company where Profits_in_Billion > 200 order by Profits_in_Billion desc",
        "hyp_correct": false,
        "NL_query": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "index": 1130,
        "GT": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "select min ( Low_Estimate ) , High_Estimate from film_market_estimation",
        "hyp_correct": false,
        "NL_query": "What are the low and high estimates of film markets?",
        "index": 1131,
        "GT": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "DB": "film_rank",
        "tables": [
            "film_market_estimation"
        ]
    },
    {
        "SQL": "select min ( Low_Estimate ) , High_Estimate from film_market_estimation",
        "hyp_correct": false,
        "NL_query": "Return the low and high estimates for all film markets.",
        "index": 1132,
        "GT": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "DB": "film_rank",
        "tables": [
            "film_market_estimation"
        ]
    },
    {
        "SQL": "select avg ( T1.Number_cities ) from market as T1 join film_market_estimation as T2 on T1.Market_ID = T2.Market_ID where T2.High_Estimate > 10000",
        "hyp_correct": false,
        "NL_query": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
        "index": 1139,
        "GT": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
        "DB": "film_rank",
        "tables": [
            "market",
            "film_market_estimation"
        ]
    },
    {
        "SQL": "select Title , Studio from film",
        "hyp_correct": false,
        "NL_query": "How films are produced by each studio?",
        "index": 1144,
        "GT": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "select Title , Studio from film where Title like \"% Universal %\"",
        "hyp_correct": false,
        "NL_query": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "index": 1145,
        "GT": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "select Title , Studio from film where Studio like \"% Universal %\"",
        "hyp_correct": false,
        "NL_query": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
        "index": 1146,
        "GT": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "select organisation_id , organisation_details from Organisations",
        "hyp_correct": false,
        "NL_query": "Find the organisation ids and details of the organisations which are involved in",
        "index": 1149,
        "GT": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
        "DB": "tracking_grants_for_research",
        "tables": [
            "grants",
            "organisations"
        ]
    },
    {
        "SQL": "select T2.organisation_id , T1.organisation_details from Organisations as T1 join Grants as T2 on T1.organisation_id = T2.organisation_id where T2.grant_amount > 6000",
        "hyp_correct": false,
        "NL_query": "What are the ids and details for all organizations that have grants of more than 6000 dollars?",
        "index": 1150,
        "GT": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
        "DB": "tracking_grants_for_research",
        "tables": [
            "grants",
            "organisations"
        ]
    },
    {
        "SQL": "select T2.staff_id , T1.date_from from Project_Staff as T1 join Research_Staff as T2 on T1.staff_id = T2.staff_id where T1.role_code = 'researcher'",
        "hyp_correct": false,
        "NL_query": "When do all the researcher role staff start to work, and when do they stop working?",
        "index": 1151,
        "GT": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "research_staff"
        ]
    },
    {
        "SQL": "select count ( sent_date ) from Documents",
        "hyp_correct": false,
        "NL_query": "When did researchers start and stop working?",
        "index": 1152,
        "GT": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "documents"
        ]
    },
    {
        "SQL": "select date_from from Project_Staff order by date_to limit 1",
        "hyp_correct": false,
        "NL_query": "When did the first staff for the projects started working?",
        "index": 1155,
        "GT": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "select staff_details from Research_Staff order by limit 1 ( staff_id ) asc",
        "hyp_correct": false,
        "NL_query": "When did the first staff member start working?",
        "index": 1156,
        "GT": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "research_staff"
        ]
    },
    {
        "SQL": "select document_description from Document_Types where document_description like \"Initial %\"",
        "hyp_correct": false,
        "NL_query": "Which document type is described with the prefix 'Initial'?",
        "index": 1157,
        "GT": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "document_types"
        ]
    },
    {
        "SQL": "select T5.organisation_type from Document_Types as T1 join Documents as T2 on T1.document_type_code = T2.document_type_code join Grants as T3 on T2.grant_id = T3.grant_id join Organisations as T4 on T3.organisation_id = T4.organisation_id join Organisation_Types as T5 on T4.organisation_type = T5.organisation_type where T1.document_description like 'Initial%'",
        "hyp_correct": false,
        "NL_query": "What is the type of the document whose description starts with the word 'Initial'?",
        "index": 1158,
        "GT": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "grants",
            "organisations",
            "organisation_types",
            "document_types",
            "documents"
        ]
    },
    {
        "SQL": "select T2.organisation_type_description from Organisations as T1 join Organisation_Types as T2 on T1.organisation_type = T2.organisation_type where T1.organisation_type = \"quo\"",
        "hyp_correct": false,
        "NL_query": "Find the organisation type description of the organisation detailed as 'quo'.",
        "index": 1159,
        "GT": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisation_types",
            "organisations"
        ]
    },
    {
        "SQL": "select count ( * ) from Project_Staff where date_from < \"1989 - 04 - 24 23 51 54\" or date_to = 1",
        "hyp_correct": false,
        "NL_query": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "index": 1161,
        "GT": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "select count ( project_id ) from Projects where limit \"1989 - 04 - 24 23 51 54\" in 1",
        "hyp_correct": false,
        "NL_query": "How many project members were leaders or started working before '1989-04-24 23:51:54'?",
        "index": 1162,
        "GT": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "projects"
        ]
    },
    {
        "SQL": "select count ( * ) , T2.task_details from Projects as T1 join Tasks as T2 on T1.project_id = T2.project_id group by T1.project_details",
        "hyp_correct": false,
        "NL_query": "How many tasks does each project have? List the task count and the project detail.",
        "index": 1165,
        "GT": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects",
            "tasks"
        ]
    },
    {
        "SQL": "select project_id , count ( * ) from Tasks group by project_id",
        "hyp_correct": false,
        "NL_query": "For each project id, how many tasks are there?",
        "index": 1166,
        "GT": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects",
            "tasks"
        ]
    },
    {
        "SQL": "select * from Staff_Roles where between \"2003 - 04 - 19 : 15 06 00 33 15 03 20\" and 1",
        "hyp_correct": false,
        "NL_query": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?",
        "index": 1168,
        "GT": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "staff_roles"
        ]
    },
    {
        "SQL": "select count ( * ) from Person as T1 join PersonFriend as T2 on T1.name = T2.name where T1.name = \"Dan\"",
        "hyp_correct": false,
        "NL_query": "How many friends does Dan have?",
        "index": 1169,
        "GT": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select count ( * ) from Person as T1 join PersonFriend as T2 on T1.name = T2.name where T1.name = \"Dan\"",
        "hyp_correct": false,
        "NL_query": "How many friends does Dan have?",
        "index": 1170,
        "GT": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select count ( age ) from Person where age > 30",
        "hyp_correct": false,
        "NL_query": "HOw many engineers are older than 30?",
        "index": 1174,
        "GT": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select job , avg ( age ) from Person group by gender",
        "hyp_correct": false,
        "NL_query": "What is average age of male for different job title?",
        "index": 1179,
        "GT": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select job , avg ( age ) from Person group by gender",
        "hyp_correct": false,
        "NL_query": "What is the average age for a male in each job?",
        "index": 1180,
        "GT": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select job , max ( age ) from Person group by job",
        "hyp_correct": false,
        "NL_query": "How old is the youngest person for each job?",
        "index": 1182,
        "GT": "SELECT min(age) ,  job FROM Person GROUP BY job",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select name , age from Person order by age",
        "hyp_correct": false,
        "NL_query": "Find the name and age of all males in order of their age.",
        "index": 1187,
        "GT": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select name , age from Person order by gender",
        "hyp_correct": false,
        "NL_query": "What is the name and age of every male? Order the results by age.",
        "index": 1188,
        "GT": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select T1.name from Person as T1 join PersonFriend as T2 on T1.name = T2.name where T2.name = \"Bob\"",
        "hyp_correct": false,
        "NL_query": "Find the name of persons who are friends with Bob.",
        "index": 1191,
        "GT": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select name from PersonFriend where friend = \"Alice\"",
        "hyp_correct": false,
        "NL_query": "Who are the friends of Alice that are doctors?",
        "index": 1198,
        "GT": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select T2.friend from Person as T1 join PersonFriend as T2 on T1.name = T2.name where T1.city = \"new york city\"",
        "hyp_correct": false,
        "NL_query": "Who has a friend that is from new york city?",
        "index": 1199,
        "GT": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select T2.name from Person as T1 join PersonFriend as T2 on T1.name = T2.name where T1.city = \"New York\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all friends who are from New York?",
        "index": 1200,
        "GT": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select Name , College_Location from college",
        "hyp_correct": false,
        "NL_query": "Show the leader names and locations of colleges.",
        "index": 1204,
        "GT": "SELECT Leader_Name ,  College_Location FROM college",
        "DB": "decoration_competition",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select T1.Name , T2.Name from member as T1 join college as T2 on T1.College_ID = T2.College_ID order by T1.Name",
        "hyp_correct": false,
        "NL_query": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "index": 1206,
        "GT": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",
        "DB": "decoration_competition",
        "tables": [
            "member",
            "college"
        ]
    },
    {
        "SQL": "select T2.Leader_Name from member as T1 join college as T2 on T1.College_ID = T2.College_ID where T1.Country = \"Canada\"",
        "hyp_correct": false,
        "NL_query": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "index": 1207,
        "GT": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"",
        "DB": "decoration_competition",
        "tables": [
            "member",
            "college"
        ]
    },
    {
        "SQL": "select premises_type , premise_details from Premises order by premises_type , premise_details",
        "hyp_correct": false,
        "NL_query": "Find the types and details for all premises and order by the premise type.",
        "index": 1211,
        "GT": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "premises"
        ]
    },
    {
        "SQL": "select T1.product_category , count () from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id join Customer_Orders as T3 on T2.order_id = T3.order_id join Customers as T4 on T3.customer_id = T4.customer_id join Mailshot_Customers as T5 on T4.customer_id = T5.customer_id join Mailshot_Campaigns as T6 on T5.mailshot_id = T6.mailshot_id group by T6.product_category",
        "hyp_correct": false,
        "NL_query": "Show all distinct product categories along with the number of mailshots in each category.",
        "index": 1213,
        "GT": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "products",
            "mailshot_customers",
            "customer_orders",
            "customers",
            "order_items",
            "mailshot_campaigns"
        ]
    },
    {
        "SQL": "select T1.customer_name , T1.customer_phone from Customers as T1 join Mailshot_Customers as T2 on T1.customer_id = T2.customer_id where Mailshot_T1.outcome_code = 'No Response'",
        "hyp_correct": false,
        "NL_query": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "index": 1214,
        "GT": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "customers",
            "mailshot_customers"
        ]
    },
    {
        "SQL": "select T2.customer_name from Customer_Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.shipping_method_code = \"FedEx\" and T1.order_status_code = \"FedEx\"",
        "hyp_correct": false,
        "NL_query": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "index": 1217,
        "GT": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "customer_orders",
            "customers"
        ]
    },
    {
        "SQL": "select gradepoint , lettergrade from Gradeconversion where lettergrade = \"%\"",
        "hyp_correct": false,
        "NL_query": "Find the max and min grade point for all letter grade.",
        "index": 1218,
        "GT": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "DB": "college_3",
        "tables": [
            "gradeconversion"
        ]
    },
    {
        "SQL": "select max ( T2.gradepoint ) , T1.Grade from Enrolled_in as T1 join Gradeconversion as T2 on T1.Grade = T2.lettergrade",
        "hyp_correct": false,
        "NL_query": "What are the maximum and minumum grade points?",
        "index": 1219,
        "GT": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "DB": "college_3",
        "tables": [
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "select Fname from Student where Fname like \"% a %\"",
        "hyp_correct": false,
        "NL_query": "Find the first names of students whose first names contain letter \"a\".",
        "index": 1220,
        "GT": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Fname from Student where Fname like '%a%'",
        "hyp_correct": false,
        "NL_query": "What are the first names for students who have an \"a\" in their first name?",
        "index": 1221,
        "GT": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Fname , Lname from Faculty where Sex = \"m\" and Building = \"NEB\"",
        "hyp_correct": false,
        "NL_query": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "index": 1222,
        "GT": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "select Fname , Lname from Faculty where Sex = 'm' and Building = \"NEB\"",
        "hyp_correct": false,
        "NL_query": "What are the full names of faculties with sex M and who live in building NEB?",
        "index": 1223,
        "GT": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "select Room from Faculty where Rank = \"NEB\" and Building = 1",
        "hyp_correct": false,
        "NL_query": "Find the rooms of faculties with rank professor who live in building NEB.",
        "index": 1224,
        "GT": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "select Room from Faculty where Rank = \"professors\" intersect select Room from Faculty where Building = \"NEB\"",
        "hyp_correct": false,
        "NL_query": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "index": 1225,
        "GT": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "select LName from Student where Sex = 'f' order by Age desc",
        "hyp_correct": false,
        "NL_query": "What are the last names of female students, ordered by age descending?",
        "index": 1227,
        "GT": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Fname from Faculty where Rank = 1 order by Fname",
        "hyp_correct": false,
        "NL_query": "Find the first names of faculties of rank Professor in alphabetic order.",
        "index": 1230,
        "GT": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "select Fname from Faculty order by Fname",
        "hyp_correct": false,
        "NL_query": "What are the first names for all faculty professors, ordered by first name?",
        "index": 1231,
        "GT": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "select T1.Fname , T1.Lname from Faculty as T1 join Course as T2 on T1.FacID = T2.Instructor where T2.CName = 1",
        "hyp_correct": false,
        "NL_query": "Find the first name and last name of the instructor of course that has course name",
        "index": 1234,
        "GT": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
        "DB": "college_3",
        "tables": [
            "course",
            "faculty"
        ]
    },
    {
        "SQL": "select T1.DName , T1.Room from Department as T1 join Course as T2 on T1.DNO = T2.DNO where T2.CName = 'computer . science'",
        "hyp_correct": false,
        "NL_query": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "index": 1236,
        "GT": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "DB": "college_3",
        "tables": [
            "course",
            "department"
        ]
    },
    {
        "SQL": "select T1.DName , T1.Room from Department as T1 join Course as T2 on T1.DNO = T2.DNO where T2.CName = 'computer . science'",
        "hyp_correct": false,
        "NL_query": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
        "index": 1237,
        "GT": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "DB": "college_3",
        "tables": [
            "course",
            "department"
        ]
    },
    {
        "SQL": "select T3.Fname , T3.Lname from Department as T1 join Member_of as T2 on T1.DNO = T2.DNO join Faculty as T3 on T2.FacID = T3.FacID where T1.DName = 520",
        "hyp_correct": false,
        "NL_query": "What are the full names of faculty members who are a part of department 520?",
        "index": 1241,
        "GT": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "DB": "college_3",
        "tables": [
            "member_of",
            "department",
            "faculty"
        ]
    },
    {
        "SQL": "select T2.Fname , T2.LName from Minor_in as T1 join Student as T2 on T1.StuID = T2.StuID where T2.Major = 'DNO 140' and T1.DNO = 1",
        "hyp_correct": false,
        "NL_query": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "index": 1242,
        "GT": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "DB": "college_3",
        "tables": [
            "student",
            "minor_in"
        ]
    },
    {
        "SQL": "select count ( International_Passengers ) , Domestic_Passengers from airport where Airport_Name = \"London\"",
        "hyp_correct": false,
        "NL_query": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
        "index": 1244,
        "GT": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "select count ( * ) , Domestic_Passengers from airport where Airport_Name = \"London Heathrow\"",
        "hyp_correct": false,
        "NL_query": "How many international and domestic passengers are there in the airport London Heathrow?",
        "index": 1245,
        "GT": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "select sum ( Total_Passengers ) from airport where Domestic_Passengers like \"% London %\"",
        "hyp_correct": false,
        "NL_query": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "index": 1246,
        "GT": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "select sum ( Total_Passengers ) from airport where Domestic_Passengers = 'London'",
        "hyp_correct": false,
        "NL_query": "What are the total number of domestic passengers at all London airports?",
        "index": 1247,
        "GT": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "select max ( Transit_Passengers ) , min ( Total_Passengers ) from airport",
        "hyp_correct": false,
        "NL_query": "What are the maximum and minimum number of transit passengers of all aiports.",
        "index": 1248,
        "GT": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "select max ( Total_Passengers ) , min ( Transit_Passengers ) from airport",
        "hyp_correct": false,
        "NL_query": "What is the maximum and mininum number of transit passengers for all airports?",
        "index": 1249,
        "GT": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "select Name from pilot where Age >= 30 order by Age desc",
        "hyp_correct": false,
        "NL_query": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "index": 1250,
        "GT": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
        "DB": "aircraft",
        "tables": [
            "pilot"
        ]
    },
    {
        "SQL": "select Name from pilot where Age >= 30 order by Age desc",
        "hyp_correct": false,
        "NL_query": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
        "index": 1251,
        "GT": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
        "DB": "aircraft",
        "tables": [
            "pilot"
        ]
    },
    {
        "SQL": "select Location , Winning_Aircraft from match",
        "hyp_correct": false,
        "NL_query": "Please list the location and the winning aircraft name.",
        "index": 1252,
        "GT": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
        "DB": "aircraft",
        "tables": [
            "aircraft",
            "match"
        ]
    },
    {
        "SQL": "select T1.Location , T2.Aircraft from match as T1 join aircraft as T2 on T1.Winning_Aircraft = T2.Aircraft_ID order by T1.Winning_Aircraft limit 1",
        "hyp_correct": false,
        "NL_query": "What is the location and name of the winning aircraft?",
        "index": 1253,
        "GT": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
        "DB": "aircraft",
        "tables": [
            "aircraft",
            "match"
        ]
    },
    {
        "SQL": "select Aircraft , count ( * ) from aircraft group by Aircraft",
        "hyp_correct": false,
        "NL_query": "For each aircraft that has won an award, what is its name and how many time has it won?",
        "index": 1255,
        "GT": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
        "DB": "aircraft",
        "tables": [
            "aircraft",
            "match"
        ]
    },
    {
        "SQL": "select T2.Aircraft , T1.Winning_Aircraft from match as T1 join aircraft as T2 on T1.Winning_Aircraft = T2.Aircraft_ID group by T1.Winning_Aircraft having count ( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "List the names of aircrafts and that won matches at least twice.",
        "index": 1256,
        "GT": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
        "DB": "aircraft",
        "tables": [
            "aircraft",
            "match"
        ]
    },
    {
        "SQL": "select Airport_ID from airport order by International_Passengers desc limit 1",
        "hyp_correct": false,
        "NL_query": "Show all information on the airport that has the largest number of international passengers.",
        "index": 1258,
        "GT": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "select pName from Player where pName like \"% a %\"",
        "hyp_correct": false,
        "NL_query": "Find the players whose names contain letter 'a'.",
        "index": 1264,
        "GT": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "DB": "soccer_2",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select cName , enr from College where state = 10000 and enr > \"\"",
        "hyp_correct": false,
        "NL_query": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "index": 1266,
        "GT": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select cName , enr from College where state = 10000 and enr > \"Louisiana\"",
        "hyp_correct": false,
        "NL_query": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "index": 1267,
        "GT": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select pName from Player where yCard = 1 order by HS desc",
        "hyp_correct": false,
        "NL_query": "Find the name of players whose card is yes in the descending order of training hours.",
        "index": 1270,
        "GT": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "DB": "soccer_2",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select pName from Player order by HS desc",
        "hyp_correct": false,
        "NL_query": "What are the name of the players who received a card in descending order of the hours of training?",
        "index": 1271,
        "GT": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "DB": "soccer_2",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "select min ( T1.pPos ) , avg ( T2.HS ) from Tryout as T1 join Player as T2 on T1.pID = T2.pID group by",
        "hyp_correct": false,
        "NL_query": "For each position, what is the minimum time students spent practicing?",
        "index": 1273,
        "GT": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select cName from College order by limit 3 ( desc )",
        "hyp_correct": false,
        "NL_query": "What are the names of the schools with the top 3 largest class sizes?",
        "index": 1275,
        "GT": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select cName , min ( enr ) from College where state = 1 group by state",
        "hyp_correct": false,
        "NL_query": "What is the name of the school with smallest enrollment size per state?",
        "index": 1277,
        "GT": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select T2.state , T1.decision from Tryout as T1 join College as T2 on T1.cName = T2.cName",
        "hyp_correct": false,
        "NL_query": "Find the states where have some college students in tryout and their decisions are yes.",
        "index": 1278,
        "GT": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select count ( state ) from College",
        "hyp_correct": false,
        "NL_query": "What are the different states that had students successfully try out?",
        "index": 1279,
        "GT": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select T2.cName , T1.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.decision = 1",
        "hyp_correct": false,
        "NL_query": "Find the name and college of students whose decisions are yes in the tryout.",
        "index": 1280,
        "GT": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select T2.pName , T1.cName , T3.cName from Tryout as T1 join Player as T2 on T1.pID = T2.pID join College as T3 on T1.cName = T3.cName",
        "hyp_correct": false,
        "NL_query": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "index": 1281,
        "GT": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select cName from Tryout order by limit 1",
        "hyp_correct": false,
        "NL_query": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "index": 1282,
        "GT": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select cName from Tryout order by limit 1",
        "hyp_correct": false,
        "NL_query": "What are the names of all students who tried out in alphabetical order?",
        "index": 1283,
        "GT": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select T2.HS , T1.decision from Tryout as T1 join Player as T2 on T1.pID = T2.pID where T1.decision = 1",
        "hyp_correct": false,
        "NL_query": "Find the name and hours of the students whose tryout decision is yes.",
        "index": 1284,
        "GT": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select HS , HS from Player where yCard = 1",
        "hyp_correct": false,
        "NL_query": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "index": 1285,
        "GT": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select cName from Tryout where pPos = \"striker\" and decision = 1",
        "hyp_correct": false,
        "NL_query": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "index": 1288,
        "GT": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select cName from Tryout where pPos = \"striker\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all students who successfully tried out for the position of striker?",
        "index": 1289,
        "GT": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select avg ( T2.HS ) from Tryout as T1 join Player as T2 on T1.pID = T2.pID where T1.decision = 1",
        "hyp_correct": false,
        "NL_query": "Find the average hours for the students whose tryout decision is no.",
        "index": 1290,
        "GT": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select avg ( HS ) from Player where in ( select avg ( HS ) from Player",
        "hyp_correct": false,
        "NL_query": "What is the average number of hours spent practicing for students who got rejected?",
        "index": 1291,
        "GT": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.decision = 'goalie'",
        "hyp_correct": false,
        "NL_query": "Which college has any student who is a goalie and succeeded in the tryout.",
        "index": 1292,
        "GT": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = 'goalie'",
        "hyp_correct": false,
        "NL_query": "What college has a student who successfully made the team in the role of a goalie?",
        "index": 1293,
        "GT": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select T2.state , T2.enr from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.decision = 'tryout'",
        "hyp_correct": false,
        "NL_query": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "index": 1294,
        "GT": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select count ( T2.enr ) , T2.state from Tryout as T1 join College as T2 on T1.cName = T2.cName group by T1.cName",
        "hyp_correct": false,
        "NL_query": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?",
        "index": 1295,
        "GT": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select Open_Date from shop where Shop_Name = \"Apple\"",
        "hyp_correct": false,
        "NL_query": "List the open date of open year of the shop named \"Apple\".",
        "index": 1298,
        "GT": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
        "DB": "device",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "select Software_Platform from device order by Software_Platform desc",
        "hyp_correct": false,
        "NL_query": "What are the different software platforms for devices, ordered by frequency descending?",
        "index": 1309,
        "GT": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "DB": "device",
        "tables": [
            "device"
        ]
    },
    {
        "SQL": "select problem_log_id from Problem_Log order by problem_id desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the id of the problem log that is created most recently?",
        "index": 1312,
        "GT": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log"
        ]
    },
    {
        "SQL": "select problem_log_id from Problem_Log order by problem_id desc limit 1",
        "hyp_correct": false,
        "NL_query": "Which problem log was created most recently? Give me the log id.",
        "index": 1313,
        "GT": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log"
        ]
    },
    {
        "SQL": "select max ( problem_log_id ) , problem_id from Problem_Log order by limit 1",
        "hyp_correct": false,
        "NL_query": "What is the oldest log id and its corresponding problem id?",
        "index": 1314,
        "GT": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log"
        ]
    },
    {
        "SQL": "select max ( problem_log_id ) , min ( problem_id ) from Problem_Log",
        "hyp_correct": false,
        "NL_query": "Find the oldest log id and its corresponding problem id.",
        "index": 1315,
        "GT": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log"
        ]
    },
    {
        "SQL": "select T2.problem_log_id , T2.log_entry_date from Problems as T1 join Problem_Log as T2 on T1.problem_id = T2.problem_id where T1.date_problem_closed = 10",
        "hyp_correct": false,
        "NL_query": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "index": 1316,
        "GT": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log",
            "problems"
        ]
    },
    {
        "SQL": "select T1.problem_id , T1.date_problem_reported from Problems as T1 join Problem_Log as T2 on T1.problem_id = T2.problem_id where T2.problem_status_code = 10",
        "hyp_correct": false,
        "NL_query": "For the problem with id 10, return the ids and dates of its problem logs.",
        "index": 1317,
        "GT": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log",
            "problems"
        ]
    },
    {
        "SQL": "select T3.problem_category_description , T1.problem_status_description from Problem_Status_Codes as T1 join Problem_Log as T2 on T1.problem_status_code = T2.problem_status_code join Problem_Category_Codes as T3 on T2.problem_category_code = T3.problem_category_code",
        "hyp_correct": false,
        "NL_query": "List all the log ids and their descriptions from the problem logs.",
        "index": 1318,
        "GT": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_status_codes",
            "problem_log",
            "problem_category_codes"
        ]
    },
    {
        "SQL": "select staff_first_name , staff_last_name from Staff where staff_id = 1",
        "hyp_correct": false,
        "NL_query": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "index": 1320,
        "GT": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log",
            "staff"
        ]
    },
    {
        "SQL": "select T1.staff_first_name , T1.staff_last_name from Staff as T1 join Problem_Log as T2 on T1.staff_id = T2.assigned_to_staff_id where T2.assigned_to_staff_id = 1",
        "hyp_correct": false,
        "NL_query": "Which staff members are assigned to the problem with id 1? Give me their first and last names.",
        "index": 1321,
        "GT": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "DB": "tracking_software_problems",
        "tables": [
            "problem_log",
            "staff"
        ]
    },
    {
        "SQL": "select T2.reported_by_staff_id from Staff as T1 join Problems as T2 on T1.staff_id = T2.reported_by_staff_id where T1.staff_last_name = 'Bosco'",
        "hyp_correct": false,
        "NL_query": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "index": 1326,
        "GT": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"",
        "DB": "tracking_software_problems",
        "tables": [
            "staff",
            "problems"
        ]
    },
    {
        "SQL": "select T2.reported_by_staff_id from Staff as T1 join Problems as T2 on T1.staff_id = T2.reported_by_staff_id where T1.staff_last_name = \"Bosco\"",
        "hyp_correct": false,
        "NL_query": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.",
        "index": 1327,
        "GT": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"",
        "DB": "tracking_software_problems",
        "tables": [
            "staff",
            "problems"
        ]
    },
    {
        "SQL": "select T1.product_name , count ( * ) from Product as T1 join Problems as T2 on T1.product_id = T2.product_id group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "For each product which has problems, what are the number of problems and the product id?",
        "index": 1328,
        "GT": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "DB": "tracking_software_problems",
        "tables": [
            "product",
            "problems"
        ]
    },
    {
        "SQL": "select Name from branch group by Name order by count ( * ) desc limit 3",
        "hyp_correct": false,
        "NL_query": "What are names for top three branches with most number of membership?",
        "index": 1334,
        "GT": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "DB": "shop_membership",
        "tables": [
            "branch"
        ]
    },
    {
        "SQL": "select City from branch where Open_year = 2001 intersect select T1.Hometown from member as T1 join purchase as T2 on T1.Member_ID = T2.Member_ID join branch as T3 on T2.Branch_ID = T3.Branch_ID where T3.membership_amount > 100",
        "hyp_correct": false,
        "NL_query": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "index": 1342,
        "GT": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "DB": "shop_membership",
        "tables": [
            "member",
            "branch",
            "purchase"
        ]
    },
    {
        "SQL": "select sum ( T1.Total_pounds ) from purchase as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID where T2.City = 'London'",
        "hyp_correct": false,
        "NL_query": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
        "index": 1344,
        "GT": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "purchase"
        ]
    },
    {
        "SQL": "select sum ( T1.Total_pounds ) from purchase as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID where T2.City = 'London'",
        "hyp_correct": false,
        "NL_query": "How many total pounds were purchased in the year 2018 at all London branches?",
        "index": 1345,
        "GT": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "purchase"
        ]
    },
    {
        "SQL": "select sum () from member as T1 join purchase as T2 on T1.Member_ID = T2.Member_ID where T1.Level = 6",
        "hyp_correct": false,
        "NL_query": "What is the total number of purchases for members with level 6?",
        "index": 1346,
        "GT": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "DB": "shop_membership",
        "tables": [
            "member",
            "purchase"
        ]
    },
    {
        "SQL": "select sum ( T2.Total_pounds ) from member as T1 join purchase as T2 on T1.Member_ID = T2.Member_ID where T1.Level = 6",
        "hyp_correct": false,
        "NL_query": "What are the total purchases for members rated at level 6?",
        "index": 1347,
        "GT": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "DB": "shop_membership",
        "tables": [
            "member",
            "purchase"
        ]
    },
    {
        "SQL": "select Card_Number from member where Hometown like \"% Kentucky %\"",
        "hyp_correct": false,
        "NL_query": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "index": 1348,
        "GT": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "DB": "shop_membership",
        "tables": [
            "member"
        ]
    },
    {
        "SQL": "select Card_Number from member where Hometown = \"Kentucky\"",
        "hyp_correct": false,
        "NL_query": "What are the card numbers of members from Kentucky?",
        "index": 1349,
        "GT": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "DB": "shop_membership",
        "tables": [
            "member"
        ]
    },
    {
        "SQL": "select T1.product_name , sum ( T2.order_quantity ) from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id group by T1.product_name",
        "hyp_correct": false,
        "NL_query": "Show the product name and total order quantity for each product.",
        "index": 1352,
        "GT": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
        "DB": "customers_and_products_contacts",
        "tables": [
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "select T3.customer_name , T2.city , T1.date_from , T3.customer_address from Customer_Address_History as T1 join Addresses as T2 on T1.address_id = T2.address_id join Customers as T3 on T1.customer_id = T3.customer_id",
        "hyp_correct": false,
        "NL_query": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "index": 1354,
        "GT": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "DB": "customers_and_products_contacts",
        "tables": [
            "customers",
            "addresses",
            "customer_address_history"
        ]
    },
    {
        "SQL": "select count ( * ) from Student where Sex = 25 and Age < \"f\"",
        "hyp_correct": false,
        "NL_query": "How many female students (sex is F) whose age is below 25?",
        "index": 1355,
        "GT": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select count ( * ) from Student where Age < 25 and Sex = 'f'",
        "hyp_correct": false,
        "NL_query": "How many girl students who are younger than 25?",
        "index": 1356,
        "GT": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Fname from Student where city_code = 20 and Age between \"PHL\"",
        "hyp_correct": false,
        "NL_query": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "index": 1357,
        "GT": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Fname from Student where Age = 20 and city_code = \"PHL\"",
        "hyp_correct": false,
        "NL_query": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
        "index": 1358,
        "GT": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select avg ( Age ) , avg ( Age ) from Student",
        "hyp_correct": false,
        "NL_query": "What is the average age for each city and what are those cities?",
        "index": 1360,
        "GT": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select avg ( student_capacity ) , sum ( student_capacity ) from Dorm where gender = \"m\"",
        "hyp_correct": false,
        "NL_query": "What is the average and total capacity for all dorms who are of gender X?",
        "index": 1362,
        "GT": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "select student_capacity , gender from Dorm where dorm_name = \"% Donor %\"",
        "hyp_correct": false,
        "NL_query": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
        "index": 1364,
        "GT": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "select count ( Major ) , city_code from Student group by Major",
        "hyp_correct": false,
        "NL_query": "Find the numbers of different majors and cities.",
        "index": 1365,
        "GT": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Major , count ( city_code ) from Student group by city_code",
        "hyp_correct": false,
        "NL_query": "How many different majors are there and how many different city codes are there for each student?",
        "index": 1366,
        "GT": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Fname , LName from Student where city_code = \"HKG\" order by Age",
        "hyp_correct": false,
        "NL_query": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "index": 1369,
        "GT": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Fname , LName from Student where city_code = \"HKG\" order by Age",
        "hyp_correct": false,
        "NL_query": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
        "index": 1370,
        "GT": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select count ( * ) , gender from Dorm group by gender",
        "hyp_correct": false,
        "NL_query": "Find the number of dorms and total capacity for each gender.",
        "index": 1371,
        "GT": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "select sum ( * ) , gender from Dorm group by gender",
        "hyp_correct": false,
        "NL_query": "How many dorms are there and what is the total capacity for each gender?",
        "index": 1372,
        "GT": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "select city_code , avg ( Age ) from Student group by city_code",
        "hyp_correct": false,
        "NL_query": "Find the number and average age of students living in each city.",
        "index": 1377,
        "GT": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select city_code , avg ( Age ) from Student group by city_code",
        "hyp_correct": false,
        "NL_query": "How many students live in each city and what are their average ages?",
        "index": 1378,
        "GT": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select count ( * ) from Student where city_code > 1 group by city_code",
        "hyp_correct": false,
        "NL_query": "Find the number of students for the cities where have more than one student.",
        "index": 1379,
        "GT": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select T1.product_name , count ( * ) from Products as T1 join Complaints as T2 on T1.product_id = T2.product_id group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "List the name of all products along with the number of complaints that they have received.",
        "index": 1383,
        "GT": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "DB": "customer_complaints",
        "tables": [
            "products",
            "complaints"
        ]
    },
    {
        "SQL": "select T1.product_name , count ( * ) from Products as T1 join Complaints as T2 on T1.product_id = T2.product_id group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "What are all the different product names, and how many complains has each received?",
        "index": 1384,
        "GT": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "DB": "customer_complaints",
        "tables": [
            "products",
            "complaints"
        ]
    },
    {
        "SQL": "select last_name from Staff where email_address like \"% wrau %\"",
        "hyp_correct": false,
        "NL_query": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
        "index": 1390,
        "GT": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
        "DB": "customer_complaints",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "select address_line_1 , address_line_2 from Customers where email_address = \"vbogisich @ example . org\"",
        "hyp_correct": false,
        "NL_query": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "index": 1391,
        "GT": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select address_line_1 , address_line_2 from Customers where email_address = \"vbogisich @ example . org\"",
        "hyp_correct": false,
        "NL_query": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "index": 1392,
        "GT": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select complaint_status_code , count ( * ) from Complaints group by complaint_type_code",
        "hyp_correct": false,
        "NL_query": "Find the number of complaints with Product Failure type for each complaint status.",
        "index": 1393,
        "GT": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
        "DB": "customer_complaints",
        "tables": [
            "complaints"
        ]
    },
    {
        "SQL": "select Major , avg ( Age ) , min ( Age ) from Student group by Major",
        "hyp_correct": false,
        "NL_query": "Show the average, minimum, and maximum age for different majors.",
        "index": 1399,
        "GT": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "DB": "game_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select Major , avg ( Age ) , min ( Age ) from Student group by Major",
        "hyp_correct": false,
        "NL_query": "What are the average, minimum, and max ages for each of the different majors?",
        "index": 1400,
        "GT": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "DB": "game_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "select LName from Student",
        "hyp_correct": false,
        "NL_query": "Show last names for all student who are on scholarship.",
        "index": 1401,
        "GT": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select LName from Student",
        "hyp_correct": false,
        "NL_query": "What are the last names for all scholarship students?",
        "index": 1402,
        "GT": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select count ( * ) from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID where T1.OnScholarship = \"football\"",
        "hyp_correct": false,
        "NL_query": "How many games are played for all football games by students on scholarship?",
        "index": 1403,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select count ( GamesPlayed ) from SportsInfo where OnScholarship = 1",
        "hyp_correct": false,
        "NL_query": "What is the total number of all football games played by scholarship students?",
        "index": 1404,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "select StuID , count ( * ) from SportsInfo group by StuID",
        "hyp_correct": false,
        "NL_query": "Show all student IDs with the number of sports and total number of games played",
        "index": 1407,
        "GT": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "select T1.StuID , count ( * ) from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID group by T3.StuID",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students along with how many sports and games did they play?",
        "index": 1408,
        "GT": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select T3.GameID , T3.Hours_Played from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID group by T1.HoursPerWeek",
        "hyp_correct": false,
        "NL_query": "Show all game ids and the number of hours played.",
        "index": 1409,
        "GT": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select T3.StuID , T1.HoursPerWeek from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID group by T3.Hours_Played",
        "hyp_correct": false,
        "NL_query": "Show all student ids and the number of hours played.",
        "index": 1411,
        "GT": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select T3.StuID , T1.HoursPerWeek from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students and number of hours played?",
        "index": 1412,
        "GT": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select Speed from roller_coaster order by Length desc",
        "hyp_correct": false,
        "NL_query": "What are the speeds of the longest roller coaster?",
        "index": 1417,
        "GT": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "DB": "roller_coaster",
        "tables": [
            "roller_coaster"
        ]
    },
    {
        "SQL": "select payment_method_code , party_phone from Parties where party_email = \"enrico09 . @ example com\"",
        "hyp_correct": false,
        "NL_query": "Find the payment method and phone of the party with email \"enrico09@example.com\".",
        "index": 1425,
        "GT": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
        "DB": "e_government",
        "tables": [
            "parties"
        ]
    },
    {
        "SQL": "select payment_method_code , party_phone from Parties where party_email = \"enrico09 . @ example com\"",
        "hyp_correct": false,
        "NL_query": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?",
        "index": 1426,
        "GT": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
        "DB": "e_government",
        "tables": [
            "parties"
        ]
    },
    {
        "SQL": "select organization_name from Organizations order by date_formed limit 1",
        "hyp_correct": false,
        "NL_query": "Find the name of the youngest organization.",
        "index": 1427,
        "GT": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "DB": "e_government",
        "tables": [
            "organizations"
        ]
    },
    {
        "SQL": "select organization_name from Organizations where organization_name like \"% Party %\"",
        "hyp_correct": false,
        "NL_query": "Find the name of organizations whose names contain \"Party\".",
        "index": 1429,
        "GT": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "DB": "e_government",
        "tables": [
            "organizations"
        ]
    },
    {
        "SQL": "select organization_name from Organizations where organization_name like \"% Party %\"",
        "hyp_correct": false,
        "NL_query": "What are the names of organizations that contain the word \"Party\"?",
        "index": 1430,
        "GT": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "DB": "e_government",
        "tables": [
            "organizations"
        ]
    },
    {
        "SQL": "select state_province_county from Addresses where town_city = \"6862 Kaitlyn Knolls\"",
        "hyp_correct": false,
        "NL_query": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "index": 1431,
        "GT": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "select state_province_county from Addresses where line_1_number_building = \"6862 Kaitlyn Knolls\"",
        "hyp_correct": false,
        "NL_query": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".",
        "index": 1432,
        "GT": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "select Party from driver where Home_city = \"Hartford\" intersect select Party from driver where Age > 40",
        "hyp_correct": false,
        "NL_query": "Show the party with drivers from Hartford and drivers older than 40.",
        "index": 1435,
        "GT": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40",
        "DB": "school_bus",
        "tables": [
            "driver"
        ]
    },
    {
        "SQL": "select T2.Name , T1.Driver_ID from school_bus as T1 join driver as T2 on T1.Driver_ID = T2.Driver_ID",
        "hyp_correct": false,
        "NL_query": "Show the school name and driver name for all school buses.",
        "index": 1437,
        "GT": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
        "DB": "school_bus",
        "tables": [
            "driver",
            "school_bus",
            "school"
        ]
    },
    {
        "SQL": "select count ( * ) , Document_Type_Code from Documents where Document_Type_Code = \"BK\" group by Document_Type_Code",
        "hyp_correct": false,
        "NL_query": "How many documents are with document type code BK for each product id?",
        "index": 1454,
        "GT": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "select count ( * ) , Document_Type_Code from Documents where Document_Type_Code = \"BK\" group by Document_Type_Code",
        "hyp_correct": false,
        "NL_query": "Count the number of documents with the type code BK that correspond to each product id.",
        "index": 1455,
        "GT": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "select T2.Document_Name , T2.Document_Date from Projects as T1 join Documents as T2 on T1.Project_ID = T2.Project_ID where T1.Project_Details = \"Graph Database\"",
        "hyp_correct": false,
        "NL_query": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "index": 1456,
        "GT": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "projects",
            "documents"
        ]
    },
    {
        "SQL": "select T2.Document_Name , T2.Document_Date from Projects as T1 join Documents as T2 on T1.Project_ID = T2.Project_ID where T1.Project_Details = 'Graph Database'",
        "hyp_correct": false,
        "NL_query": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
        "index": 1457,
        "GT": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "projects",
            "documents"
        ]
    },
    {
        "SQL": "select T3.Statement_Details , T2.Document_Name from Projects as T1 join Documents as T2 on T1.Project_ID = T2.Project_ID join Statements as T3 on T2.Document_ID = T3.Statement_ID where T1.Project_Details = 'Private Project'",
        "hyp_correct": false,
        "NL_query": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "index": 1462,
        "GT": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "statements",
            "projects",
            "documents"
        ]
    },
    {
        "SQL": "select T3.Statement_Details , T2.Document_Name from Projects as T1 join Documents as T2 on T1.Project_ID = T2.Project_ID join Statements as T3 on T2.Document_ID = T3.Statement_ID where T1.Project_Details = 'Private Project'",
        "hyp_correct": false,
        "NL_query": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "index": 1463,
        "GT": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "statements",
            "projects",
            "documents"
        ]
    },
    {
        "SQL": "select Document_Type_Name , Document_Type_Description from Ref_Document_Types",
        "hyp_correct": false,
        "NL_query": "What is the document type name and the document type description and creation date for all the documents?",
        "index": 1466,
        "GT": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "ref_document_types",
            "documents"
        ]
    },
    {
        "SQL": "select T1.Document_Type_Name , T1.Document_Type_Description , T2.Document_Description , T2.Document_Date from Ref_Document_Types as T1 join Documents as T2 on T1.Document_Type_Code = T2.Document_Type_Code",
        "hyp_correct": false,
        "NL_query": "Return the type name, type description, and date of creation for each document.",
        "index": 1467,
        "GT": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "ref_document_types",
            "documents"
        ]
    },
    {
        "SQL": "select T2.Project_ID , T1.Project_Details from Projects as T1 join Documents as T2 on T1.Project_ID = T2.Project_ID join Documents_with_Expenses as T3 on T2.Document_ID = T3.Document_ID group by T3.Document_Details having count ( * ) > 2",
        "hyp_correct": false,
        "NL_query": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "index": 1471,
        "GT": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "projects",
            "documents",
            "documents_with_expenses"
        ]
    },
    {
        "SQL": "select T1.Budget_Type_Code , T1.Budget_Type_Description , T4.Document_Type_Description from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID join Ref_Document_Types as T4 on T3.Document_Type_Code = T4.Document_Type_Code",
        "hyp_correct": false,
        "NL_query": "Show the budget type code and description and the corresponding document id.",
        "index": 1476,
        "GT": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "ref_document_types",
            "documents_with_expenses",
            "documents",
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "select T1.Budget_Type_Code , T4.Document_Type_Description , T3.Document_Description from Ref_Budget_Codes as T1 join Documents_with_Expenses as T2 on T1.Budget_Type_Code = T2.Budget_Type_Code join Documents as T3 on T2.Document_ID = T3.Document_ID join Ref_Document_Types as T4 on T3.Document_Type_Code = T4.Document_Type_Code",
        "hyp_correct": false,
        "NL_query": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
        "index": 1477,
        "GT": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "ref_document_types",
            "documents_with_expenses",
            "documents",
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "select Name , Location , Number_of_Platforms from station group by count ( * )",
        "hyp_correct": false,
        "NL_query": "Show the name, location, and number of platforms for all stations.",
        "index": 1482,
        "GT": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "select sum ( Total_Passengers ) , Name from station where Location != \"London\"",
        "hyp_correct": false,
        "NL_query": "Show the names and total passengers for all train stations not in London.",
        "index": 1483,
        "GT": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "select Location , count ( Total_Passengers ) from station group by Location",
        "hyp_correct": false,
        "NL_query": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "index": 1485,
        "GT": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "select Location from station where Number_of_Platforms > 15 group by Location having count ( * ) >= 25",
        "hyp_correct": false,
        "NL_query": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "index": 1486,
        "GT": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "select T3.Name , T1.Location from station as T1 join train_station as T2 on T1.Station_ID = T2.Station_ID join train as T3 on T2.Train_ID = T3.Train_ID order by T1.Annual_entry_exit",
        "hyp_correct": false,
        "NL_query": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "index": 1492,
        "GT": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges",
        "DB": "train_station",
        "tables": [
            "train",
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "select first_name , last_name from Staff",
        "hyp_correct": false,
        "NL_query": "List the first name middle name and last name of all staff.",
        "index": 1493,
        "GT": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "select first_name from Staff where first_name = \"Janessa\" and last_name = \"Sawayn\"",
        "hyp_correct": false,
        "NL_query": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "index": 1495,
        "GT": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "select date_of_birth from Staff where first_name = \"Janessa\" and last_name = Sawayn'",
        "hyp_correct": false,
        "NL_query": "What is the date of birth for the staff member named Janessa Sawayn?",
        "index": 1496,
        "GT": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "select date_joined_staff from Staff where first_name = 'Janessa' and last_name = 'Sawayn'",
        "hyp_correct": false,
        "NL_query": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "index": 1499,
        "GT": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "select T1.city from Addresses as T1 join Customers as T2 on T1.address_id = T2.customer_address_id where T2.first_name = \"Janessa Sawayn\" and T2.last_name = 1",
        "hyp_correct": false,
        "NL_query": "In what city does Janessa Sawayn live?",
        "index": 1504,
        "GT": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "customers",
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "select first_name from Staff where first_name = \"Janessa\" and last_name = \"Sawayn\"",
        "hyp_correct": false,
        "NL_query": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
        "index": 1507,
        "GT": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "select count ( * ) from Staff group by staff_address_id having count ( * ) between 2 and 4",
        "hyp_correct": false,
        "NL_query": "List the states which have between 2 to 4 staffs living there.",
        "index": 1511,
        "GT": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "select count ( * ) group by having ( * ) between 4 and 2",
        "hyp_correct": false,
        "NL_query": "What are the names of the states that have 2 to 4 employees living there?",
        "index": 1512,
        "GT": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "select count ( * ) from Lessons as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.first_name = \"Rylan\" and T2.last_name = \"Goodwin\"",
        "hyp_correct": false,
        "NL_query": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "index": 1523,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "customers"
        ]
    },
    {
        "SQL": "select count ( * ) from Lessons as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.first_name = \"rylan\" and T2.last_name = 1",
        "hyp_correct": false,
        "NL_query": "How many lessons did the customer Ryan Goodwin complete?",
        "index": 1524,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "customers"
        ]
    },
    {
        "SQL": "select first_name from Customers where first_name = \"Carole\" and last_name = \"Bernhard\"",
        "hyp_correct": false,
        "NL_query": "Which country does customer with first name as Carole and last name as Bernhard lived in?",
        "index": 1531,
        "GT": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "DB": "driving_school",
        "tables": [
            "customers",
            "addresses"
        ]
    },
    {
        "SQL": "select first_name from Customers where first_name = \"Carole\" and last_name = \"Bernhard\"",
        "hyp_correct": false,
        "NL_query": "What is the country in which the customer Carole Bernhard lived?",
        "index": 1532,
        "GT": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "DB": "driving_school",
        "tables": [
            "customers",
            "addresses"
        ]
    },
    {
        "SQL": "select T1.zip_postcode from Addresses as T1 join Customers as T2 on T1.address_id = T2.customer_address_id where T2.first_name = \"Carole\" and T2.last_name = 1",
        "hyp_correct": false,
        "NL_query": "What is the zip code of the customer Carole Bernhard?",
        "index": 1534,
        "GT": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "DB": "driving_school",
        "tables": [
            "customers",
            "addresses"
        ]
    },
    {
        "SQL": "select sum () from Customer_Payments as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.first_name = \"Carole\" and T2.last_name = \"Bernhard\"",
        "hyp_correct": false,
        "NL_query": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
        "index": 1535,
        "GT": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
        "DB": "driving_school",
        "tables": [
            "customer_payments",
            "customers"
        ]
    },
    {
        "SQL": "select avg ( T1.price ) from Lessons as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.first_name = \"Janessa\"",
        "hyp_correct": false,
        "NL_query": "What is the average price for a lesson taught by Janessa Sawayn?",
        "index": 1544,
        "GT": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "customers",
            "staff"
        ]
    },
    {
        "SQL": "select count ( * ) from Lessons as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.first_name = \"Ray\" and T2.last_name = 1",
        "hyp_correct": false,
        "NL_query": "How many lesson does customer with first name Ray took?",
        "index": 1545,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "customers"
        ]
    },
    {
        "SQL": "select count ( * ) from Lessons as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T2.first_name = 'Ray' and T2.last_name = 1",
        "hyp_correct": false,
        "NL_query": "How many lessons did the customer with the first name Ray take?",
        "index": 1546,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "customers"
        ]
    },
    {
        "SQL": "select country from airlines where name like \"%\"",
        "hyp_correct": false,
        "NL_query": "What are the countries of all airlines whose names start with Orbit?",
        "index": 1552,
        "GT": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
        "DB": "flight_4",
        "tables": [
            "airlines"
        ]
    },
    {
        "SQL": "select count ( * ) from airports where name like '%",
        "hyp_correct": false,
        "NL_query": "How many airports' names have the word Interanation in them?",
        "index": 1556,
        "GT": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select count ( * ) from airlines as T1 join routes as T2 on T1.alid = T2.alid where T1.name = \"American\"",
        "hyp_correct": false,
        "NL_query": "How many routes does American Airlines operate?",
        "index": 1558,
        "GT": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "routes"
        ]
    },
    {
        "SQL": "select count ( * ) from routes as T1 join airports as T2 on T1.dst_apid = T2.apid where T2.country = \"Canadian\"",
        "hyp_correct": false,
        "NL_query": "How many routes end in a Canadian airport?",
        "index": 1560,
        "GT": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "DB": "flight_4",
        "tables": [
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select count ( T2.dst_ap ) from airlines as T1 join routes as T2 on T1.alid = T2.alid where T1.country = \"American\"",
        "hyp_correct": false,
        "NL_query": "Find the number of different airports which are the destinations of the American Airlines.",
        "index": 1565,
        "GT": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "routes"
        ]
    },
    {
        "SQL": "select count ( T3.name ) from airlines as T1 join routes as T2 on T1.alid = T2.alid join airports as T3 on T2.dst_apid = T3.apid where T1.country = \"American\"",
        "hyp_correct": false,
        "NL_query": "What is the number of different different airports that are destinations for American Airlines?",
        "index": 1566,
        "GT": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select city from airports group by city having count ( * ) > 3",
        "hyp_correct": false,
        "NL_query": "Return the cities with more than 3 airports in the United States.",
        "index": 1567,
        "GT": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select count ( * ) from airports where city > 3 group by y having count ( * ) > 1",
        "hyp_correct": false,
        "NL_query": "What is the number of cities in the United States with more than 3 airports?",
        "index": 1568,
        "GT": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select city from airports group by city having count ( * ) > 2",
        "hyp_correct": false,
        "NL_query": "List the cities which have more than 2 airports sorted by the number of airports.",
        "index": 1571,
        "GT": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select city from airports group by city having count ( * ) > 2",
        "hyp_correct": false,
        "NL_query": "What are the cities that have more than 2 airports sorted by number of airports?",
        "index": 1572,
        "GT": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select T1.src_ap , T2.name , count ( * ) from routes as T1 join airports as T2 on T1.dst_apid = T2.apid group by T1.src_apid",
        "hyp_correct": false,
        "NL_query": "Find the number of routes for each source airport and the airport name.",
        "index": 1573,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "DB": "flight_4",
        "tables": [
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select T2.name , count ( * ) from routes as T1 join airports as T2 on T1.dst_apid = T2.apid group by T2.name",
        "hyp_correct": false,
        "NL_query": "For each airport name, how many routes start at that airport?",
        "index": 1574,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "DB": "flight_4",
        "tables": [
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select count ( * ) from routes as T1 join airports as T2 on T1.dst_apid = T2.apid where T2.country = \"Italian\"",
        "hyp_correct": false,
        "NL_query": "What is the number of routes whose destinations are Italian airports?",
        "index": 1578,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "DB": "flight_4",
        "tables": [
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select count ( * ) from routes where dst_ap = \"John F Kennedy\"",
        "hyp_correct": false,
        "NL_query": "Find the number of routes that have destination John F Kennedy International Airport.",
        "index": 1579,
        "GT": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "DB": "flight_4",
        "tables": [
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select count ( * ) from routes as T1 join airports as T2 on T1.dst_apid = T2.apid where T2.city = \"John F Kennedy International\"",
        "hyp_correct": false,
        "NL_query": "What is the number of routes that end at John F Kennedy International Airport?",
        "index": 1580,
        "GT": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "DB": "flight_4",
        "tables": [
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select order_id , customer_id from Orders order by date_order_placed desc limit 1",
        "hyp_correct": false,
        "NL_query": "what are the order id and customer id of the oldest order?",
        "index": 1583,
        "GT": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "DB": "tracking_orders",
        "tables": [
            "orders"
        ]
    },
    {
        "SQL": "select order_id , customer_id from Orders order by date_order_placed desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the order id and customer id associated with the oldest order.",
        "index": 1584,
        "GT": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "DB": "tracking_orders",
        "tables": [
            "orders"
        ]
    },
    {
        "SQL": "select T2.customer_name from Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.order_status = \"Packing\"",
        "hyp_correct": false,
        "NL_query": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "index": 1585,
        "GT": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "select T2.customer_name from Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.order_status = \"Packing\"",
        "hyp_correct": false,
        "NL_query": "Which customers have orders with status \"Packing\"? Give me the customer names.",
        "index": 1586,
        "GT": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "select T2.customer_details from Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.order_status = \"On Road\"",
        "hyp_correct": false,
        "NL_query": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "index": 1587,
        "GT": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "select T2.customer_details from Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.order_status = \"On Road\"",
        "hyp_correct": false,
        "NL_query": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
        "index": 1588,
        "GT": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "select T2.customer_name from Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.date_order_placed between ` 2009 - 01 - 01\" and '2010 - 01",
        "hyp_correct": false,
        "NL_query": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "index": 1593,
        "GT": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "select T2.customer_name from Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id where T1.date_order_placed = ` 2009 - 01 - 01\" and between 1",
        "hyp_correct": false,
        "NL_query": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "index": 1594,
        "GT": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "select T2.product_id from Orders as T1 join Order_Items as T2 on T1.order_id = T2.order_id where T1.date_order_placed between \"1975 - 01 - 01\" and '1976 01 -",
        "hyp_correct": false,
        "NL_query": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "index": 1595,
        "GT": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "orders",
            "order_items"
        ]
    },
    {
        "SQL": "select T1.product_id from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id where T2.product_id between \"1975 - 01 - 01\" and '1976 - 01",
        "hyp_correct": false,
        "NL_query": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "index": 1596,
        "GT": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "products",
            "order_items",
            "orders"
        ]
    },
    {
        "SQL": "select T3.date_order_placed from Invoices as T1 join Shipments as T2 on T1.invoice_number = T2.invoice_number join Orders as T3 on T2.order_id = T3.order_id where T1.invoice_date = 10",
        "hyp_correct": false,
        "NL_query": "What is the placement date of the order whose invoice number is 10?",
        "index": 1599,
        "GT": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "DB": "tracking_orders",
        "tables": [
            "invoices",
            "shipments",
            "orders"
        ]
    },
    {
        "SQL": "select invoice_number from Invoices where invoice_date < ` 1989 - 09 - 03\" or invoice_date > 25",
        "hyp_correct": false,
        "NL_query": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "index": 1601,
        "GT": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "DB": "tracking_orders",
        "tables": [
            "invoices"
        ]
    },
    {
        "SQL": "select invoice_number from Invoices where invoice_date < \"1989 - 09 - 03\" or invoice_date > 25",
        "hyp_correct": false,
        "NL_query": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "index": 1602,
        "GT": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "DB": "tracking_orders",
        "tables": [
            "invoices"
        ]
    },
    {
        "SQL": "select invoice_details from Invoices where invoice_date < \"1989 - 09 - 03\" or invoice_date > 25",
        "hyp_correct": false,
        "NL_query": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "index": 1603,
        "GT": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "DB": "tracking_orders",
        "tables": [
            "invoices"
        ]
    },
    {
        "SQL": "select invoice_details from Invoices where invoice_date < \"1989 - 09 - 03\" or invoice_date > 25",
        "hyp_correct": false,
        "NL_query": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?",
        "index": 1604,
        "GT": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "DB": "tracking_orders",
        "tables": [
            "invoices"
        ]
    },
    {
        "SQL": "select T2.customer_name from Orders as T1 join Customers as T2 on T1.customer_id = T2.customer_id group by T1.customer_id having count ( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "What are the names of the customers who have made two or less orders?",
        "index": 1608,
        "GT": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "select avg ( Age ) , min ( Age ) , max ( Age ) from singer where Country = \"\"",
        "hyp_correct": false,
        "NL_query": "What is the average, minimum, and maximum age for all French singers?",
        "index": 1612,
        "GT": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "select max ( Capacity ) , avg ( Average ) from stadium",
        "hyp_correct": false,
        "NL_query": "What is the maximum capacity and the average of all stadiums ?",
        "index": 1619,
        "GT": "select max(capacity), average from stadium",
        "DB": "concert_singer",
        "tables": [
            "stadium"
        ]
    },
    {
        "SQL": "select avg ( Average ) , max ( Capacity ) from stadium",
        "hyp_correct": false,
        "NL_query": "What is the average and maximum capacities for all stadiums ?",
        "index": 1620,
        "GT": "select avg(capacity) ,  max(capacity) from stadium",
        "DB": "concert_singer",
        "tables": [
            "stadium"
        ]
    },
    {
        "SQL": "select T1.concert_Name , T1.Theme , count ( * ) from concert as T1 join singer_in_concert as T2 on T1.concert_ID = T2.concert_ID join singer as T3 on T2.Singer_ID = T3.Singer_ID group by T1.concert_Name",
        "hyp_correct": false,
        "NL_query": "Show the name and theme for all concerts and the number of singers in each concert.",
        "index": 1627,
        "GT": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "DB": "concert_singer",
        "tables": [
            "singer",
            "concert",
            "singer_in_concert"
        ]
    },
    {
        "SQL": "select T3.Name , T1.Theme , count ( * ) from concert as T1 join singer_in_concert as T2 on T1.concert_ID = T2.concert_ID join singer as T3 on T2.Singer_ID = T3.Singer_ID group by T1.concert_Name",
        "hyp_correct": false,
        "NL_query": "What are the names , themes , and number of singers for every concert ?",
        "index": 1628,
        "GT": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "DB": "concert_singer",
        "tables": [
            "singer",
            "concert",
            "singer_in_concert"
        ]
    },
    {
        "SQL": "select T3.Name , count ( * ) from concert as T1 join singer_in_concert as T2 on T1.concert_ID = T2.concert_ID join singer as T3 on T2.Singer_ID = T3.Singer_ID group by T3.Name",
        "hyp_correct": false,
        "NL_query": "What are the names of the singers and number of concerts for each person?",
        "index": 1630,
        "GT": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "DB": "concert_singer",
        "tables": [
            "singer",
            "concert",
            "singer_in_concert"
        ]
    },
    {
        "SQL": "select T1.CountryId , T1.CountryName , count ( * ) from countries as T1 join continents as T2 on T1.Continent = T2.ContId group by T2.Continent",
        "hyp_correct": false,
        "NL_query": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "index": 1633,
        "GT": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "DB": "car_1",
        "tables": [
            "continents",
            "countries"
        ]
    },
    {
        "SQL": "select T1.CountryId , T1.CountryName , count ( * ) from countries as T1 join continents as T2 on T1.Continent = T2.ContId group by T2.Continent",
        "hyp_correct": false,
        "NL_query": "For each continent, list its id, name, and how many countries it has?",
        "index": 1634,
        "GT": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "DB": "car_1",
        "tables": [
            "continents",
            "countries"
        ]
    },
    {
        "SQL": "select T1.Model , T3.FullName , T3.Maker , count ( * ) from car_names as T1 join model_list as T2 on T1.Model = T2.Model join car_makers as T3 on T2.Maker = T3.Id group by T3.Maker",
        "hyp_correct": false,
        "NL_query": "How many models does each car maker produce? List maker full name, id and the number.",
        "index": 1635,
        "GT": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select T1.FullName , T1.Maker , count ( * ) from car_makers as T1 join model_list as T2 on T1.Id = T2.Maker join car_names as T3 on T2.Model = T3.Model group by T1.Maker",
        "hyp_correct": false,
        "NL_query": "What is the full name of each car maker, along with its id and how many models it produces?",
        "index": 1636,
        "GT": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select count ( * ) , T3.FullName from car_names as T1 join model_list as T2 on T1.Model = T2.Model join car_makers as T3 on T2.Maker = T3.Id group by T3.Maker",
        "hyp_correct": false,
        "NL_query": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "index": 1637,
        "GT": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select Id , FullName , Maker from car_makers group by Maker",
        "hyp_correct": false,
        "NL_query": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "index": 1638,
        "GT": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "select T2.Accelerate from car_names as T1 join cars_data as T2 on T1.MakeId = T2.Id where T1.Make = \"amc hornet sportabout\" and T1.Make = 1",
        "hyp_correct": false,
        "NL_query": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "index": 1639,
        "GT": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "select T2.Accelerate from car_names as T1 join cars_data as T2 on T1.MakeId = T2.Id where T1.Make = \"amc hornet sportabout\"",
        "hyp_correct": false,
        "NL_query": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "index": 1640,
        "GT": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "select count ( T1.Maker ) from car_makers as T1 join countries as T2 on T1.Country = T2.CountryId join continents as T3 on T2.Continent = T3.ContId where T3.Continent = \"France\"",
        "hyp_correct": false,
        "NL_query": "What is the number of makers of care in France?",
        "index": 1642,
        "GT": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "DB": "car_1",
        "tables": [
            "continents",
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "select min ( Weight ) from cars_data where Year = 8",
        "hyp_correct": false,
        "NL_query": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "index": 1643,
        "GT": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select min ( Weight ) from cars_data where Year = 8",
        "hyp_correct": false,
        "NL_query": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "index": 1644,
        "GT": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select T1.Maker , T2.Maker from car_makers as T1 join model_list as T2 on T1.Id = T2.Maker",
        "hyp_correct": false,
        "NL_query": "What are all the makers and models?",
        "index": 1645,
        "GT": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "select T1.Maker , T2.Maker from car_makers as T1 join model_list as T2 on T1.Id = T2.Maker",
        "hyp_correct": false,
        "NL_query": "What are the makers and models?",
        "index": 1646,
        "GT": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "select T2.CountryName , T1.Maker from car_makers as T1 join countries as T2 on T1.Country = T2.CountryId group by T1.Country having count ( * ) >= 1",
        "hyp_correct": false,
        "NL_query": "What are the countries having at least one car maker? List name and id.",
        "index": 1647,
        "GT": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "select T2.CountryName , T1.Id from car_makers as T1 join countries as T2 on T1.Country = T2.CountryId group by T1.Country having count ( * ) >= 1",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of all countries with at least one car maker?",
        "index": 1648,
        "GT": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "select avg ( T6.Edispl ) from continents as T1 join countries as T2 on T1.ContId = T2.Continent join car_makers as T3 on T2.CountryId = T3.Country join model_list as T4 on T3.Id = T4.Maker join car_names as T5 on T4.Model = T5.Model join cars_data as T6 on T5.MakeId = T6.Id where T1.Continent = 1",
        "hyp_correct": false,
        "NL_query": "What is the average edispl for all volvos?",
        "index": 1652,
        "GT": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "DB": "car_1",
        "tables": [
            "car_names",
            "model_list",
            "continents",
            "car_makers",
            "cars_data",
            "countries"
        ]
    },
    {
        "SQL": "select Accelerate , count ( Horsepower ) from cars_data group by Cylinders",
        "hyp_correct": false,
        "NL_query": "What is the maximum accelerate for different number of cylinders?",
        "index": 1653,
        "GT": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select count ( * ) from car_makers as T1 join model_list as T2 on T1.Id = T2.Maker join car_names as T3 on T2.Model = T3.Model join cars_data as T4 on T3.MakeId = T4.Id where T1.Maker = \"American Motor Company\"",
        "hyp_correct": false,
        "NL_query": "How many car models were produced by the maker with full name American Motor Company?",
        "index": 1655,
        "GT": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "cars_data",
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select count ( * ) from car_makers where Maker = \"American Motor Company\"",
        "hyp_correct": false,
        "NL_query": "What is the number of car models created by the car maker American Motor Company?",
        "index": 1656,
        "GT": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "select T1.Maker , T1.FullName from car_makers as T1 join model_list as T2 on T1.Id = T2.Maker join car_names as T3 on T2.Model = T3.Model group by T2.Maker having count ( * ) > 3",
        "hyp_correct": false,
        "NL_query": "Which makers designed more than 3 car models? List full name and the id.",
        "index": 1657,
        "GT": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select T1.FullName , T1.Maker from car_makers as T1 join model_list as T2 on T1.Id = T2.Maker group by T2.Maker having count ( * ) > 3",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of all makers with more than 3 models?",
        "index": 1658,
        "GT": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "select count ( * ) from car_makers where Country > 2 group by Country",
        "hyp_correct": false,
        "NL_query": "What is the number of countries with more than 2 car makers ?",
        "index": 1662,
        "GT": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "select max ( Horsepower ) from cars_data where Cylinders < 8 or Year < 1980",
        "hyp_correct": false,
        "NL_query": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "index": 1663,
        "GT": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select max ( MPG ) from cars_data where Year < 8",
        "hyp_correct": false,
        "NL_query": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "index": 1664,
        "GT": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select City from employee where Age > 30 group by City having count ( * ) < 1",
        "hyp_correct": false,
        "NL_query": "Which cities do more than one employee under age 30 come from?",
        "index": 1667,
        "GT": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "DB": "employee_hire_evaluation",
        "tables": [
            "employee"
        ]
    },
    {
        "SQL": "select Name , District from shop group by Manager_name order by count ( Number_products ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the manager name and district of the shop whose number of products is the largest.",
        "index": 1671,
        "GT": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "DB": "employee_hire_evaluation",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "select Name , District from shop group by Manager_name order by count ( Number_products ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "What are the manager name and district of the shop that sells the largest number of products?",
        "index": 1672,
        "GT": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "DB": "employee_hire_evaluation",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "select count ( * ) , T1.Name from shop as T1 join hiring as T2 on T1.Shop_ID = T2.Shop_ID group by T1.Shop_ID",
        "hyp_correct": false,
        "NL_query": "For each shop, return the number of employees working there and the name of the shop.",
        "index": 1678,
        "GT": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "DB": "employee_hire_evaluation",
        "tables": [
            "hiring",
            "shop"
        ]
    },
    {
        "SQL": "select T3.Title , T3.Directed_by from TV_series as T1 join TV_Channel as T2 on T1.Channel = T2.id join Cartoon as T3 on T2.id = T3.Channel order by T1.Air_Date",
        "hyp_correct": false,
        "NL_query": "list all cartoon titles and their directors ordered by their air date",
        "index": 1679,
        "GT": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon",
            "tv_series"
        ]
    },
    {
        "SQL": "select Title from Cartoon where Directed_by = \"Ben Jones\" or Directed_by = \"brandonti\"",
        "hyp_correct": false,
        "NL_query": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "index": 1681,
        "GT": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "DB": "tvshow",
        "tables": [
            "cartoon"
        ]
    },
    {
        "SQL": "select Title from Cartoon where Directed_by = \"Ben Jones\" or Directed_by = \"Brandon\"",
        "hyp_correct": false,
        "NL_query": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "index": 1682,
        "GT": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "DB": "tvshow",
        "tables": [
            "cartoon"
        ]
    },
    {
        "SQL": "select count ( T1.series_name ) , T1.Content from TV_Channel as T1 join TV_series as T2 on T1.id = T2.Channel group by T2.Channel",
        "hyp_correct": false,
        "NL_query": "List the number of different series names and contents in the TV Channel table.",
        "index": 1683,
        "GT": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "tv_series"
        ]
    },
    {
        "SQL": "select count ( T1.series_name ) , T1.Content from TV_Channel as T1 join TV_series as T2 on T1.id = T2.Channel group by T2.Channel",
        "hyp_correct": false,
        "NL_query": "How many different series and contents are listed in the TV Channel table?",
        "index": 1684,
        "GT": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "tv_series"
        ]
    },
    {
        "SQL": "select T1.Channel from TV_series as T1 join TV_Channel as T2 on T1.Channel = T2.id join Cartoon as T3 on T2.id = T3.Channel where T3.Title = \"rise the blue beetle\"",
        "hyp_correct": false,
        "NL_query": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "index": 1687,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon",
            "tv_series"
        ]
    },
    {
        "SQL": "select T1.series_name from TV_Channel as T1 join Cartoon as T2 on T1.id = T2.Channel where T2.Title = \"rise the blue beetle\"",
        "hyp_correct": false,
        "NL_query": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "index": 1688,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    },
    {
        "SQL": "select min ( Share ) , max ( Share ) from TV_series",
        "hyp_correct": false,
        "NL_query": "What is minimum and maximum share of TV series?",
        "index": 1693,
        "GT": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "select Channel from TV_series where Episode = \"a love tv a lifetime\"",
        "hyp_correct": false,
        "NL_query": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "index": 1695,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "tv_series"
        ]
    },
    {
        "SQL": "select T1.series_name from TV_Channel as T1 join TV_series as T2 on T1.id = T2.Channel where T2.Episode = \"a love the lifetime\"",
        "hyp_correct": false,
        "NL_query": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "index": 1696,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "tv_series"
        ]
    },
    {
        "SQL": "select T2.Production_code , T2.Channel from TV_Channel as T1 join Cartoon as T2 on T1.id = T2.Channel order by T1.Content desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the production code and channel of the most recently aired cartoon .",
        "index": 1701,
        "GT": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    },
    {
        "SQL": "select T2.Title , T2.Channel from TV_Channel as T1 join Cartoon as T2 on T1.id = T2.Channel order by T1.Content desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the produdction code and channel of the most recent cartoon ?",
        "index": 1702,
        "GT": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    },
    {
        "SQL": "select Package_Option , series_name from TV_Channel where Hight_definition_TV = \"definition\"",
        "hyp_correct": false,
        "NL_query": "Find the package choice and series name of the TV channel that has high definition TV.",
        "index": 1703,
        "GT": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "select Package_Option , series_name from TV_Channel where Hight_definition_TV = \"high definition\"",
        "hyp_correct": false,
        "NL_query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "index": 1704,
        "GT": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "select Channel from Cartoon where Written_by = \"Todd\"",
        "hyp_correct": false,
        "NL_query": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "index": 1705,
        "GT": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    },
    {
        "SQL": "select T1.Country from TV_Channel as T1 join Cartoon as T2 on T1.id = T2.Channel where T2.Written_by = \"Todd\"",
        "hyp_correct": false,
        "NL_query": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "index": 1706,
        "GT": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    },
    {
        "SQL": "select Creation from department group by count ( * ) order by limit 1 ( desc )",
        "hyp_correct": false,
        "NL_query": "In which year were most departments established?",
        "index": 1710,
        "GT": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "DB": "department_management",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "select T2.catalog_level_name from Catalog_Contents as T1 join Catalog_Structure as T2 on T1.catalog_level_number = T2.catalog_level_number order by T1.price_in_pounds asc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the level name of the cheapest catalog (in USD)?",
        "index": 1713,
        "GT": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalog_structure"
        ]
    },
    {
        "SQL": "select catalog_level_number from Catalog_Contents order by price_in_dollars limit 1",
        "hyp_correct": false,
        "NL_query": "Find the level name of the catalog with the lowest price (in USD).",
        "index": 1714,
        "GT": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents",
            "catalog_structure"
        ]
    },
    {
        "SQL": "select T2.Title , T1.AlbumId from Track as T1 join Album as T2 on T1.AlbumId = T2.AlbumId where T1.UnitPrice > 1",
        "hyp_correct": false,
        "NL_query": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "index": 1715,
        "GT": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "select T2.Title , T1.AlbumId from Track as T1 join Album as T2 on T1.AlbumId = T2.AlbumId where T1.UnitPrice > 1",
        "hyp_correct": false,
        "NL_query": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "index": 1716,
        "GT": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "select T2.LastName from Invoice as T1 join Customer as T2 on T1.CustomerId = T2.CustomerId where T1.Total > 20 except select BillingState from Invoice",
        "hyp_correct": false,
        "NL_query": "Find all the customer last names that do not have invoice totals larger than 20.",
        "index": 1717,
        "GT": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "invoice"
        ]
    },
    {
        "SQL": "select T2.LastName from Invoice as T1 join Customer as T2 on T1.CustomerId = T2.CustomerId where T1.Total > 20 except select BillingState from Invoice",
        "hyp_correct": false,
        "NL_query": "What are the last names of customers without invoice totals exceeding 20?",
        "index": 1718,
        "GT": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "DB": "chinook_1",
        "tables": [
            "customer",
            "invoice"
        ]
    },
    {
        "SQL": "select avg ( T2.Milliseconds ) from Genre as T1 join Track as T2 on T1.GenreId = T2.GenreId where T1.Name = \"Latin\" and avg ( T2.Milliseconds )",
        "hyp_correct": false,
        "NL_query": "Find the average millisecond length of Latin and Pop tracks.",
        "index": 1720,
        "GT": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "DB": "chinook_1",
        "tables": [
            "track",
            "genre"
        ]
    },
    {
        "SQL": "select T1.Name , count ( * ) from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId group by T2.ArtistId having count ( * ) >= 3",
        "hyp_correct": false,
        "NL_query": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "index": 1721,
        "GT": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "select T1.Name , T2.ArtistId from Artist as T1 join Album as T2 on T1.ArtistId = T2.ArtistId group by T2.ArtistId having count ( * ) >= 3 order by T2.ArtistId",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "index": 1722,
        "GT": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "select Name from Artist where ArtistId not in ( select ArtistId from Album )",
        "hyp_correct": false,
        "NL_query": "Find the names of artists that do not have any albums.",
        "index": 1723,
        "GT": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "select Name from Artist where ArtistId not in ( select ArtistId from Album )",
        "hyp_correct": false,
        "NL_query": "What are the names of artists who have not released any albums?",
        "index": 1724,
        "GT": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "DB": "chinook_1",
        "tables": [
            "artist",
            "album"
        ]
    },
    {
        "SQL": "select T3.name from medicine as T1 join medicine_enzyme_interaction as T2 on T1.id = T2.medicine_id join enzyme as T3 on T2.enzyme_id = T3.id where T1.name = 'Amisulpride' and T3.Porphyria = inhibitor'",
        "hyp_correct": false,
        "NL_query": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "index": 1725,
        "GT": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme",
            "medicine",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select T3.name from medicine as T1 join medicine_enzyme_interaction as T2 on T1.id = T2.medicine_id join enzyme as T3 on T2.enzyme_id = T3.id where T1.name = \"Amisulpride\" and T3.Porphyria = 1",
        "hyp_correct": false,
        "NL_query": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "index": 1726,
        "GT": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "enzyme",
            "medicine",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select id , name , FDA_approved from medicine order by FDA_approved desc limit 1",
        "hyp_correct": false,
        "NL_query": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "index": 1727,
        "GT": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select id , name , FDA_approved from medicine order by FDA_approved desc",
        "hyp_correct": false,
        "NL_query": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "index": 1728,
        "GT": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine",
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select interaction_type , count ( * ) from medicine_enzyme_interaction group by interaction_type order by count ( * ) desc limit '1",
        "hyp_correct": false,
        "NL_query": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "index": 1731,
        "GT": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select interaction_type , count ( * ) from medicine_enzyme_interaction group by interaction_type order by count ( * ) desc limit 'enzymes'",
        "hyp_correct": false,
        "NL_query": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "index": 1732,
        "GT": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction"
        ]
    },
    {
        "SQL": "select Founded from university where max ( select Founded from university ) order by limit '",
        "hyp_correct": false,
        "NL_query": "Find the founded year of the newest non public school.",
        "index": 1733,
        "GT": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select Founded from university order by Founded desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the founded year of the non public school that was founded most recently?",
        "index": 1734,
        "GT": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "select T2.Team_Name , T2.ACC_Regular_Season from university as T1 join basketball_match as T2 on T1.School_ID = T2.School_ID order by T1.Founded desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "index": 1737,
        "GT": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university",
            "basketball_match"
        ]
    },
    {
        "SQL": "select T2.Team_Name , T1.Founded from university as T1 join basketball_match as T2 on T1.School_ID = T2.School_ID order by T2.ACC_Regular_Season asc limit \"acc\"",
        "hyp_correct": false,
        "NL_query": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "index": 1738,
        "GT": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university",
            "basketball_match"
        ]
    },
    {
        "SQL": "select T2.id from Player_Attributes as T1 join Player as T2 on T1.player_fifa_api_id = T2.player_fifa_api_id where T2.height >= 180 and T1.overall_rating > 85",
        "hyp_correct": false,
        "NL_query": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "index": 1739,
        "GT": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "select sum ( T1.overall_rating ) from Player_Attributes as T1 join Player as T2 on T1.player_fifa_api_id = T2.player_fifa_api_id order by T2.player_name limit 3",
        "hyp_correct": false,
        "NL_query": "Who are the top 3 players in terms of overall rating?",
        "index": 1740,
        "GT": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "select T2.player_name , T2.birthday from Player_Attributes as T1 join Player as T2 on T1.player_fifa_api_id = T2.player_fifa_api_id order by T1.potential desc limit 5",
        "hyp_correct": false,
        "NL_query": "List the names and birthdays of the top five players in terms of potential.",
        "index": 1741,
        "GT": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "select Party from people order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Show the party that has the most people.",
        "index": 1748,
        "GT": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "DB": "debate",
        "tables": [
            "people"
        ]
    },
    {
        "SQL": "select T2.Name , T3.Date , T3.Venue from debate_people as T1 join people as T2 on T1.Affirmative = T2.People_ID join debate as T3 on T1.Debate_ID = T3.Debate_ID order by T1.Negative asc",
        "hyp_correct": false,
        "NL_query": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
        "index": 1749,
        "GT": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",
        "DB": "debate",
        "tables": [
            "debate",
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "select T2.Name from debate_people as T1 join people as T2 on T1.Affirmative = T2.People_ID where T1.Affirmative > \"affirmative\"",
        "hyp_correct": false,
        "NL_query": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "index": 1750,
        "GT": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "DB": "debate",
        "tables": [
            "debate",
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "select Customer_ID from Customers where Customer_ID not in ( select Customer_ID from Policies )",
        "hyp_correct": false,
        "NL_query": "Find the names of customers who have no policies associated.",
        "index": 1754,
        "GT": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "DB": "insurance_and_eClaims",
        "tables": [
            "policies",
            "customers"
        ]
    },
    {
        "SQL": "select Customer_ID from Customers where Customer_ID not in ( select Customer_ID from Policies )",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who do not have any policies?",
        "index": 1755,
        "GT": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "DB": "insurance_and_eClaims",
        "tables": [
            "policies",
            "customers"
        ]
    },
    {
        "SQL": "select count ( T2.Customer_Details ) from Policies as T1 join Customers as T2 on T1.Customer_ID = T2.Customer_ID where T1.Policy_Type_Code = 'deputy' or T1.Policy_Type_Code = \"uniformed\"",
        "hyp_correct": false,
        "NL_query": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "index": 1756,
        "GT": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "policies",
            "customers"
        ]
    },
    {
        "SQL": "select from Staff select count ( Staff_Details ) from Staff",
        "hyp_correct": false,
        "NL_query": "Find the names of all the customers and staff members.",
        "index": 1758,
        "GT": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers",
            "staff"
        ]
    },
    {
        "SQL": "select T1.Staff_Details , max ( T5.Customer_Details ) from Staff as T1 join Claims_Processing as T2 on T1.Staff_ID = T2.Staff_ID join Claim_Headers as T3 on T2.Claim_ID = T3.Claim_Header_ID join Policies as T4 on T3.Policy_ID = T4.Policy_ID join Customers as T5 on T4.Customer_ID = T5.Customer_ID",
        "hyp_correct": false,
        "NL_query": "What are the names of the customers and staff members?",
        "index": 1759,
        "GT": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "DB": "insurance_and_eClaims",
        "tables": [
            "staff",
            "claims_processing",
            "claim_headers",
            "policies",
            "customers"
        ]
    },
    {
        "SQL": "select avg ( transaction_id ) from Financial_Transactions where transaction_amount > ( select avg ( transaction_amount ) from Financial_Transactions )",
        "hyp_correct": false,
        "NL_query": "Show ids for all transactions whose amounts are greater than the average.",
        "index": 1762,
        "GT": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "DB": "customers_and_invoices",
        "tables": [
            "financial_transactions"
        ]
    },
    {
        "SQL": "select avg ( transaction_id ) from Financial_Transactions where transaction_amount > ( select avg ( transaction_amount ) from Financial_Transactions )",
        "hyp_correct": false,
        "NL_query": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
        "index": 1763,
        "GT": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "DB": "customers_and_invoices",
        "tables": [
            "financial_transactions"
        ]
    },
    {
        "SQL": "select product_name from Products where product_name not in ( select product_id from Order_Items )",
        "hyp_correct": false,
        "NL_query": "Show all product names without an order.",
        "index": 1766,
        "GT": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "DB": "customers_and_invoices",
        "tables": [
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "select product_name from Products where product_id not in ( select product_id from Order_Items )",
        "hyp_correct": false,
        "NL_query": "What are the names of products that have never been ordered?",
        "index": 1767,
        "GT": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "DB": "customers_and_invoices",
        "tables": [
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "select count ( T3.customer_id ) , T1.product_name from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id join Orders as T3 on T2.order_id = T3.order_id group by T3.customer_id",
        "hyp_correct": false,
        "NL_query": "Show all product names and the number of customers having an order on each product.",
        "index": 1768,
        "GT": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "DB": "customers_and_invoices",
        "tables": [
            "products",
            "order_items",
            "orders"
        ]
    },
    {
        "SQL": "select T1.product_name , count ( T2.product_title ) from Products as T1 join Invoice_Line_Items as T2 on T1.product_id = T2.product_id group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "index": 1769,
        "GT": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "DB": "customers_and_invoices",
        "tables": [
            "products",
            "order_items",
            "orders",
            "invoice_line_items"
        ]
    },
    {
        "SQL": "select count ( * ) from SAVINGS where balance > ( select avg ( balance ) from CHECKING )",
        "hyp_correct": false,
        "NL_query": "How many accounts have a savings balance above the average savings balance?",
        "index": 1770,
        "GT": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings"
        ]
    },
    {
        "SQL": "select count ( * ) from ACCOUNTS as T1 join SAVINGS as T2 on T1.custid = T2.custid where T2.balance > ( select avg ( balance ) from CHECKING )",
        "hyp_correct": false,
        "NL_query": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
        "index": 1771,
        "GT": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T2.balance from ACCOUNTS as T1 join CHECKING as T2 on T1.custid = T2.custid where T1.name like \"% ee %\"",
        "hyp_correct": false,
        "NL_query": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "index": 1772,
        "GT": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.balance , T2.balance from SAVINGS as T1 join CHECKING as T2 on T1.custid = T2.custid where T1.balance > \"Brown\"",
        "hyp_correct": false,
        "NL_query": "What are the checking and savings balances in accounts belonging to Brown?",
        "index": 1775,
        "GT": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name , T3.balance , T2.balance from ACCOUNTS as T1 join CHECKING as T2 on T1.custid = T2.custid join SAVINGS as T3 on T1.custid = T3.custid order by T2.balance desc",
        "hyp_correct": false,
        "NL_query": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "index": 1776,
        "GT": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name , T2.balance , T3.balance from ACCOUNTS as T1 join CHECKING as T2 on T1.custid = T2.custid join SAVINGS as T3 on T1.custid = T3.custid order by T3.balance desc",
        "hyp_correct": false,
        "NL_query": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "index": 1777,
        "GT": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name from ACCOUNTS as T1 join SAVINGS as T2 on T1.custid = T2.custid where T2.balance > ( select T4.balance from SAVINGS as T3 join CHECKING as T4 on T3.custid = T4.custid where T3.balance > 1 )",
        "hyp_correct": false,
        "NL_query": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "index": 1778,
        "GT": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name from ACCOUNTS as T1 join SAVINGS as T2 on T1.custid = T2.custid where T2.balance > ( select T4.balance from SAVINGS as T3 join CHECKING as T4 on T3.custid = T4.custid where T3.balance > 1 )",
        "hyp_correct": false,
        "NL_query": "What are the names of customers with a higher checking balance than savings balance?",
        "index": 1779,
        "GT": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name , T3.balance from ACCOUNTS as T1 join CHECKING as T2 on T1.custid = T2.custid join SAVINGS as T3 on T1.custid = T3.custid where T2.balance < 1",
        "hyp_correct": false,
        "NL_query": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "index": 1780,
        "GT": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name , sum ( T3.balance ) from ACCOUNTS as T1 join CHECKING as T2 on T1.custid = T2.custid join SAVINGS as T3 on T1.custid = T3.custid where T2.balance < 1 group by T3.balance",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "index": 1781,
        "GT": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name , T3.balance from ACCOUNTS as T1 join CHECKING as T2 on T1.custid = T2.custid join SAVINGS as T3 on T1.custid = T3.custid order by T2.balance desc limit 3",
        "hyp_correct": false,
        "NL_query": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "index": 1782,
        "GT": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select T1.name , T2.balance from ACCOUNTS as T1 join CHECKING as T2 on T1.custid = T2.custid join SAVINGS as T3 on T1.custid = T3.custid order by T3.balance desc limit 3",
        "hyp_correct": false,
        "NL_query": "What are names and savings balances of the three accounts with the highest savings balances?",
        "index": 1783,
        "GT": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "select donator_name from endowment where amount < 9",
        "hyp_correct": false,
        "NL_query": "Show the names of all the donors except those whose donation amount less than 9.",
        "index": 1786,
        "GT": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "DB": "school_finance",
        "tables": [
            "endowment"
        ]
    },
    {
        "SQL": "select count ( * ) from Institution as T1 join protein as T2 on T1.Institution_id = T2.Institution_id where T1.Type = 1880 or T1.Founded > \"Private\"",
        "hyp_correct": false,
        "NL_query": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "index": 1792,
        "GT": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "DB": "protein_institute",
        "tables": [
            "institution",
            "protein"
        ]
    },
    {
        "SQL": "select customer_id , sum ( amount_paid ) from Payments group by customer_id",
        "hyp_correct": false,
        "NL_query": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "index": 1794,
        "GT": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "DB": "products_for_hire",
        "tables": [
            "payments"
        ]
    },
    {
        "SQL": "select T1.booking_start_date , T1.booking_end_date from Bookings as T1 join View_Product_Availability as T2 on T1.booking_id = T2.booking_id join Products_for_Hire as T3 on T2.product_id = T3.product_id where T3.product_name = 'Book collection A'",
        "hyp_correct": false,
        "NL_query": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "index": 1795,
        "GT": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
        "DB": "products_for_hire",
        "tables": [
            "products_for_hire",
            "view_product_availability",
            "bookings",
            "products_booked"
        ]
    },
    {
        "SQL": "select T2.document_id , count ( * ) from Document_Drafts as T1 join Draft_Copies as T2 on T1.document_id = T2.document_id group by T1.draft_number order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Which document has the most draft copies? List its document id and number of draft copies.",
        "index": 1801,
        "GT": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "document_drafts",
            "draft_copies"
        ]
    },
    {
        "SQL": "select employee_name from Employees where employee_id not in ( select employee_id from Circulation_History )",
        "hyp_correct": false,
        "NL_query": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "index": 1802,
        "GT": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "circulation_history"
        ]
    },
    {
        "SQL": "select count ( * ) from Participants as T1 join Participants_in_Events as T2 on T1.Participant_ID = T2.Participant_ID join Events as T3 on T2.Event_ID = T3.Event_ID where T1.Participant_Details like '%Dr%'",
        "hyp_correct": false,
        "NL_query": "How many events had participants whose details had the substring 'Dr.'",
        "index": 1803,
        "GT": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "DB": "local_govt_in_alabama",
        "tables": [
            "events",
            "participants_in_events",
            "participants"
        ]
    },
    {
        "SQL": "select Participant_ID from Participants_in_Events group by Participant_ID order by count () desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the id of the event with the most participants?",
        "index": 1805,
        "GT": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
        "DB": "local_govt_in_alabama",
        "tables": [
            "participants_in_events"
        ]
    },
    {
        "SQL": "select Event_ID from Events except select participants_in_Events.Event_ID from Participants as T1 join Participants_in_Events as T2 on T1.Participant_ID = T2.Participant_ID where T1.Participant_Details = \"Kenyatta Kuhn\"",
        "hyp_correct": false,
        "NL_query": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "index": 1806,
        "GT": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "DB": "local_govt_in_alabama",
        "tables": [
            "events",
            "participants_in_events",
            "participants"
        ]
    },
    {
        "SQL": "select T2.Date_of_Birth from entrepreneur as T1 join people as T2 on T1.People_ID = T2.People_ID where T1.Investor = \"Simon Woodroffe\" or T2.Name = \"Peter Jones\"",
        "hyp_correct": false,
        "NL_query": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
        "index": 1810,
        "GT": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select Name from people except select T2.Name from entrepreneur as T1 join people as T2 on T1.People_ID = T2.People_ID where T1.People_ID = 1",
        "hyp_correct": false,
        "NL_query": "What are the names of people who are not entrepreneurs?",
        "index": 1814,
        "GT": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "DB": "entrepreneur",
        "tables": [
            "entrepreneur",
            "people"
        ]
    },
    {
        "SQL": "select Country from perpetrator where Country = \"China\" or Country = \"Japan\"",
        "hyp_correct": false,
        "NL_query": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "index": 1820,
        "GT": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "DB": "perpetrator",
        "tables": [
            "perpetrator",
            "people"
        ]
    },
    {
        "SQL": "select Country from perpetrator order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the country that has the most perpetrators?",
        "index": 1821,
        "GT": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "DB": "perpetrator",
        "tables": [
            "perpetrator"
        ]
    },
    {
        "SQL": "select Name from people where Sex = \"f\" order by Name",
        "hyp_correct": false,
        "NL_query": "list all female (sex is F) candidate names in the alphabetical order.",
        "index": 1831,
        "GT": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "DB": "candidate_poll",
        "tables": [
            "candidate",
            "people"
        ]
    },
    {
        "SQL": "select Name from people where Sex = 'f' order by Name",
        "hyp_correct": false,
        "NL_query": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "index": 1832,
        "GT": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "DB": "candidate_poll",
        "tables": [
            "candidate",
            "people"
        ]
    },
    {
        "SQL": "select T2.Comptroller from election as T1 join party as T2 on T1.Party = T2.Party_ID where T1.District = 1 or T1.District = 1",
        "hyp_correct": false,
        "NL_query": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "index": 1835,
        "GT": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "select T2.Party from election as T1 join party as T2 on T1.Party = T2.Party_ID where T1.District = 2 or T2.Comptroller = 1",
        "hyp_correct": false,
        "NL_query": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "index": 1836,
        "GT": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "DB": "election",
        "tables": [
            "party",
            "election"
        ]
    },
    {
        "SQL": "select T1.Population , T3.Comptroller from county as T1 join election as T2 on T1.County_Id = T2.District join party as T3 on T2.Party = T3.Party_ID group by T3.Comptroller order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "index": 1839,
        "GT": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "DB": "election",
        "tables": [
            "county",
            "party",
            "election"
        ]
    },
    {
        "SQL": "select T1.Population , T3.Comptroller from county as T1 join election as T2 on T1.County_Id = T2.District join party as T3 on T2.Party = T3.Party_ID group by T3.Comptroller order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "index": 1840,
        "GT": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "DB": "election",
        "tables": [
            "county",
            "party",
            "election"
        ]
    },
    {
        "SQL": "select T3.Name , T1.Name from event as T1 join news_report as T2 on T1.Event_ID = T2.Event_ID join journalist as T3 on T2.journalist_ID = T3.journalist_ID order by T3.Name",
        "hyp_correct": false,
        "NL_query": "Show the names of journalists and the names of the events they reported in ascending order",
        "index": 1845,
        "GT": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
        "DB": "news_report",
        "tables": [
            "news_report",
            "event",
            "journalist"
        ]
    },
    {
        "SQL": "select T1.cust_name from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID group by T2.cust_ID order by sum ( T2.amount ) desc",
        "hyp_correct": false,
        "NL_query": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "index": 1849,
        "GT": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select T1.cust_name from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID order by T2.amount desc",
        "hyp_correct": false,
        "NL_query": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "index": 1850,
        "GT": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select cust_name from customer where cust_ID not in ( select acc_bal from customer )",
        "hyp_correct": false,
        "NL_query": "Find the name of customers who do not have an saving account.",
        "index": 1853,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select cust_name from customer where cust_ID not in ( select acc_bal from customer )",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who do not have saving accounts?",
        "index": 1854,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select cust_name from customer except select T1.cust_name from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID where T2.loan_type = 'Mortgage'",
        "hyp_correct": false,
        "NL_query": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "index": 1855,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select cust_name from customer where cust_ID not in ( select cust_ID from loan where loan_type = 'Mortage' )",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who have not taken a Mortage loan?",
        "index": 1856,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select cust_name from customer where credit_score < ( select avg ( no_of_loans ) from customer )",
        "hyp_correct": false,
        "NL_query": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "index": 1857,
        "GT": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "select state from customer group by state order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the state which has the most number of customers.",
        "index": 1859,
        "GT": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select T2.state from customer as T1 join bank as T2 on T1.branch_ID = T2.branch_ID group by T1.state order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Which state has the greatest total number of bank customers?",
        "index": 1860,
        "GT": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "DB": "loan_1",
        "tables": [
            "customer",
            "bank"
        ]
    },
    {
        "SQL": "select cust_name from customer where credit_score < 100",
        "hyp_correct": false,
        "NL_query": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "index": 1861,
        "GT": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "select no_of_loans from customer where credit_score < 100",
        "hyp_correct": false,
        "NL_query": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "index": 1862,
        "GT": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "select avg ( T1.credit_score ) from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID where T2.cust_ID = 1",
        "hyp_correct": false,
        "NL_query": "Find the average credit score of the customers who have some loan.",
        "index": 1863,
        "GT": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select avg ( T1.credit_score ) from customer as T1 join loan as T2 on T1.cust_ID = T2.cust_ID where T2.cust_ID = 'loan'",
        "hyp_correct": false,
        "NL_query": "What is the average credit score for customers who have taken a loan?",
        "index": 1864,
        "GT": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "DB": "loan_1",
        "tables": [
            "customer",
            "loan"
        ]
    },
    {
        "SQL": "select Country from competition where Competition_type = 1 intersect select Country from competition",
        "hyp_correct": false,
        "NL_query": "which countries did participated in both Friendly and Tournament type competitions.",
        "index": 1877,
        "GT": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "select Country from competition where Competition_type = 1 intersect select Country from competition",
        "hyp_correct": false,
        "NL_query": "What are the countries that participated in both friendly and tournament type competitions?",
        "index": 1878,
        "GT": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "select Country from competition except select Country from competition where Competition_type = 1",
        "hyp_correct": false,
        "NL_query": "Find the countries that have never participated in any competition with Friendly type.",
        "index": 1879,
        "GT": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "select Country from competition except select Country from competition where Competition_type = 'friendly'",
        "hyp_correct": false,
        "NL_query": "What are the countries that have never participated in any friendly-type competitions?",
        "index": 1880,
        "GT": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "select T1.artist_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name order by T2.artist_name asc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the artist who produced the shortest song?",
        "index": 1881,
        "GT": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist",
            "files"
        ]
    },
    {
        "SQL": "select T1.artist_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name order by limit 1 ( T2.song_name ) asc",
        "hyp_correct": false,
        "NL_query": "What are the names of the artists who sang the shortest song?",
        "index": 1882,
        "GT": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist",
            "files"
        ]
    },
    {
        "SQL": "select artist_name , country from song order by rating desc limit 3",
        "hyp_correct": false,
        "NL_query": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "index": 1883,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select song_name , country from song order by rating desc limit 3",
        "hyp_correct": false,
        "NL_query": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "index": 1884,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.artist_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T1.country = \"UK\" and T2.country = \"English\"",
        "hyp_correct": false,
        "NL_query": "Find the names of the artists who are from UK and have produced English songs.",
        "index": 1887,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.artist_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T1.country = \"UK\" and T2.languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "What are the names of the artists that are from the UK and sang songs in English?",
        "index": 1888,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.file_size from files as T1 join song as T2 on T1.f_id = T2.f_id where T1.formats = \"mp4\" and T2.resolution < 1000",
        "hyp_correct": false,
        "NL_query": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "index": 1890,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select song_name from song where resolution > ( select min ( resolution ) from song where languages = \"English\" )",
        "hyp_correct": false,
        "NL_query": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "index": 1893,
        "GT": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select song_name from song where resolution > ( select min ( resolution ) from song where languages = \"English\" )",
        "hyp_correct": false,
        "NL_query": "What are the different names for all songs that have a higher resolution than English songs?",
        "index": 1894,
        "GT": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select song_name from song where rating < ( select min ( T1.rating ) from genre as T1 join song as T2 on T1.g_name = T2.genre_is where T2.genre_is = \"blues\" )",
        "hyp_correct": false,
        "NL_query": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "index": 1895,
        "GT": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "select song_name from song where rating > ( select min ( T2.rating ) from genre as T1 join song as T2 on T1.g_name = T2.genre_is where T1.rating < \"blues\" )",
        "hyp_correct": false,
        "NL_query": "What are the names of the songs that have a lower rating than at least one blues song?",
        "index": 1896,
        "GT": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "DB": "music_1",
        "tables": [
            "song",
            "genre"
        ]
    },
    {
        "SQL": "select T1.artist_name , T1.country from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.song_name like \"% love %\"",
        "hyp_correct": false,
        "NL_query": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "index": 1897,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.artist_name , T2.song_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.artist_name like '%love%'",
        "hyp_correct": false,
        "NL_query": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "index": 1898,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.artist_name , T1.gender from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.releasedate = \"March\"",
        "hyp_correct": false,
        "NL_query": "List the name and gender for all artists who released songs in March.",
        "index": 1899,
        "GT": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select artist_name , gender from artist where preferred_genre like \"March\"",
        "hyp_correct": false,
        "NL_query": "What are the names and genders of all artists who released songs in the month of March?",
        "index": 1900,
        "GT": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select f_id from song where resolution > \"mp4\" or resolution > 720",
        "hyp_correct": false,
        "NL_query": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "index": 1902,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select T1.artist_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T1.country = \"UK\" and T2.languages = \"English\"",
        "hyp_correct": false,
        "NL_query": "Return the names of singers who are from UK and released an English song.",
        "index": 1905,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select song_name from song where country = \"UK\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all singers that are from the UK and released a song in English?",
        "index": 1906,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select max ( T2.resolution ) , min ( T2.resolution ) from files as T1 join song as T2 on T1.f_id = T2.f_id where T1.duration = 3",
        "hyp_correct": false,
        "NL_query": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "index": 1907,
        "GT": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select max ( resolution ) , min ( resolution ) from song where resolution < 3",
        "hyp_correct": false,
        "NL_query": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
        "index": 1908,
        "GT": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select max ( T1.duration ) , T2.languages from files as T1 join song as T2 on T1.f_id = T2.f_id group by T2.languages",
        "hyp_correct": false,
        "NL_query": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "index": 1909,
        "GT": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select max ( resolution ) , languages from song group by languages",
        "hyp_correct": false,
        "NL_query": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?",
        "index": 1910,
        "GT": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select T1.duration , T3.rating from files as T1 join song as T2 on T1.f_id = T2.f_id join genre as T3 on T2.genre_is = T3.g_name order by T2.genre_is , T3.g_name",
        "hyp_correct": false,
        "NL_query": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "index": 1911,
        "GT": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "DB": "music_1",
        "tables": [
            "song",
            "genre",
            "files"
        ]
    },
    {
        "SQL": "select song_name , genre_is , min ( rating ) from song group by genre_is",
        "hyp_correct": false,
        "NL_query": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?",
        "index": 1912,
        "GT": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select count ( * ) , artist_name from song group by languages having count ( * ) >= \"English\"",
        "hyp_correct": false,
        "NL_query": "Find the names and number of works of all artists who have at least one English songs.",
        "index": 1913,
        "GT": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select count ( * ) , count ( * ) from song where languages = \"English\" group by languages",
        "hyp_correct": false,
        "NL_query": "What are the names and number of works for all artists who have sung at least one song in English?",
        "index": 1914,
        "GT": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T2.country , T1.country from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.resolution > 900 group by T2.country",
        "hyp_correct": false,
        "NL_query": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "index": 1915,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.artist_name , T2.country from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.resolution > 900",
        "hyp_correct": false,
        "NL_query": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
        "index": 1916,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select song_name from song where rating < ( select min ( rating ) from song )",
        "hyp_correct": false,
        "NL_query": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "index": 1917,
        "GT": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select song_name from song where rating < ( select min ( rating ) from song )",
        "hyp_correct": false,
        "NL_query": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "index": 1918,
        "GT": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "select duration , file_size , formats from files order by duration , formats",
        "hyp_correct": false,
        "NL_query": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
        "index": 1924,
        "GT": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "DB": "music_1",
        "tables": [
            "song",
            "files"
        ]
    },
    {
        "SQL": "select T1.artist_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.rating > \"English\" except select artist_name from song where languages = 8",
        "hyp_correct": false,
        "NL_query": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "index": 1925,
        "GT": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.artist_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.rating > \"English\" except select artist_name from song where languages = 8",
        "hyp_correct": false,
        "NL_query": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "index": 1926,
        "GT": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T1.artist_name from artist as T1 join song as T2 on T1.artist_name = T2.artist_name where T2.rating > \"Bangladesh\" except select T4.artist_name from artist as T3 join song as T4 on T3.artist_name = T4.artist_name where T3.country = 7",
        "hyp_correct": false,
        "NL_query": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
        "index": 1928,
        "GT": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "select T2.Name from Affiliated_With as T1 join Physician as T2 on T1.Physician = T2.EmployeeID where T1.Physician not in ( select Physician from Appointment )",
        "hyp_correct": false,
        "NL_query": "Which physicians have never taken any appointment? Find their names.",
        "index": 1929,
        "GT": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "DB": "hospital_1",
        "tables": [
            "appointment",
            "affiliated_with",
            "physician"
        ]
    },
    {
        "SQL": "select T2.Name , T1.Name from Department as T1 join Physician as T2 on T1.Head = T2.EmployeeID",
        "hyp_correct": false,
        "NL_query": "Find the names of all physicians and their primary affiliated departments' names.",
        "index": 1930,
        "GT": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "affiliated_with",
            "department",
            "physician"
        ]
    },
    {
        "SQL": "select T3.Name , T1.Name , T2.Department from Department as T1 join Affiliated_With as T2 on T1.DepartmentID = T2.Department join Physician as T3 on T1.Head = T3.EmployeeID",
        "hyp_correct": false,
        "NL_query": "What are the name and primarily affiliated department name of each physician?",
        "index": 1931,
        "GT": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "affiliated_with",
            "department",
            "physician"
        ]
    },
    {
        "SQL": "select T1.Name from Nurse as T1 join Appointment as T2 on T1.EmployeeID = T2.PrepNurse order by T2.Patient desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the patient who made the most recent appointment?",
        "index": 1932,
        "GT": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "nurse",
            "appointment"
        ]
    },
    {
        "SQL": "select T2.Patient from Prescribes as T1 join Appointment as T2 on T1.Appointment = T2.AppointmentID order by T1.Date desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the name of the patient who made the appointment with the most recent start date.",
        "index": 1933,
        "GT": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "prescribes",
            "appointment"
        ]
    },
    {
        "SQL": "select count ( * ) from Prescribes as T1 join Physician as T2 on T1.Physician = T2.EmployeeID where T2.Name = \"John Dorian\"",
        "hyp_correct": false,
        "NL_query": "How many patients' prescriptions are made by physician John Dorian?",
        "index": 1934,
        "GT": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "prescribes",
            "physician"
        ]
    },
    {
        "SQL": "select count ( * ) from Prescribes as T1 join Undergoes as T2 on T1.Physician = T2.Physician join Nurse as T3 on T2.AssistingNurse = T3.EmployeeID join Physician as T4 on T1.Physician = T4.EmployeeID where T4.Name = \"John Dorian\" and T3.Name = 1",
        "hyp_correct": false,
        "NL_query": "Find the number of patients' prescriptions physician John Dorian made.",
        "index": 1935,
        "GT": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "undergoes",
            "nurse",
            "physician",
            "prescribes"
        ]
    },
    {
        "SQL": "select T3.Name from Medication as T1 join Prescribes as T2 on T1.Code = T2.Medication join Physician as T3 on T2.Physician = T3.EmployeeID where T1.Name = \"Thesisin\"",
        "hyp_correct": false,
        "NL_query": "What is the names of the physicians who prescribe medication Thesisin?",
        "index": 1938,
        "GT": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "medication",
            "physician"
        ]
    },
    {
        "SQL": "select T4.Name from Medication as T1 join Prescribes as T2 on T1.Code = T2.Medication join Undergoes as T3 on T2.Physician = T3.Physician join Nurse as T4 on T3.AssistingNurse = T4.EmployeeID where T1.Name = \"Thesisin\"",
        "hyp_correct": false,
        "NL_query": "List the names of all the physicians who prescribe Thesisin as medication.",
        "index": 1939,
        "GT": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "DB": "hospital_1",
        "tables": [
            "undergoes",
            "nurse",
            "medication",
            "physician",
            "prescribes"
        ]
    },
    {
        "SQL": "select T2.Name from Undergoes as T1 join Nurse as T2 on T1.AssistingNurse = T2.EmployeeID where T1.Stay = 111",
        "hyp_correct": false,
        "NL_query": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "index": 1942,
        "GT": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "DB": "hospital_1",
        "tables": [
            "nurse",
            "stay",
            "undergoes",
            "patient"
        ]
    },
    {
        "SQL": "select T2.Name from Undergoes as T1 join Nurse as T2 on T1.AssistingNurse = T2.EmployeeID join Stay as T3 on T1.Stay = T3.StayID where T3.Room = 111 and T1.Stay = 1",
        "hyp_correct": false,
        "NL_query": "What are the names of patients who are staying in room 111 and have an undergoing treatment?",
        "index": 1943,
        "GT": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "DB": "hospital_1",
        "tables": [
            "nurse",
            "stay",
            "undergoes",
            "patient"
        ]
    },
    {
        "SQL": "select Physician from Prescribes order by Dose desc limit 1",
        "hyp_correct": false,
        "NL_query": "What are the names of the physician who prescribed the highest dose?",
        "index": 1944,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "physician"
        ]
    },
    {
        "SQL": "select T3.Name from Prescribes as T1 join Undergoes as T2 on T1.Physician = T2.Physician join Nurse as T3 on T2.AssistingNurse = T3.EmployeeID order by T1.Dose desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the physician who prescribed the highest dose. What is his or her name?",
        "index": 1945,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "undergoes",
            "nurse",
            "prescribes",
            "physician"
        ]
    },
    {
        "SQL": "select T3.Physician from Procedures as T1 join Trained_In as T2 on T1.Code = T2.Treatment join Appointment as T3 on T2.Physician = T3.Physician where T1.Cost > 5000",
        "hyp_correct": false,
        "NL_query": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "index": 1946,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician",
            "appointment"
        ]
    },
    {
        "SQL": "select T3.Physician from Procedures as T1 join Trained_In as T2 on T1.Code = T2.Treatment join Appointment as T3 on T2.Physician = T3.Physician where T1.Cost > 5000",
        "hyp_correct": false,
        "NL_query": "Which physicians are trained in procedures that are more expensive than 5000?",
        "index": 1947,
        "GT": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician",
            "appointment"
        ]
    },
    {
        "SQL": "select T1.Name from Medication as T1 join Prescribes as T2 on T1.Code = T2.Medication join Physician as T3 on T2.Physician = T3.EmployeeID where T3.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "Find the names of procedures which physician John Wen was trained in.",
        "index": 1950,
        "GT": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "medication",
            "physician",
            "procedures",
            "prescribes"
        ]
    },
    {
        "SQL": "select T1.Name from Nurse as T1 join Physician as T2 on T1.EmployeeID = T2.EmployeeID where T2.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "What are the names of procedures physician John Wen was trained in?",
        "index": 1951,
        "GT": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "nurse",
            "physician"
        ]
    },
    {
        "SQL": "select T1.Name from Procedures as T1 join Trained_In as T2 on T1.Code = T2.Treatment join Physician as T3 on T2.Physician = T3.EmployeeID where T1.Cost > 1000 or T3.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "index": 1952,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "select T1.Name from Procedures as T1 join Trained_In as T2 on T1.Code = T2.Treatment join Physician as T3 on T2.Physician = T3.EmployeeID where T1.Cost > 1000 or T3.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
        "index": 1953,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "select T1.Name from Procedures as T1 join Trained_In as T2 on T1.Code = T2.Treatment join Physician as T3 on T2.Physician = T3.EmployeeID where T1.Cost > 1000 and T3.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "index": 1954,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "select T1.Name from Procedures as T1 join Trained_In as T2 on T1.Code = T2.Treatment join Physician as T3 on T2.Physician = T3.EmployeeID where T1.Cost != 1000 and T3.Name != \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
        "index": 1955,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "select T1.Name from Procedures as T1 join Trained_In as T2 on T1.Code = T2.Treatment join Physician as T3 on T2.Physician = T3.EmployeeID where T1.Cost < 5000 and T3.Name = \"John Wen\"",
        "hyp_correct": false,
        "NL_query": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
        "index": 1956,
        "GT": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "select T1.Name from Procedures as T1 join Trained_In as T2 on T1.Code = T2.Treatment join Physician as T3 on T2.Physician = T3.EmployeeID where T1.Cost < \"John Wen\" and T3.Name = 5000",
        "hyp_correct": false,
        "NL_query": "What procedures cost less than 5000 and have John Wen as a trained physician?",
        "index": 1957,
        "GT": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "select Name from Nurse except select T1.Name from Patient as T1 join Prescribes as T2 on T1.SSN = T2.Patient join Medication as T3 on T2.Medication = T3.Code where T3.Name = \"procrastin - x\"",
        "hyp_correct": false,
        "NL_query": "Find the names of patients who are not using the medication of Procrastin-X.",
        "index": 1958,
        "GT": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "prescribes",
            "nurse",
            "medication"
        ]
    },
    {
        "SQL": "select Name from Patient except select T4.Name from Medication as T1 join Prescribes as T2 on T1.Code = T2.Medication join Undergoes as T3 on T2.Physician = T3.Physician join Nurse as T4 on T3.AssistingNurse = T4.EmployeeID where T1.Name = \"procr -astin x\"",
        "hyp_correct": false,
        "NL_query": "What are the names of patients who are not taking the medication of Procrastin-X.",
        "index": 1959,
        "GT": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "undergoes",
            "nurse",
            "medication",
            "prescribes"
        ]
    },
    {
        "SQL": "select Headquarters from company where Industry = 'banking' intersect select Headquarters from company where Industry = 'oil and gas'",
        "hyp_correct": false,
        "NL_query": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "index": 1967,
        "GT": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "select T1.Name , T2.Year_working from company as T1 join employment as T2 on T1.Company_ID = T2.Company_ID order by T2.Year_working desc",
        "hyp_correct": false,
        "NL_query": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "index": 1968,
        "GT": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "DB": "company_employee",
        "tables": [
            "employment",
            "company",
            "people"
        ]
    },
    {
        "SQL": "select Sales_in_Billion from company where Sales_in_Billion > 200",
        "hyp_correct": false,
        "NL_query": "Show the names of employees that work for companies with sales bigger than 200.",
        "index": 1969,
        "GT": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "DB": "company_employee",
        "tables": [
            "employment",
            "company",
            "people"
        ]
    },
    {
        "SQL": "select T3.Name , count ( T1.Name ) from people as T1 join employment as T2 on T1.People_ID = T2.People_ID join company as T3 on T2.Company_ID = T3.Company_ID group by T3.Name",
        "hyp_correct": false,
        "NL_query": "Show the names of companies and the number of employees they have",
        "index": 1970,
        "GT": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "DB": "company_employee",
        "tables": [
            "employment",
            "company",
            "people"
        ]
    },
    {
        "SQL": "select Year from film_market_estimation order by Year desc",
        "hyp_correct": false,
        "NL_query": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
        "index": 1973,
        "GT": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC",
        "DB": "film_rank",
        "tables": [
            "market",
            "film_market_estimation"
        ]
    },
    {
        "SQL": "select Studio from film group by Studio order by count ( * ) desc limit \"teh studio\"",
        "hyp_correct": false,
        "NL_query": "What is the name of teh studio that created the most films?",
        "index": 1975,
        "GT": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "select Title from film except select T1.Title from film as T1 join film_market_estimation as T2 on T1.Film_ID = T2.Film_ID where T2.Type = 1",
        "hyp_correct": false,
        "NL_query": "What are the titles of films that do not have a film market estimation?",
        "index": 1977,
        "GT": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
        "DB": "film_rank",
        "tables": [
            "film_market_estimation",
            "film"
        ]
    },
    {
        "SQL": "select Studio from film where Director = \"Nicholas Meyer\" and Director = \"Walter Hill\"",
        "hyp_correct": false,
        "NL_query": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "index": 1978,
        "GT": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "select ClubName from Club where ClubName = \"Bootup Baltimore\"",
        "hyp_correct": false,
        "NL_query": "Find the last names of the members of the club \"Bootup Baltimore\".",
        "index": 1984,
        "GT": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select ClubName from Club where ClubName = \"Bootup Baltimore\"",
        "hyp_correct": false,
        "NL_query": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
        "index": 1985,
        "GT": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count ( ClubName ) from Club where ClubName = \"Pen and Paper Gaming\"",
        "hyp_correct": false,
        "NL_query": "Find the number of members of club \"Pen and Paper Gaming\".",
        "index": 1990,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count ( ClubName ) from Club where ClubName = \"Pen and Paper Gaming\"",
        "hyp_correct": false,
        "NL_query": "How many people have membership in the club \"Pen and Paper Gaming\"?",
        "index": 1991,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count ( * ) from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Linda\" and T1.LName = \"Smith\"",
        "hyp_correct": false,
        "NL_query": "How many clubs does \"Linda Smith\" belong to?",
        "index": 1992,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count ( * ) from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Linda\" and T1.LName = \"Smith\"",
        "hyp_correct": false,
        "NL_query": "How many clubs does \"Linda Smith\" have membership for?",
        "index": 1993,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count ( * ) from Club where ClubName = \"Tracy Kim\" and limit 1",
        "hyp_correct": false,
        "NL_query": "For how many clubs is \"Tracy Kim\" a member?",
        "index": 1995,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T1.Fname , T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Bootup Baltimore\" and T3.ClubName = 1",
        "hyp_correct": false,
        "NL_query": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "index": 1996,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Bootup Baltimore\" and T3.ClubName = 1",
        "hyp_correct": false,
        "NL_query": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".",
        "index": 1997,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T1.Fname , count ( T3.ClubName ) from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T1.Major = \"Bootup Baltimore\" and",
        "hyp_correct": false,
        "NL_query": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
        "index": 2001,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T1.Fname , T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Bootup Baltimore\"",
        "hyp_correct": false,
        "NL_query": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "index": 2002,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T1.Fname , T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Bootup Baltimore\"",
        "hyp_correct": false,
        "NL_query": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.",
        "index": 2003,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T1.Fname , T1.LName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"hopkins studento\" and T3.ClubName = 1",
        "hyp_correct": false,
        "NL_query": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "index": 2004,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T1.Fname , count ( T3.ClubName ) from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"hopkins studento\"",
        "hyp_correct": false,
        "NL_query": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?",
        "index": 2005,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count () from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Bootup Baltimore\" and T1.Age > 18",
        "hyp_correct": false,
        "NL_query": "How many members of \"Bootup Baltimore\" are older than 18?",
        "index": 2006,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count () from Member_of_club as T1 join Club as T2 on T1.ClubID = T2.ClubID where T2.ClubName = \"Bootup Baltimore\" and T2.ClubName = 18",
        "hyp_correct": false,
        "NL_query": "How many members of club \"Bootup Baltimore\" are younger than 18?",
        "index": 2008,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count ( * ) from Club where ClubName = \"Bootup Baltimore\" and ClubName = 18",
        "hyp_correct": false,
        "NL_query": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.",
        "index": 2009,
        "GT": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T1.city_code = \"BAL\" group by T3.ClubName having count () >= 1",
        "hyp_correct": false,
        "NL_query": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.",
        "index": 2011,
        "GT": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select T3.ClubName from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T1.city_code = \"HOU\" group by member_of_T3.ClubID having count () >= 1",
        "hyp_correct": false,
        "NL_query": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.",
        "index": 2013,
        "GT": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count ( * ) from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T1.Fname = \"Eric\" and T1.LName = \"Tai\"",
        "hyp_correct": false,
        "NL_query": "How many clubs does the student named \"Eric Tai\" belong to?",
        "index": 2014,
        "GT": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select count () from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID where T1.Fname = \"Eric Tai\" and T1.LName = 1",
        "hyp_correct": false,
        "NL_query": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
        "index": 2015,
        "GT": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select ClubName from Club where ClubName = \"Davis Steven\" and",
        "hyp_correct": false,
        "NL_query": "List the clubs having \"Davis Steven\" as a member.",
        "index": 2016,
        "GT": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select avg ( T1.Age ) from Student as T1 join Member_of_club as T2 on T1.StuID = T2.StuID join Club as T3 on T2.ClubID = T3.ClubID where T3.ClubName = \"Hopkins\"",
        "hyp_correct": false,
        "NL_query": "Find the average age of members of the club \"Hopkins Student Enterprises\".",
        "index": 2022,
        "GT": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "select sum ( T1.grant_amount ) from Grants as T1 join Organisations as T2 on T1.organisation_id = T2.organisation_id join Organisation_Types as T3 on T2.organisation_type = T3.organisation_type where T3.organisation_type_description = 1",
        "hyp_correct": false,
        "NL_query": "What is the total grant amount of the organisations described as research?",
        "index": 2026,
        "GT": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "grants",
            "organisations",
            "organisation_types"
        ]
    },
    {
        "SQL": "select sum ( grant_amount ) from Grants",
        "hyp_correct": false,
        "NL_query": "What is the total amount of grant money for research?",
        "index": 2027,
        "GT": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "grants",
            "organisations",
            "organisation_types"
        ]
    },
    {
        "SQL": "select project_details from Projects where project_id not in ( select project_id from Project_Staff )",
        "hyp_correct": false,
        "NL_query": "What are the details for all projects that did not hire any staff in a research role?",
        "index": 2029,
        "GT": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "projects"
        ]
    },
    {
        "SQL": "select staff_id , count ( * ) from Project_Staff group by project_id",
        "hyp_correct": false,
        "NL_query": "How many staff does each project has? List the project id and the number in an ascending order.",
        "index": 2030,
        "GT": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "projects"
        ]
    },
    {
        "SQL": "select project_details from Projects where project_id not in ( select outcome_details from Project_Outcomes )",
        "hyp_correct": false,
        "NL_query": "What are the details of the project with no outcomes?",
        "index": 2033,
        "GT": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_outcomes",
            "projects"
        ]
    },
    {
        "SQL": "select grant_id , count ( * ) from Documents group by grant_id having count ( * ) <= 1",
        "hyp_correct": false,
        "NL_query": "How many documents can one grant have at most? List the grant id and number.",
        "index": 2034,
        "GT": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "select organisation_details from Organisations where organisation_details = 1 order by",
        "hyp_correct": false,
        "NL_query": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "index": 2036,
        "GT": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisation_types",
            "organisations"
        ]
    },
    {
        "SQL": "select organisation_details from Organisations order by organisation_details asc",
        "hyp_correct": false,
        "NL_query": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
        "index": 2037,
        "GT": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisation_types",
            "organisations"
        ]
    },
    {
        "SQL": "select project_details from Projects where organisation_id = 1",
        "hyp_correct": false,
        "NL_query": "List the project details of the projects launched by the organisation",
        "index": 2040,
        "GT": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects"
        ]
    },
    {
        "SQL": "select project_details from Projects group by project_details order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "What are the details for the projects which were launched by the organization with the most projects?",
        "index": 2041,
        "GT": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects"
        ]
    },
    {
        "SQL": "select role_code from Staff_Roles group by * order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Which role is most common for the staff?",
        "index": 2042,
        "GT": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "staff_roles"
        ]
    },
    {
        "SQL": "select * from Staff_Roles group by role_code order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the most common role for the staff?",
        "index": 2043,
        "GT": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff",
            "staff_roles"
        ]
    },
    {
        "SQL": "select count ( * ) from Person where age > ( select max ( age ) from Person )",
        "hyp_correct": false,
        "NL_query": "Find the number of people whose age is greater than all engineers.",
        "index": 2046,
        "GT": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select count ( age ) from Person where age > ( select max ( age ) from Person )",
        "hyp_correct": false,
        "NL_query": "How many people are older than every engineer?",
        "index": 2047,
        "GT": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "select T1.name , T1.age from Person as T1 join PersonFriend as T2 on T1.name = T2.name where T2.name = \"Dan\" or T2.name = \"Alice\"",
        "hyp_correct": false,
        "NL_query": "Find the name and age of the person who is a friend of Dan or Alice.",
        "index": 2048,
        "GT": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select name from Person where name not in ( select name from PersonFriend )",
        "hyp_correct": false,
        "NL_query": "Find the name of the person who has no student friends.",
        "index": 2050,
        "GT": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select name from Person except select name from PersonFriend",
        "hyp_correct": false,
        "NL_query": "What are the names of the people who have no friends who are students?",
        "index": 2051,
        "GT": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select name from Person where name not in ( select friend from PersonFriend )",
        "hyp_correct": false,
        "NL_query": "Who is the person that has no friend?",
        "index": 2052,
        "GT": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "select T1.customer_name from Customers as T1 join Mailshot_Customers as T2 on T1.customer_id = T2.customer_id where Mailshot_T1.outcome_code = 2 group by mailshot_T1.customer_id having count ( * ) >= 1",
        "hyp_correct": false,
        "NL_query": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "index": 2056,
        "GT": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "customers",
            "mailshot_customers"
        ]
    },
    {
        "SQL": "select DName from Department where DNO not in ( select DNO from Minor_in )",
        "hyp_correct": false,
        "NL_query": "Find the name of the department that has no students minored in?",
        "index": 2057,
        "GT": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "DB": "college_3",
        "tables": [
            "minor_in",
            "department"
        ]
    },
    {
        "SQL": "select DName from Department where DName not in ( select Major from Student )",
        "hyp_correct": false,
        "NL_query": "What is the name of the department htat has no students minoring in it?",
        "index": 2058,
        "GT": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "DB": "college_3",
        "tables": [
            "student",
            "minor_in",
            "department"
        ]
    },
    {
        "SQL": "select T2.Fname from Enrolled_in as T1 join Student as T2 on T1.StuID = T2.StuID join Gradeconversion as T3 on T1.Grade = T3.lettergrade where T3.gradepoint = 3.5 group by T1.Grade having count ( T1.StuID ) >= 1",
        "hyp_correct": false,
        "NL_query": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
        "index": 2061,
        "GT": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "DB": "college_3",
        "tables": [
            "student",
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "select T2.Fname from Enrolled_in as T1 join Student as T2 on T1.StuID = T2.StuID join Gradeconversion as T3 on T1.Grade = T3.lettergrade where T3.gradepoint = 3.8 or T1.Grade = 1",
        "hyp_correct": false,
        "NL_query": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
        "index": 2062,
        "GT": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "DB": "college_3",
        "tables": [
            "student",
            "gradeconversion",
            "enrolled_in"
        ]
    },
    {
        "SQL": "select T3.Lname from Department as T1 join Member_of as T2 on T1.DNO = T2.DNO join Faculty as T3 on T2.FacID = T3.FacID where T1.DName = '.'",
        "hyp_correct": false,
        "NL_query": "Find the last names of faculties who are members of computer science department.",
        "index": 2063,
        "GT": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "DB": "college_3",
        "tables": [
            "member_of",
            "department",
            "faculty"
        ]
    },
    {
        "SQL": "select T3.Lname from Department as T1 join Member_of as T2 on T1.DNO = T2.DNO join Faculty as T3 on T2.FacID = T3.FacID where T1.DName = 'computer .'",
        "hyp_correct": false,
        "NL_query": "What are the last names of faculty who are part of the computer science department?",
        "index": 2064,
        "GT": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "DB": "college_3",
        "tables": [
            "member_of",
            "department",
            "faculty"
        ]
    },
    {
        "SQL": "select CName from Course where Credits = 3 or Hours = 4",
        "hyp_correct": false,
        "NL_query": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "index": 2069,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "select CName , Credits from Course where Hours = 3 or Days = 4",
        "hyp_correct": false,
        "NL_query": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "index": 2070,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "select DName from Department where Division = 'division' or Building = \"ne en\"",
        "hyp_correct": false,
        "NL_query": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "index": 2071,
        "GT": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "select DName from Department where Division = 'AS' or Building = \"ne en\"",
        "hyp_correct": false,
        "NL_query": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "index": 2072,
        "GT": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "select T3.Aircraft , T3.Description from airport as T1 join airport_aircraft as T2 on T1.Airport_ID = T2.Airport_ID join aircraft as T3 on T2.Aircraft_ID = T3.Aircraft_ID where T1.Total_Passengers > 10000000 group by T1.Aircraft_Movements",
        "hyp_correct": false,
        "NL_query": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "index": 2077,
        "GT": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
        "DB": "aircraft",
        "tables": [
            "airport",
            "aircraft",
            "airport_aircraft"
        ]
    },
    {
        "SQL": "select T3.Aircraft , T3.Description from airport_aircraft as T1 join airport as T2 on T1.Airport_ID = T2.Airport_ID join aircraft as T3 on T1.Aircraft_ID = T3.Aircraft_ID group by T1.Airport_ID having sum ( T2.Total_Passengers ) > 100000",
        "hyp_correct": false,
        "NL_query": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
        "index": 2078,
        "GT": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
        "DB": "aircraft",
        "tables": [
            "airport",
            "aircraft",
            "airport_aircraft"
        ]
    },
    {
        "SQL": "select avg ( T1.Total_Passengers ) from airport as T1 join airport_aircraft as T2 on T1.Airport_ID = T2.Airport_ID join aircraft as T3 on T2.Aircraft_ID = T3.Aircraft_ID where T3.Aircraft = \"robinson r - 22\"",
        "hyp_correct": false,
        "NL_query": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
        "index": 2079,
        "GT": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
        "DB": "aircraft",
        "tables": [
            "airport",
            "aircraft",
            "airport_aircraft"
        ]
    },
    {
        "SQL": "select avg ( T1.Total_Passengers ) from airport as T1 join airport_aircraft as T2 on T1.Airport_ID = T2.Airport_ID join aircraft as T3 on T2.Aircraft_ID = T3.Aircraft_ID where T3.Aircraft = \"robinson r - 22\"",
        "hyp_correct": false,
        "NL_query": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
        "index": 2080,
        "GT": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
        "DB": "aircraft",
        "tables": [
            "airport",
            "aircraft",
            "airport_aircraft"
        ]
    },
    {
        "SQL": "select Name , Age from pilot order by Age desc limit 1",
        "hyp_correct": false,
        "NL_query": "what is the name and age of the youngest winning pilot?",
        "index": 2083,
        "GT": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
        "DB": "aircraft",
        "tables": [
            "pilot",
            "match"
        ]
    },
    {
        "SQL": "select Name , Age from pilot order by Age desc limit 1",
        "hyp_correct": false,
        "NL_query": "How old is the youngest winning pilot and what is their name?",
        "index": 2084,
        "GT": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
        "DB": "aircraft",
        "tables": [
            "pilot",
            "match"
        ]
    },
    {
        "SQL": "select T2.Name from match as T1 join pilot as T2 on T1.Winning_Pilot = T2.Pilot_Id where T1.Country = 'Australia' except select Winning_Pilot from match where Country = 1",
        "hyp_correct": false,
        "NL_query": "find the name of pilots who did not win the matches held in the country of Australia.",
        "index": 2085,
        "GT": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
        "DB": "aircraft",
        "tables": [
            "pilot",
            "match"
        ]
    },
    {
        "SQL": "select Name from pilot where Pilot_Id not in ( select Winning_Pilot from match )",
        "hyp_correct": false,
        "NL_query": "What are the names of the pilots that have not won any matches in Australia?",
        "index": 2086,
        "GT": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
        "DB": "aircraft",
        "tables": [
            "pilot",
            "match"
        ]
    },
    {
        "SQL": "select state from College where cName = \"Charles\"",
        "hyp_correct": false,
        "NL_query": "In which state is the college that Charles attends?",
        "index": 2090,
        "GT": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select max ( HS ) , from Player where - HS > 1000 group by",
        "hyp_correct": false,
        "NL_query": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
        "index": 2091,
        "GT": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select max ( HS ) , sum ( HS ) from Player where group by limit 1000",
        "hyp_correct": false,
        "NL_query": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
        "index": 2092,
        "GT": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.cName like 'd%'",
        "hyp_correct": false,
        "NL_query": "Which colleges do the tryout players whose name starts with letter D go to?",
        "index": 2093,
        "GT": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select cName from Tryout where pPos = \"goal\" , cName where != = \"mid - field\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
        "index": 2096,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select T2.cName from Tryout as T1 join College as T2 on T1.cName = T2.cName where T1.pPos = '1' except select cName from Tryout where pPos = 'goalie'",
        "hyp_correct": false,
        "NL_query": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "index": 2097,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout",
            "college"
        ]
    },
    {
        "SQL": "select cName from Tryout where pPos = '1 except select cName from Tryout where pPos = goalies'",
        "hyp_correct": false,
        "NL_query": "What are the names of the schools with some players in the mid position but no goalies?",
        "index": 2098,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "select state from College where enr < ( select min ( enr ) from College )",
        "hyp_correct": false,
        "NL_query": "What are the states with colleges that have enrollments less than the some other college?",
        "index": 2100,
        "GT": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select cName from College where enr > ( select min ( enr ) from College where state = \"Florida\" )",
        "hyp_correct": false,
        "NL_query": "What are the names of the colleges that are larger than at least one college in Florida?",
        "index": 2102,
        "GT": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select cName from College where enr > ( select max ( enr ) from College where state = \"Florida\" )",
        "hyp_correct": false,
        "NL_query": "What are the names of all colleges with a larger enrollment than the largest college in Florida?",
        "index": 2104,
        "GT": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select count ( * ) from College where state > ( select avg ( enr ) from College )",
        "hyp_correct": false,
        "NL_query": "How many states have a college with more students than average?",
        "index": 2106,
        "GT": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select count ( * ) from College where state > ( select avg ( enr ) from College )",
        "hyp_correct": false,
        "NL_query": "How many states have smaller colleges than average?",
        "index": 2108,
        "GT": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "select Location from shop where Open_Year > 2012 intersect select Location from shop where Open_Date < 2008",
        "hyp_correct": false,
        "NL_query": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "index": 2113,
        "GT": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "DB": "device",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "select Location from shop where Open_Year > 2012 intersect select Location from shop where Open_Date < 2008",
        "hyp_correct": false,
        "NL_query": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
        "index": 2114,
        "GT": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "DB": "device",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "select Carrier from device where Device_ID != 1",
        "hyp_correct": false,
        "NL_query": "What are the carriers of devices that are not in stock anywhere?",
        "index": 2116,
        "GT": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "DB": "device",
        "tables": [
            "stock",
            "device"
        ]
    },
    {
        "SQL": "select count ( * ) , T1.product_name from Product as T1 join Problems as T2 on T1.product_id = T2.product_id where T2.date_problem_reported > '1986 - 11 - 13' group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "index": 2117,
        "GT": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "DB": "tracking_software_problems",
        "tables": [
            "product",
            "problems"
        ]
    },
    {
        "SQL": "select count ( * ) , T1.product_name from Product as T1 join Problems as T2 on T1.product_id = T2.product_id where T1.product_id > \"1986 - 11 - 11 13\" group by T2.product_id",
        "hyp_correct": false,
        "NL_query": "What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.",
        "index": 2118,
        "GT": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "DB": "tracking_software_problems",
        "tables": [
            "product",
            "problems"
        ]
    },
    {
        "SQL": "select count ( * ) from membership_register_branch as T1 join branch as T2 on T1.Branch_ID = T2.Branch_ID where T1.Branch_ID > ( select avg ( * ) from branch )",
        "hyp_correct": false,
        "NL_query": "How many branches where have more than average number of memberships are there?",
        "index": 2119,
        "GT": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "membership_register_branch"
        ]
    },
    {
        "SQL": "select min ( membership_amount ) , max ( membership_amount ) from branch where City = 2011",
        "hyp_correct": false,
        "NL_query": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "index": 2121,
        "GT": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
        "DB": "shop_membership",
        "tables": [
            "branch"
        ]
    },
    {
        "SQL": "select min ( membership_amount ) from branch where City = 2011 or Open_year = 'London'",
        "hyp_correct": false,
        "NL_query": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?",
        "index": 2122,
        "GT": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
        "DB": "shop_membership",
        "tables": [
            "branch"
        ]
    },
    {
        "SQL": "select T1.Name , T4.Name from member as T1 join membership_register_branch as T2 on T1.Member_ID = T2.Member_ID join purchase as T3 on T1.Member_ID = T3.Member_ID join branch as T4 on T3.Branch_ID = T4.Branch_ID order by T2.Register_Year",
        "hyp_correct": false,
        "NL_query": "Show all member names and registered branch names sorted by register year.",
        "index": 2125,
        "GT": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
        "DB": "shop_membership",
        "tables": [
            "member",
            "branch",
            "membership_register_branch",
            "purchase"
        ]
    },
    {
        "SQL": "select T1.Name , T4.Name from member as T1 join membership_register_branch as T2 on T1.Member_ID = T2.Member_ID join purchase as T3 on T1.Member_ID = T3.Member_ID join branch as T4 on T3.Branch_ID = T4.Branch_ID order by T2.Register_Year",
        "hyp_correct": false,
        "NL_query": "What are the names of the members and branches at which they are registered sorted by year of registration?",
        "index": 2126,
        "GT": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
        "DB": "shop_membership",
        "tables": [
            "member",
            "branch",
            "membership_register_branch",
            "purchase"
        ]
    },
    {
        "SQL": "select Name from branch where Open_year > 2015",
        "hyp_correct": false,
        "NL_query": "For each branch id, what are the names of the branches that were registered after 2015?",
        "index": 2128,
        "GT": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "DB": "shop_membership",
        "tables": [
            "branch",
            "membership_register_branch"
        ]
    },
    {
        "SQL": "select City from branch except select T1.Hometown from member as T1 join purchase as T2 on T1.Member_ID = T2.Member_ID join branch as T3 on T2.Branch_ID = T3.Branch_ID where T3.membership_amount > 100",
        "hyp_correct": false,
        "NL_query": "Show all cities without a branch having more than 100 memberships.",
        "index": 2131,
        "GT": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "DB": "shop_membership",
        "tables": [
            "member",
            "branch",
            "purchase"
        ]
    },
    {
        "SQL": "select City from branch except select T1.Hometown from member as T1 join purchase as T2 on T1.Member_ID = T2.Member_ID join branch as T3 on T2.Branch_ID = T3.Branch_ID where T3.membership_amount > 100",
        "hyp_correct": false,
        "NL_query": "What are the cities that do not have any branches with more than 100 members?",
        "index": 2132,
        "GT": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "DB": "shop_membership",
        "tables": [
            "member",
            "branch",
            "purchase"
        ]
    },
    {
        "SQL": "select count ( * ) , T3.city_code from Dorm as T1 join Lives_in as T2 on T1.dormid = T2.dormid join Student as T3 on T2.stuid = T3.StuID join Has_amenity as T4 on T1.dormid = T4.dormid where T1.student_capacity > 100 group by T4.dormid",
        "hyp_correct": false,
        "NL_query": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "index": 2141,
        "GT": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "has_amenity",
            "student",
            "lives_in"
        ]
    },
    {
        "SQL": "select T1.dorm_name , count ( * ) from Dorm as T1 join Has_amenity as T2 on T1.dormid = T2.dormid join Dorm_amenity as T3 on T2.amenid = T3.amenid group by T1.dorm_name",
        "hyp_correct": false,
        "NL_query": "For each dorm, how many amenities does it have?",
        "index": 2142,
        "GT": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "has_amenity",
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select Fname from Student where city_code = 'Smith'",
        "hyp_correct": false,
        "NL_query": "Find the first name of students who are living in the Smith Hall.",
        "index": 2143,
        "GT": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "select Fname from Student where city_code = \"Smith\"",
        "hyp_correct": false,
        "NL_query": "What are the first names of all students in Smith Hall?",
        "index": 2144,
        "GT": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "select count ( * ) from Dorm where gender = 'm'",
        "hyp_correct": false,
        "NL_query": "Find the total number of students living in the male dorm (with gender M).",
        "index": 2145,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "student",
            "lives_in"
        ]
    },
    {
        "SQL": "select count ( * ) from Dorm as T1 join Lives_in as T2 on T1.dormid = T2.dormid join Student as T3 on T2.stuid = T3.StuID where T3.Sex = 'm'",
        "hyp_correct": false,
        "NL_query": "What are the total number of students who are living in a male dorm?",
        "index": 2146,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "student",
            "lives_in"
        ]
    },
    {
        "SQL": "select count ( * ) from Dorm as T1 join Lives_in as T2 on T1.dormid = T2.dormid join Student as T3 on T2.stuid = T3.StuID where T3.Sex = 'F' and T1.gender = \"Smith Hall\"",
        "hyp_correct": false,
        "NL_query": "Find the number of female students (with F sex) living in Smith Hall",
        "index": 2147,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "student",
            "lives_in"
        ]
    },
    {
        "SQL": "select count ( * ) from Student where city_code = \"Smith\" and Sex = \"f\"",
        "hyp_correct": false,
        "NL_query": "How many female students live in Smith Hall?",
        "index": 2148,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "lives_in",
            "dorm"
        ]
    },
    {
        "SQL": "select T1.dorm_name from Dorm as T1 join Has_amenity as T2 on T1.dormid = T2.dormid join Dorm_amenity as T3 on T2.amenid = T3.amenid where T3.amenity_name = \"Smith Hall\"",
        "hyp_correct": false,
        "NL_query": "Find the name of amenities Smith Hall dorm have.",
        "index": 2149,
        "GT": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "has_amenity",
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select dorm_name from Dorm except select T2.dormid from Dorm_amenity as T1 join Has_amenity as T2 on T1.amenid = T2.amenid where T1.amenity_name = 'amenity TV Lounge'",
        "hyp_correct": false,
        "NL_query": "Find the name of dorms that do not have amenity TV Lounge.",
        "index": 2151,
        "GT": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "has_amenity",
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select dorm_name from Dorm except select dorm_name from Dorm where dorm_name = 'TV'",
        "hyp_correct": false,
        "NL_query": "What are the names of the dorm that does not have a TV Lounge?",
        "index": 2152,
        "GT": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "DB": "dorm_1",
        "tables": [
            "dorm",
            "has_amenity",
            "dorm_amenity"
        ]
    },
    {
        "SQL": "select T2.phone_number from Complaints as T1 join Customers as T2 on T1.customer_id = T2.customer_id order by T1.customer_id desc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the phone number of the customer who has filed the most recent complaint?",
        "index": 2153,
        "GT": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers",
            "complaints"
        ]
    },
    {
        "SQL": "select phone_number , last_name from Staff",
        "hyp_correct": false,
        "NL_query": "Find the phone number of all the customers and staff.",
        "index": 2155,
        "GT": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "DB": "customer_complaints",
        "tables": [
            "customers",
            "staff"
        ]
    },
    {
        "SQL": "select T1.phone_number , T3.phone_number from Staff as T1 join Complaints as T2 on T1.staff_id = T2.staff_id join Customers as T3 on T2.customer_id = T3.customer_id",
        "hyp_correct": false,
        "NL_query": "What are the phone numbers of all customers and all staff members?",
        "index": 2156,
        "GT": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "DB": "customer_complaints",
        "tables": [
            "customers",
            "complaints",
            "staff"
        ]
    },
    {
        "SQL": "select customer_type_code from Customers group by customer_type_code order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "How many customers are there in the customer type with the most customers?",
        "index": 2159,
        "GT": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select customer_type_code from Customers group by customer_type_code order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Count the number of customers that have the customer type that is most common.",
        "index": 2160,
        "GT": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select T2.last_name from Complaints as T1 join Staff as T2 on T1.staff_id = T2.staff_id order by T1.staff_id asc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the last name of the staff who has handled the first ever complaint?",
        "index": 2161,
        "GT": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "complaints",
            "staff"
        ]
    },
    {
        "SQL": "select state from Customers group by state order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Which state has the most customers?",
        "index": 2163,
        "GT": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select state from Customers group by state order by count ( * ) desc limit 1",
        "hyp_correct": false,
        "NL_query": "Give the state that has the most customers.",
        "index": 2164,
        "GT": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "select T2.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T1.OnScholarship = 600 intersect select StuID from Student where Major = 1",
        "hyp_correct": false,
        "NL_query": "Show student ids who are on scholarship and have major 600.",
        "index": 2171,
        "GT": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select StuID from Student where Major = 600",
        "hyp_correct": false,
        "NL_query": "What are the student ids for those on scholarship in major number 600?",
        "index": 2172,
        "GT": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select StuID from Student where Sex = \"f\" intersect select StuID from SportsInfo where SportName = 1",
        "hyp_correct": false,
        "NL_query": "Show student ids who are female and play football.",
        "index": 2173,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select T2.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T2.Sex = 'f' and T1.SportName = 1",
        "hyp_correct": false,
        "NL_query": "What are the ids of all female students who play football?",
        "index": 2174,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select StuID from Student except select T1.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T2.Sex = 'm'",
        "hyp_correct": false,
        "NL_query": "Show all male student ids who don't play football.",
        "index": 2175,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select StuID from Student except select T1.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID where T2.Sex = 'm'",
        "hyp_correct": false,
        "NL_query": "What are the ids of all male students who do not play football?",
        "index": 2176,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "select sum ( T3.Hours_Played ) , count ( T1.HoursPerWeek ) from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID where T2.Fname = \"David\"",
        "hyp_correct": false,
        "NL_query": "Show total hours per week and number of games played for student David Shieber.",
        "index": 2177,
        "GT": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select sum ( T3.Hours_Played ) , count ( T1.HoursPerWeek ) from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID where T2.Fname = \"David\"",
        "hyp_correct": false,
        "NL_query": "What is the total number of hours per work and number of games played by David Shieber?",
        "index": 2178,
        "GT": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select StuID from Student except select T1.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID join Video_Games as T4 on T3.GameID = T4.GameID where T4.GType = 'video game'",
        "hyp_correct": false,
        "NL_query": "Show ids of students who don't play video game.",
        "index": 2179,
        "GT": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "student",
            "video_games",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select StuID from Student except select T1.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID join Video_Games as T4 on T3.GameID = T4.GameID where T4.GType = \"video game\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students who are not video game players?",
        "index": 2180,
        "GT": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "student",
            "video_games",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select StuID from SportsInfo intersect select T3.StuID from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID where T1.SportName = \"video game\"",
        "hyp_correct": false,
        "NL_query": "Show ids of students who play video game and play sports.",
        "index": 2181,
        "GT": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select StuID from SportsInfo where GamesPlayed = \"video games\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students who played video games and sports?",
        "index": 2182,
        "GT": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select T4.GName from SportsInfo as T1 join Student as T2 on T1.StuID = T2.StuID join Plays_Games as T3 on T2.StuID = T3.StuID join Video_Games as T4 on T3.GameID = T4.GameID where T1.GamesPlayed = \"Linda\"",
        "hyp_correct": false,
        "NL_query": "What are the names of all games played by Linda Smith?",
        "index": 2184,
        "GT": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
        "DB": "game_1",
        "tables": [
            "student",
            "video_games",
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "select service_name from Services where service_id not in ( select service_id from Forms )",
        "hyp_correct": false,
        "NL_query": "Find name of the services that has never been used.",
        "index": 2189,
        "GT": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "DB": "e_government",
        "tables": [
            "party_services",
            "services",
            "forms"
        ]
    },
    {
        "SQL": "select service_name from Services where service_id not in ( select service_id from Forms )",
        "hyp_correct": false,
        "NL_query": "What are the names of the services that have never been used?",
        "index": 2190,
        "GT": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "DB": "e_government",
        "tables": [
            "party_services",
            "services",
            "forms"
        ]
    },
    {
        "SQL": "select town_city , state_province_county from Addresses",
        "hyp_correct": false,
        "NL_query": "Find the name of all the cities and states.",
        "index": 2191,
        "GT": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "select town_city , state_province_county from Addresses",
        "hyp_correct": false,
        "NL_query": "What are the names of all cities and states?",
        "index": 2192,
        "GT": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "select Name from driver except select T1.Name from driver as T1 join school_bus as T2 on T1.Driver_ID = T2.Driver_ID join school as T3 on T2.School_ID = T3.School_ID where T3.Type = 'bus'",
        "hyp_correct": false,
        "NL_query": "Show the names of the drivers without a school bus.",
        "index": 2195,
        "GT": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "DB": "school_bus",
        "tables": [
            "driver",
            "school_bus",
            "school"
        ]
    },
    {
        "SQL": "select Document_ID from Documents_with_Expenses except select T1.Document_ID from Documents as T1 join Documents_with_Expenses as T2 on T1.Document_ID = T2.Document_ID where T2.Budget_Type_Code = 1",
        "hyp_correct": false,
        "NL_query": "What are the ids of documents which don't have expense budgets?",
        "index": 2203,
        "GT": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "documents"
        ]
    },
    {
        "SQL": "select Document_ID from Documents_with_Expenses except select T1.Document_ID from Documents as T1 join Documents_with_Expenses as T2 on T1.Document_ID = T2.Document_ID where T2.Budget_Type_Code = 1",
        "hyp_correct": false,
        "NL_query": "Return the ids of documents that do not have expenses.",
        "index": 2204,
        "GT": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "documents"
        ]
    },
    {
        "SQL": "select T2.Document_ID from Documents as T1 join Documents_with_Expenses as T2 on T1.Document_ID = T2.Document_ID where T1.Document_Type_Code = \"CV\"",
        "hyp_correct": false,
        "NL_query": "Show ids for all documents in type CV without expense budgets.",
        "index": 2205,
        "GT": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses"
        ]
    },
    {
        "SQL": "select Document_ID from Documents_with_Expenses except select Document_ID from Documents where Document_Type_Code = \"CV\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of documents with the type code CV that do not have expenses.",
        "index": 2206,
        "GT": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "documents"
        ]
    },
    {
        "SQL": "select T2.Document_ID from Documents as T1 join Documents_with_Expenses as T2 on T1.Document_ID = T2.Document_ID where T1.Document_Name like \"% s %\"",
        "hyp_correct": false,
        "NL_query": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "index": 2207,
        "GT": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses"
        ]
    },
    {
        "SQL": "select T2.Document_ID from Documents as T1 join Documents_with_Expenses as T2 on T1.Document_ID = T2.Document_ID where T1.Document_Name like \"% s %\"",
        "hyp_correct": false,
        "NL_query": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "index": 2208,
        "GT": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses"
        ]
    },
    {
        "SQL": "select Account_Details from Accounts where Account_Details = 5 or limit 1 = 1",
        "hyp_correct": false,
        "NL_query": "What are the account details with the largest value or with value having char '5' in it?",
        "index": 2209,
        "GT": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "select T1.Account_Details , T2.Statement_Details from Accounts as T1 join Statements as T2 on T1.Statement_ID = T2.Statement_ID where T1.Account_Details = 5 order by T1.Account_Details desc",
        "hyp_correct": false,
        "NL_query": "Return the account details with the greatest value, as well as those that include the character 5.",
        "index": 2210,
        "GT": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "statements",
            "accounts"
        ]
    },
    {
        "SQL": "select Location from station group by Location having count ( Number_of_Platforms ) >= 15",
        "hyp_correct": false,
        "NL_query": "Show all locations which don't have a train station with at least 15 platforms.",
        "index": 2212,
        "GT": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "select T2.lesson_id , T2.staff_id from Staff as T1 join Lessons as T2 on T1.staff_id = T2.staff_id where T1.first_name = 'jane %ssa%' and T1.nickname like 'Sawayn%'",
        "hyp_correct": false,
        "NL_query": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "index": 2217,
        "GT": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "staff"
        ]
    },
    {
        "SQL": "select T2.staff_id from Staff as T1 join Lessons as T2 on T1.staff_id = T2.staff_id where T1.first_name = \"jane %ssa %\" and T1.nickname like Sawayn'",
        "hyp_correct": false,
        "NL_query": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
        "index": 2218,
        "GT": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "staff"
        ]
    },
    {
        "SQL": "select last_name from Staff intersect select last_name from Customers where limit 1",
        "hyp_correct": false,
        "NL_query": "Which last names are both used by customers and by staff?",
        "index": 2221,
        "GT": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "DB": "driving_school",
        "tables": [
            "customers",
            "staff"
        ]
    },
    {
        "SQL": "select first_name from Staff where staff_id not in ( select staff_id from Lessons )",
        "hyp_correct": false,
        "NL_query": "What is the first name of the staff who did not give any lesson?",
        "index": 2223,
        "GT": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "staff"
        ]
    },
    {
        "SQL": "select first_name from Staff where staff_id not in ( select staff_id from Lessons )",
        "hyp_correct": false,
        "NL_query": "What is the first name of all employees who do not give any lessons?",
        "index": 2224,
        "GT": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "staff"
        ]
    },
    {
        "SQL": "select count ( * ) , city from airports group by city order by count ( * ) desc",
        "hyp_correct": false,
        "NL_query": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "index": 2227,
        "GT": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select count ( * ) , city from airports group by city order by count ( * ) desc",
        "hyp_correct": false,
        "NL_query": "How many airports are there per city in the US ordered from most to least?",
        "index": 2228,
        "GT": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "select T1.src_ap , T2.name from routes as T1 join airports as T2 on T1.dst_apid = T2.apid order by T1.src_apid desc",
        "hyp_correct": false,
        "NL_query": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",
        "index": 2229,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select T2.name , count ( * ) from routes as T1 join airports as T2 on T1.dst_apid = T2.apid group by T1.src_ap order by count ( * ) asc",
        "hyp_correct": false,
        "NL_query": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "index": 2230,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select count ( * ) from airlines as T1 join routes as T2 on T1.alid = T2.alid where T1.name = \"Italy\" and T2.dst_ap = \"American Airlines\"",
        "hyp_correct": false,
        "NL_query": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "index": 2231,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select count ( * ) from airlines as T1 join routes as T2 on T1.alid = T2.alid where T1.name = \"Italy\" and T1.country = \"American Airlines\"",
        "hyp_correct": false,
        "NL_query": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
        "index": 2232,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "airlines",
            "airports",
            "routes"
        ]
    },
    {
        "SQL": "select count ( product_id ) , order_id from Order_Items group by product_id",
        "hyp_correct": false,
        "NL_query": "List the count and id of each product in all the orders.",
        "index": 2233,
        "GT": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "DB": "tracking_orders",
        "tables": [
            "products",
            "order_items",
            "orders"
        ]
    },
    {
        "SQL": "select product_name , count ( * ) from Products group by product_name",
        "hyp_correct": false,
        "NL_query": "List the name and count of each product in all orders.",
        "index": 2235,
        "GT": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "DB": "tracking_orders",
        "tables": [
            "products",
            "orders",
            "order_items"
        ]
    },
    {
        "SQL": "select T1.product_name , count ( * ) from Products as T1 join Order_Items as T2 on T1.product_id = T2.product_id group by T1.product_name",
        "hyp_correct": false,
        "NL_query": "For each product, show its name and the number of times it was ordered.",
        "index": 2236,
        "GT": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "DB": "tracking_orders",
        "tables": [
            "products",
            "order_items",
            "orders"
        ]
    },
    {
        "SQL": "select count ( * ) from stadium as T1 join concert as T2 on T1.Stadium_ID = T2.Stadium_ID order by T1.Capacity desc limit 1",
        "hyp_correct": false,
        "NL_query": "Find the number of concerts happened in the stadium with the highest capacity .",
        "index": 2250,
        "GT": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "select count ( * ) from stadium as T1 join concert as T2 on T1.Stadium_ID = T2.Stadium_ID order by T1.Capacity desc limit 1",
        "hyp_correct": false,
        "NL_query": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "index": 2251,
        "GT": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "select Horsepower from cars_data order by Horsepower asc limit 1",
        "hyp_correct": false,
        "NL_query": "What is the model of the car with the smallest amount of horsepower?",
        "index": 2253,
        "GT": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "select T1.Model from car_names as T1 join cars_data as T2 on T1.MakeId = T2.Id where T2.Year > 1980",
        "hyp_correct": false,
        "NL_query": "Which distinct car models are the produced after 1980?",
        "index": 2254,
        "GT": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select count ( Year ) from cars_data where > 1980",
        "hyp_correct": false,
        "NL_query": "What are the different models for the cards produced after 1980?",
        "index": 2255,
        "GT": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select T1.Maker , count ( * ) from car_makers as T1 join countries as T2 on T1.Country = T2.CountryId join continents as T3 on T2.Continent = T3.ContId group by T3.Continent",
        "hyp_correct": false,
        "NL_query": "How many car makers are there in each continents? List the continent name and the count.",
        "index": 2256,
        "GT": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "DB": "car_1",
        "tables": [
            "continents",
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "select T3.Continent , count ( * ) from car_makers as T1 join countries as T2 on T1.Country = T2.CountryId join continents as T3 on T2.Continent = T3.ContId group by T2.Continent",
        "hyp_correct": false,
        "NL_query": "What is the name of each continent and how many car makers are there in each one?",
        "index": 2257,
        "GT": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "DB": "car_1",
        "tables": [
            "continents",
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "select count () from continents as T1 join countries as T2 on T1.ContId = T2.Continent join car_makers as T3 on T2.CountryId = T3.Country join model_list as T4 on T3.Id = T4.Maker join car_names as T5 on T4.Model = T5.Model join cars_data as T6 on T5.MakeId = T6.Id where T1.Continent = \"usa\"",
        "hyp_correct": false,
        "NL_query": "How many car models are produced in the usa?",
        "index": 2258,
        "GT": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "DB": "car_1",
        "tables": [
            "car_names",
            "model_list",
            "continents",
            "car_makers",
            "cars_data",
            "countries"
        ]
    },
    {
        "SQL": "select count () from continents as T1 join countries as T2 on T1.ContId = T2.Continent join car_makers as T3 on T2.CountryId = T3.Country join model_list as T4 on T3.Id = T4.Maker join car_names as T5 on T4.Model = T5.Model join cars_data as T6 on T5.MakeId = T6.Id where T1.Continent = 'United'",
        "hyp_correct": false,
        "NL_query": "What is the count of the car models produced in the United States?",
        "index": 2259,
        "GT": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "DB": "car_1",
        "tables": [
            "car_names",
            "model_list",
            "continents",
            "car_makers",
            "cars_data",
            "countries"
        ]
    },
    {
        "SQL": "select T1.Model from model_list as T1 join car_names as T2 on T1.Model = T2.Model join cars_data as T3 on T2.MakeId = T3.Id order by T3.Horsepower desc limit 1",
        "hyp_correct": false,
        "NL_query": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "index": 2260,
        "GT": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select T2.Model from car_names as T1 join model_list as T2 on T1.Model = T2.Model group by count ( T1.Model ) order by limit 1 desc",
        "hyp_correct": false,
        "NL_query": "What model has the most different versions?",
        "index": 2263,
        "GT": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "car_names",
            "model_list"
        ]
    },
    {
        "SQL": "select count ( * ) from cars_data where Accelerate > ( select Horsepower from cars_data where Accelerate < ( select max ( Horsepower ) from cars_data ) )",
        "hyp_correct": false,
        "NL_query": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "index": 2264,
        "GT": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select count ( * ) from cars_data where Accelerate > ( select Horsepower from cars_data where Accelerate < 1 )",
        "hyp_correct": false,
        "NL_query": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "index": 2265,
        "GT": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "select T2.CountryName from car_makers as T1 join countries as T2 on T1.Country = T2.CountryId where T1.Country != 1 except select Country from car_makers group by Country",
        "hyp_correct": false,
        "NL_query": "What are the name of the countries where there is not a single car maker?",
        "index": 2266,
        "GT": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "select CountryName from countries where CountryId not in ( select Country from car_makers )",
        "hyp_correct": false,
        "NL_query": "What are the names of the countries with no car makers?",
        "index": 2267,
        "GT": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "select avg ( Number_products ) from shop where in ( select avg ( Number_products ) from shop )",
        "hyp_correct": false,
        "NL_query": "Find the names of stores whose number products is more than the average number of products.",
        "index": 2268,
        "GT": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "DB": "employee_hire_evaluation",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "select Name from employee where Employee_ID not in ( select Employee_ID from evaluation where Employee_ID = 1 )",
        "hyp_correct": false,
        "NL_query": "Find the names of employees who never won any award in the evaluation.",
        "index": 2272,
        "GT": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "DB": "employee_hire_evaluation",
        "tables": [
            "employee",
            "evaluation"
        ]
    },
    {
        "SQL": "select Country from TV_Channel except select Channel from Cartoon where Written_by = \"Todd\"",
        "hyp_correct": false,
        "NL_query": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "index": 2282,
        "GT": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    },
    {
        "SQL": "select Country from TV_Channel except select Written_by from Cartoon where Written_by = \"Todd\"",
        "hyp_correct": false,
        "NL_query": "What are the countries that are not playing cartoons written by Todd Casey?",
        "index": 2283,
        "GT": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    },
    {
        "SQL": "select Package_Option from TV_Channel except select Channel from Cartoon where Directed_by = 'Ben Jones'",
        "hyp_correct": false,
        "NL_query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "index": 2286,
        "GT": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    },
    {
        "SQL": "select Package_Option from TV_Channel except select Channel from Cartoon where Directed_by = \"Ben Jones\"",
        "hyp_correct": false,
        "NL_query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "index": 2287,
        "GT": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "DB": "tvshow",
        "tables": [
            "tv_channel",
            "cartoon"
        ]
    }
]