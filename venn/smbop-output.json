[{
        "SQL": "SELECT COUNT( * ) FROM medicine WHERE medicine.fda_approved = 'no'",
        "hyp_correct": false,
        "NL_query": "How many medicines have the FDA approval status 'No' ?",
        "index": 45,
        "GT": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM medicine WHERE medicine.fda_approved = 'no'",
        "hyp_correct": false,
        "NL_query": "How many medicines were not approved by the FDA?",
        "index": 46,
        "GT": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "SELECT DISTINCT products.product_color FROM products",
        "hyp_correct": false,
        "NL_query": "Show all product sizes.",
        "index": 88,
        "GT": "SELECT DISTINCT product_size FROM Products",
        "DB": "customers_and_invoices",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "SELECT DISTINCT products.product_color FROM products",
        "hyp_correct": false,
        "NL_query": "What are the different product sizes?",
        "index": 89,
        "GT": "SELECT DISTINCT product_size FROM Products",
        "DB": "customers_and_invoices",
        "tables": [
            "products"
        ]
    },
    {
        "SQL": "SELECT * FROM endowment WHERE endowment.amount > 8.5 GROUP BY endowment.school_id HAVING COUNT( * ) > 1",
        "hyp_correct": false,
        "NL_query": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "index": 107,
        "GT": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "DB": "school_finance",
        "tables": [
            "endowment"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.languages = 'English'",
        "hyp_correct": false,
        "NL_query": "Find the names of all English songs.",
        "index": 237,
        "GT": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.languages = 'English'",
        "hyp_correct": false,
        "NL_query": "What are the names of all songs in English?",
        "index": 238,
        "GT": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM artist WHERE artist.country NOT IN (SELECT * FROM artist, artist WHERE artist.country = 'Bangladeshi artists')",
        "hyp_correct": false,
        "NL_query": "How many Bangladeshi artists are listed?",
        "index": 242,
        "GT": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM college WHERE college.state = 'NY'",
        "hyp_correct": false,
        "NL_query": "How many parks are there in the state of NY?",
        "index": 245,
        "GT": "SELECT count(*) FROM park WHERE state  =  'NY';",
        "DB": "baseball_1",
        "tables": [
            "college",
            "park"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM college WHERE college.state = 'NY'",
        "hyp_correct": false,
        "NL_query": "Show me the number of parks the state of NY has.",
        "index": 246,
        "GT": "SELECT count(*) FROM park WHERE state  =  'NY';",
        "DB": "baseball_1",
        "tables": [
            "college",
            "park"
        ]
    },
    {
        "SQL": "SELECT * FROM postseason JOIN team ON postseason.team_id_loser = team.team_id_br WHERE team.name = 'Boston Red Stockings' UNION SELECT * FROM postseason JOIN team ON postseason.team_id_loser = team.team_id_br WHERE team.name = 'Boston Red Stockings'",
        "hyp_correct": false,
        "NL_query": "How many times in total did the team Boston Red Stockings participate in postseason games?",
        "index": 248,
        "GT": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );",
        "DB": "baseball_1",
        "tables": [
            "postseason",
            "team"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM college WHERE college.city = 'Atlanta'",
        "hyp_correct": false,
        "NL_query": "How many parks are there in Atlanta city?",
        "index": 249,
        "GT": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
        "DB": "baseball_1",
        "tables": [
            "college",
            "park"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM park WHERE college.city = 'Atlanta'",
        "hyp_correct": false,
        "NL_query": "How many parks does Atlanta city have?",
        "index": 250,
        "GT": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
        "DB": "baseball_1",
        "tables": [
            "park"
        ]
    },
    {
        "SQL": "SELECT park.city FROM park GROUP BY park.city HAVING COUNT( * ) > 2",
        "hyp_correct": false,
        "NL_query": "List the names of states that have more than 2 parks.",
        "index": 251,
        "GT": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "DB": "baseball_1",
        "tables": [
            "park"
        ]
    },
    {
        "SQL": "SELECT park.city FROM park GROUP BY park.city HAVING COUNT( * ) > 2",
        "hyp_correct": false,
        "NL_query": "Which states have more than 2 parks?",
        "index": 252,
        "GT": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "DB": "baseball_1",
        "tables": [
            "park"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM team_franchise WHERE team_franchise.active = 'y'",
        "hyp_correct": false,
        "NL_query": "How many team franchises are active, with active value 'Y'?",
        "index": 253,
        "GT": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
        "DB": "baseball_1",
        "tables": [
            "team_franchise"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM team_franchise WHERE team_franchise.active = 'y'",
        "hyp_correct": false,
        "NL_query": "Find the number of team franchises that are active (have 'Y' as \"active\" information).",
        "index": 254,
        "GT": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
        "DB": "baseball_1",
        "tables": [
            "team_franchise"
        ]
    },
    {
        "SQL": "SELECT COUNT( DISTINCT broadcast.program_id ) FROM broadcast WHERE broadcast.time_of_day = 'night'",
        "hyp_correct": false,
        "NL_query": "find the number of different programs that are broadcast during night time.",
        "index": 270,
        "GT": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "DB": "program_share",
        "tables": [
            "broadcast"
        ]
    },
    {
        "SQL": "SELECT DISTINCT room.blockcode FROM room WHERE room.unavailable = 1",
        "hyp_correct": false,
        "NL_query": "What are the unique block codes that have available rooms?",
        "index": 284,
        "GT": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "DB": "hospital_1",
        "tables": [
            "room"
        ]
    },
    {
        "SQL": "SELECT DISTINCT room.blockcode FROM room WHERE room.unavailable = 1",
        "hyp_correct": false,
        "NL_query": "Tell me the distinct block codes where some rooms are available.",
        "index": 285,
        "GT": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "DB": "hospital_1",
        "tables": [
            "room"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM company WHERE company.headquarters = 'US'",
        "hyp_correct": false,
        "NL_query": "How many companies are headquartered in the US?",
        "index": 306,
        "GT": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM project_outcomes WHERE project_outcomes.outcome_code = 'patents'",
        "hyp_correct": false,
        "NL_query": "How many patents outcomes were listed for all the projects?",
        "index": 354,
        "GT": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_outcomes"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM person WHERE person.gender = 'females'",
        "hyp_correct": false,
        "NL_query": "How many females does this network has?",
        "index": 361,
        "GT": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM person WHERE person.gender = 'females'",
        "hyp_correct": false,
        "NL_query": "How many females are in the network?",
        "index": 362,
        "GT": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT tryout.cname FROM tryout WHERE tryout.ppos = 'goalie' INTERSECT SELECT tryout.cname FROM tryout WHERE tryout.ppos = 'mid'",
        "hyp_correct": false,
        "NL_query": "How many schools have some students playing in goalie and mid positions.",
        "index": 445,
        "GT": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT tryout.cname FROM tryout WHERE tryout.ppos = 'goalie' INTERSECT SELECT tryout.cname FROM tryout WHERE tryout.ppos = 'mid'",
        "hyp_correct": false,
        "NL_query": "How many schools have students playing in goalie and mid-field positions?",
        "index": 446,
        "GT": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT college.state FROM college JOIN tryout ON college.cname = tryout.cname WHERE tryout.ppos = 'mid' EXCEPT SELECT college.state FROM college JOIN tryout ON college.cname = tryout.cname WHERE tryout.ppos = 'goalie'",
        "hyp_correct": false,
        "NL_query": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "index": 447,
        "GT": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "DB": "soccer_2",
        "tables": [
            "college",
            "tryout"
        ]
    },
    {
        "SQL": "SELECT college.state FROM college, tryout WHERE college.state = (SELECT college.state , COUNT( * ) FROM college JOIN tryout ON college.cname = tryout.cname WHERE tryout.ppos = 'goalies')",
        "hyp_correct": false,
        "NL_query": "What is the count of states with college students playing in the mid position but not as goalies?",
        "index": 448,
        "GT": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "DB": "soccer_2",
        "tables": [
            "college",
            "tryout"
        ]
    },
    {
        "SQL": "SELECT DISTINCT member.level FROM member",
        "hyp_correct": false,
        "NL_query": "What are the different membership levels?",
        "index": 474,
        "GT": "SELECT count(DISTINCT LEVEL) FROM member",
        "DB": "shop_membership",
        "tables": [
            "member"
        ]
    },
    {
        "SQL": "SELECT dorm.dorm_name FROM dorm WHERE dorm.gender = 'f'",
        "hyp_correct": false,
        "NL_query": "Find the name of dorms only for female (F gender).",
        "index": 478,
        "GT": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "SELECT dorm.dorm_name FROM dorm WHERE dorm.gender = 'f'",
        "hyp_correct": false,
        "NL_query": "What are the names of the all-female dorms?",
        "index": 479,
        "GT": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT( DISTINCT has_amenity.amenid ) FROM has_amenity",
        "hyp_correct": false,
        "NL_query": "Find the number of distinct amenities.",
        "index": 486,
        "GT": "SELECT count(*) FROM dorm_amenity",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm_amenity"
        ]
    },
    {
        "SQL": "SELECT COUNT( DISTINCT dorm_amenity.amenity_name ) FROM dorm JOIN has_amenity ON dorm.dormid = has_amenity.dormid JOIN dorm_amenity ON has_amenity.amenid = dorm_amenity.amenid",
        "hyp_correct": false,
        "NL_query": "How many diffrent dorm amenities are there?",
        "index": 487,
        "GT": "SELECT count(*) FROM dorm_amenity",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm",
            "dorm_amenity"
        ]
    },
    {
        "SQL": "SELECT dorm.dormid , COUNT( * ) FROM dorm JOIN has_amenity ON dorm.dormid = has_amenity.dormid GROUP BY dorm.dormid",
        "hyp_correct": false,
        "NL_query": "Find the number of dorms that have some amenity.",
        "index": 492,
        "GT": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM dorm JOIN has_amenity ON dorm.dormid = has_amenity.dormid",
        "hyp_correct": false,
        "NL_query": "How many dorms have amenities?",
        "index": 493,
        "GT": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT video_games.gname FROM video_games WHERE video_games.gtype = 'collectible cards'",
        "hyp_correct": false,
        "NL_query": "What are the names of all video games that are collectible cards?",
        "index": 513,
        "GT": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM video_games WHERE video_games.gtype = 'Massively multiplayer online'",
        "hyp_correct": false,
        "NL_query": "Count the number of video games with Massively multiplayer online game type .",
        "index": 517,
        "GT": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"",
        "DB": "game_1",
        "tables": [
            "video_games"
        ]
    },
    {
        "SQL": "SELECT student.advisor FROM student",
        "hyp_correct": false,
        "NL_query": "What are the advisors",
        "index": 525,
        "GT": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
        "DB": "game_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM sportsinfo",
        "hyp_correct": false,
        "NL_query": "How many sports do we have?",
        "index": 526,
        "GT": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM sportsinfo",
        "hyp_correct": false,
        "NL_query": "How many students play sports?",
        "index": 528,
        "GT": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT sportsinfo.stuid FROM sportsinfo WHERE sportsinfo.onscholarship = 'y'",
        "hyp_correct": false,
        "NL_query": "List ids for all student who are on scholarship.",
        "index": 530,
        "GT": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT sportsinfo.stuid FROM sportsinfo WHERE sportsinfo.onscholarship = 'y'",
        "hyp_correct": false,
        "NL_query": "What are the ids for all sporty students who are on scholarship?",
        "index": 531,
        "GT": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , plays_games.stuid FROM plays_games",
        "hyp_correct": false,
        "NL_query": "How many games are played for all students?",
        "index": 532,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "DB": "game_1",
        "tables": [
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT COUNT( DISTINCT addresses.town_city ) FROM addresses WHERE addresses.state_province_county = 'Colorado'",
        "hyp_correct": false,
        "NL_query": "How many cities are there in state \"Colorado\"?",
        "index": 549,
        "GT": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "SELECT individuals.individual_last_name FROM individuals JOIN organization_contact_individuals ON individuals.individual_id = organization_contact_individuals.individual_id",
        "hyp_correct": false,
        "NL_query": "Find the last name of the individuals that have been contact individuals of an organization.",
        "index": 555,
        "GT": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "DB": "e_government",
        "tables": [
            "organization_contact_individuals",
            "individuals"
        ]
    },
    {
        "SQL": "SELECT individuals.individual_last_name FROM individuals JOIN organization_contact_individuals ON individuals.individual_id = organization_contact_individuals.individual_id",
        "hyp_correct": false,
        "NL_query": "What are the last names of individuals who have been contact individuals for an organization?",
        "index": 556,
        "GT": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "DB": "e_government",
        "tables": [
            "organization_contact_individuals",
            "individuals"
        ]
    },
    {
        "SQL": "SELECT COUNT( DISTINCT ref_budget_codes.budget_type_code ) FROM ref_budget_codes",
        "hyp_correct": false,
        "NL_query": "How many budget types do we have?",
        "index": 575,
        "GT": "SELECT count(*) FROM Ref_budget_codes",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM train_station",
        "hyp_correct": false,
        "NL_query": "How many train stations are there?",
        "index": 583,
        "GT": "SELECT count(*) FROM station",
        "DB": "train_station",
        "tables": [
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT station.location FROM station JOIN train_station ON station.station_id = train_station.station_id",
        "hyp_correct": false,
        "NL_query": "What are all locations of train stations?",
        "index": 584,
        "GT": "SELECT DISTINCT LOCATION FROM station",
        "DB": "train_station",
        "tables": [
            "train_station",
            "station"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM addresses JOIN staff ON addresses.address_id = staff.staff_address_id WHERE addresses.state_province_county = 'Georgia'",
        "hyp_correct": false,
        "NL_query": "How many staff live in state Georgia?",
        "index": 597,
        "GT": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE addresses.state_province_county = 'Georgia'",
        "hyp_correct": false,
        "NL_query": "How many employees live in Georgia?",
        "index": 598,
        "GT": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM lessons WHERE lessons.lesson_status_code = 'cancelled'",
        "hyp_correct": false,
        "NL_query": "How many lessons were in cancelled state?",
        "index": 603,
        "GT": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "DB": "driving_school",
        "tables": [
            "lessons"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM lessons WHERE lessons.lesson_status_code = 'cancelled'",
        "hyp_correct": false,
        "NL_query": "How many lessons have been cancelled?",
        "index": 604,
        "GT": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "DB": "driving_school",
        "tables": [
            "lessons"
        ]
    },
    {
        "SQL": "SELECT airports.name FROM airports WHERE airports.elevation BETWEEN 50 and 50",
        "hyp_correct": false,
        "NL_query": "Find the name of airports whose altitude is between -50 and 50.",
        "index": 613,
        "GT": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.name FROM airports WHERE airports.elevation BETWEEN 50 and 50",
        "hyp_correct": false,
        "NL_query": "What are the names of all airports whose elevation is between -50 and 50?",
        "index": 614,
        "GT": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( DISTINCT airports.city ) FROM airports HAVING COUNT( * ) > 3",
        "hyp_correct": false,
        "NL_query": "How many cities are there that have more than 3 airports?",
        "index": 617,
        "GT": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.city , COUNT( * ) FROM airports GROUP BY airports.city HAVING COUNT( * ) > 3",
        "hyp_correct": false,
        "NL_query": "What is the count of cities with more than 3 airports?",
        "index": 618,
        "GT": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT shipments.shipment_id FROM shipments WHERE shipments.shipment_tracking_number = '3452'",
        "hyp_correct": false,
        "NL_query": "Find the id of the order whose shipment tracking number is \"3452\".",
        "index": 621,
        "GT": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
        "DB": "tracking_orders",
        "tables": [
            "shipments"
        ]
    },
    {
        "SQL": "SELECT order_items.order_id FROM order_items WHERE order_items.product_id = 11",
        "hyp_correct": false,
        "NL_query": "Find the ids of all the order items whose product id is 11.",
        "index": 623,
        "GT": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "DB": "tracking_orders",
        "tables": [
            "order_items"
        ]
    },
    {
        "SQL": "SELECT cars_data.year FROM cars_data WHERE cars_data.weight BETWEEN 3000 and 4000",
        "hyp_correct": false,
        "NL_query": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "index": 649,
        "GT": "select distinct year from cars_data where weight between 3000 and 4000;",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT cartoon.directed_by FROM cartoon WHERE cartoon.directed_by = 'Ben Jones'",
        "hyp_correct": false,
        "NL_query": "List all cartoon directed by \"Ben Jones\".",
        "index": 665,
        "GT": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "DB": "tvshow",
        "tables": [
            "cartoon"
        ]
    },
    {
        "SQL": "SELECT tv_channel.content FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.series_name = 'Sky Radio'",
        "hyp_correct": false,
        "NL_query": "What is the content of the series Sky Radio?",
        "index": 670,
        "GT": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "DB": "tvshow",
        "tables": [
            "tv_series",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.id HAVING COUNT( * ) > 2",
        "hyp_correct": false,
        "NL_query": "find id of the tv channels that from the countries where have more than two tv channels.",
        "index": 681,
        "GT": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT tv_channel.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel GROUP BY tv_channel.id HAVING COUNT( * ) > 2",
        "hyp_correct": false,
        "NL_query": "What are the ids of all tv channels that have more than 2 TV channels?",
        "index": 682,
        "GT": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "DB": "tvshow",
        "tables": [
            "tv_series",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT department.name , department.num_employees FROM department JOIN management ON department.department_id = management.department_id WHERE management.temporary_acting = 'yes'",
        "hyp_correct": false,
        "NL_query": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "index": 686,
        "GT": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
        "DB": "department_management",
        "tables": [
            "management",
            "department"
        ]
    },
    {
        "SQL": "SELECT DISTINCT head.age FROM head JOIN management ON head.head_id = management.head_id WHERE management.temporary_acting = 'yes'",
        "hyp_correct": false,
        "NL_query": "What are the distinct ages of the heads who are acting?",
        "index": 687,
        "GT": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "DB": "department_management",
        "tables": [
            "management",
            "head"
        ]
    },
    {
        "SQL": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.product_stock_number LIKE '%2%'",
        "hyp_correct": false,
        "NL_query": "Find the names of all the products whose stock number starts with \"2\".",
        "index": 704,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.product_stock_number LIKE '%2%'",
        "hyp_correct": false,
        "NL_query": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "index": 705,
        "GT": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "DB": "product_catalog",
        "tables": [
            "catalog_contents"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM genre JOIN track ON genre.genreid = track.genreid WHERE genre.name = 'rock'",
        "hyp_correct": false,
        "NL_query": "How many tracks belong to rock genre?",
        "index": 730,
        "GT": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "genre",
            "track"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM genre JOIN track ON genre.genreid = track.genreid WHERE genre.name = 'rock'",
        "hyp_correct": false,
        "NL_query": "Count the number of tracks that are part of the rock genre.",
        "index": 731,
        "GT": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "genre",
            "track"
        ]
    },
    {
        "SQL": "SELECT AVG( track.unitprice ) FROM genre JOIN track ON genre.genreid = track.genreid WHERE genre.name = 'jazz'",
        "hyp_correct": false,
        "NL_query": "Find the average unit price of jazz tracks.",
        "index": 733,
        "GT": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "DB": "chinook_1",
        "tables": [
            "genre",
            "track"
        ]
    },
    {
        "SQL": "SELECT AVG( track.unitprice ) FROM genre JOIN track ON genre.genreid = track.genreid WHERE genre.name = 'rock'",
        "hyp_correct": false,
        "NL_query": "What is the average unit price of rock tracks?",
        "index": 754,
        "GT": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "DB": "chinook_1",
        "tables": [
            "genre",
            "track"
        ]
    },
    {
        "SQL": "SELECT medicine.name , medicine.trade_name FROM medicine WHERE medicine.fda_approved = 'yes'",
        "hyp_correct": false,
        "NL_query": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "index": 760,
        "GT": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine.name , medicine.trade_name FROM medicine WHERE medicine.fda_approved = 'yes'",
        "hyp_correct": false,
        "NL_query": "What are the names and trade names of the medcines that are FDA approved?",
        "index": 761,
        "GT": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine.id , medicine.name FROM medicine_enzyme_interaction JOIN medicine ON medicine_enzyme_interaction.medicine_id = medicine.id HAVING COUNT( * ) >= 4",
        "hyp_correct": false,
        "NL_query": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "index": 763,
        "GT": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT university.school , university.location FROM university WHERE university.affiliation = 'public'",
        "hyp_correct": false,
        "NL_query": "List all public schools and their locations.",
        "index": 774,
        "GT": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.school , university.location FROM university WHERE university.affiliation = 'public'",
        "hyp_correct": false,
        "NL_query": "What are the public schools and what are their locations?",
        "index": 775,
        "GT": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.school FROM university WHERE university.founded > 1850 OR university.affiliation = 'public'",
        "hyp_correct": false,
        "NL_query": "Find the schools that were either founded after 1850 or public.",
        "index": 788,
        "GT": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.school FROM university WHERE university.founded > 1850 OR university.affiliation = 'public'",
        "hyp_correct": false,
        "NL_query": "What are the schools that were either founded before 1850 or are public?",
        "index": 789,
        "GT": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT MAX( player.weight ) , MIN( player.height ) FROM player",
        "hyp_correct": false,
        "NL_query": "What is the maximum and minimum height of all players?",
        "index": 798,
        "GT": "SELECT max(weight) ,  min(weight) FROM Player",
        "DB": "soccer_1",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT DISTINCT customers.customer_details FROM policies JOIN customers ON policies.customer_id = customers.customer_id WHERE policies.policy_type_code = 'deputy'",
        "hyp_correct": false,
        "NL_query": "Find the names of the customers who have an deputy policy.",
        "index": 821,
        "GT": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "policies",
            "customers"
        ]
    },
    {
        "SQL": "SELECT products.product_color , SUM( order_items.product_quantity ) FROM order_items JOIN products ON order_items.product_id = products.product_id GROUP BY products.product_color",
        "hyp_correct": false,
        "NL_query": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "index": 862,
        "GT": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "DB": "customers_and_invoices",
        "tables": [
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "SELECT SUM( checking.balance ) FROM accounts JOIN savings ON accounts.custid = savings.custid ORDER BY checking.balance ASC",
        "hyp_correct": false,
        "NL_query": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "index": 877,
        "GT": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT SUM( checking.balance ) FROM checking ORDER BY checking.balance , savings.balance ASC",
        "hyp_correct": false,
        "NL_query": "What is the sum of checking and savings balances for all customers, ordered by the total balance?",
        "index": 878,
        "GT": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings"
        ]
    },
    {
        "SQL": "SELECT roles.role_description , COUNT( employees.employee_id ) FROM employees JOIN employees ON employees.role_code = employees.employee_id WHERE roles.role_description != roles.role_description GROUP BY employees.role_code",
        "hyp_correct": false,
        "NL_query": "List roles that have more than one employee. List the role description and number of employees.",
        "index": 922,
        "GT": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "roles"
        ]
    },
    {
        "SQL": "SELECT documents.document_id FROM documents WHERE documents.document_status_code = 'done' AND documents.document_type_code = 'paper'",
        "hyp_correct": false,
        "NL_query": "List the document ids for any documents with the status code done and the type code paper.",
        "index": 924,
        "GT": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "documents"
        ]
    },
    {
        "SQL": "SELECT AVG( people.height ) , AVG( people.weight ) FROM people WHERE people.sex = 'm'",
        "hyp_correct": false,
        "NL_query": "What are the average height and weight across males (sex is M)?",
        "index": 966,
        "GT": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "DB": "candidate_poll",
        "tables": [
            "people"
        ]
    },
    {
        "SQL": "SELECT party.lieutenant_governor , party.comptroller FROM party WHERE party.party = 'democratic'",
        "hyp_correct": false,
        "NL_query": "Show the lieutenant governor and comptroller from the democratic party.",
        "index": 985,
        "GT": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "SELECT party.lieutenant_governor , party.comptroller FROM party WHERE party.party = 'democratic'",
        "hyp_correct": false,
        "NL_query": "Who are the lieutenant governor and comptroller from the democratic party?",
        "index": 986,
        "GT": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "DB": "election",
        "tables": [
            "party"
        ]
    },
    {
        "SQL": "SELECT bank.bname , bank.city FROM bank JOIN loan ON bank.branch_id = loan.branch_id WHERE loan.loan_type = 'business'",
        "hyp_correct": false,
        "NL_query": "Find the city and name of bank branches that provide business loans.",
        "index": 1047,
        "GT": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "DB": "loan_1",
        "tables": [
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "SELECT bank.bname , bank.city FROM bank JOIN loan ON bank.branch_id = loan.branch_id WHERE loan.loan_type = 'business'",
        "hyp_correct": false,
        "NL_query": "What are the names and cities of bank branches that offer loans for business?",
        "index": 1048,
        "GT": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "DB": "loan_1",
        "tables": [
            "loan",
            "bank"
        ]
    },
    {
        "SQL": "SELECT train.time , train.train_number FROM train WHERE train.destination = 'Chennai,' ORDER BY train.time ASC",
        "hyp_correct": false,
        "NL_query": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "index": 1066,
        "GT": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME",
        "DB": "station_weather",
        "tables": [
            "train"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM files WHERE files.duration = '4'",
        "hyp_correct": false,
        "NL_query": "How many songs have 4 minute duration?",
        "index": 1098,
        "GT": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "DB": "music_1",
        "tables": [
            "files"
        ]
    },
    {
        "SQL": "SELECT files.duration FROM files WHERE files.duration NOT IN (SELECT AVG( files.duration ) FROM files ORDER BY files.duration DESC LIMIT 4) GROUP BY files.duration",
        "hyp_correct": false,
        "NL_query": "What is the count of the songs that last approximately 4 minutes?",
        "index": 1099,
        "GT": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "DB": "music_1",
        "tables": [
            "files"
        ]
    },
    {
        "SQL": "SELECT AVG( song.rating ) FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = 'female'",
        "hyp_correct": false,
        "NL_query": "What is the average rating of songs produced by female artists?",
        "index": 1100,
        "GT": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT AVG( song.rating ) FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = 'female'",
        "hyp_correct": false,
        "NL_query": "How many songs, on average, are sung by a female artist?",
        "index": 1101,
        "GT": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = 'female' AND song.languages = 'Bangla'",
        "hyp_correct": false,
        "NL_query": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "index": 1102,
        "GT": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = 'female' AND song.languages = 'Bangla'",
        "hyp_correct": false,
        "NL_query": "What countries are the female artists who sung in the language Bangla from?",
        "index": 1103,
        "GT": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist WHERE artist.gender = 'male' AND artist.gender = 'male'",
        "hyp_correct": false,
        "NL_query": "What are the names of all male British artists?",
        "index": 1115,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "DB": "music_1",
        "tables": [
            "artist"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.genre_is = 'modern' OR song.languages = 'English'",
        "hyp_correct": false,
        "NL_query": "Find the names of songs whose genre is modern or language is English.",
        "index": 1116,
        "GT": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.genre_is = 'modern' OR song.languages = 'English'",
        "hyp_correct": false,
        "NL_query": "What are the names of the songs that are modern or sung in English?",
        "index": 1117,
        "GT": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT AVG( song.rating ) , AVG( song.resolution ) FROM song WHERE song.languages = 'Bangla'",
        "hyp_correct": false,
        "NL_query": "What are the average rating and resolution of songs that are in Bangla?",
        "index": 1118,
        "GT": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.f_id , song.genre_is , song.artist_name FROM song WHERE song.languages = 'English' ORDER BY song.rating ASC",
        "hyp_correct": false,
        "NL_query": "List the id, genre and artist name of English songs ordered by rating.",
        "index": 1120,
        "GT": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.f_id , song.genre_is , song.artist_name FROM song WHERE song.languages = 'English' ORDER BY song.rating ASC",
        "hyp_correct": false,
        "NL_query": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "index": 1121,
        "GT": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT player.bats , player.bats FROM player JOIN all_star ON player.player_id = all_star.player_id WHERE all_star.year = 1998",
        "hyp_correct": false,
        "NL_query": "What are first and last names of players participating in all star game in 1998?",
        "index": 1124,
        "GT": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "DB": "baseball_1",
        "tables": [
            "all_star",
            "player"
        ]
    },
    {
        "SQL": "SELECT player.name_first , player.name_first FROM player JOIN all_star ON player.player_id = all_star.player_id WHERE all_star.year = 1998",
        "hyp_correct": false,
        "NL_query": "List the first and last name for players who participated in all star game in 1998.",
        "index": 1125,
        "GT": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "DB": "baseball_1",
        "tables": [
            "all_star",
            "player"
        ]
    },
    {
        "SQL": "SELECT hall_of_fame.ballots , COUNT( * ) FROM hall_of_fame GROUP BY hall_of_fame.ballots",
        "hyp_correct": false,
        "NL_query": "How many players enter hall of fame each year?",
        "index": 1126,
        "GT": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",
        "DB": "baseball_1",
        "tables": [
            "hall_of_fame"
        ]
    },
    {
        "SQL": "SELECT hall_of_fame.ballots , COUNT( * ) FROM hall_of_fame GROUP BY hall_of_fame.ballots",
        "hyp_correct": false,
        "NL_query": "Count the number of players who enter hall of fame for each year.",
        "index": 1127,
        "GT": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",
        "DB": "baseball_1",
        "tables": [
            "hall_of_fame"
        ]
    },
    {
        "SQL": "SELECT player.name_first , player.name_first FROM player WHERE player.death_country = 'null'",
        "hyp_correct": false,
        "NL_query": "Find all the players' first name and last name who have empty death record.",
        "index": 1130,
        "GT": "SELECT name_first ,  name_last FROM player WHERE death_year = '';",
        "DB": "baseball_1",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT player.name_first , player.name_first FROM player WHERE player.death_city = 'null'",
        "hyp_correct": false,
        "NL_query": "What are the first name and last name of the players whose death record is empty?",
        "index": 1131,
        "GT": "SELECT name_first ,  name_last FROM player WHERE death_year = '';",
        "DB": "baseball_1",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT MAX( postseason.league_id_loser ) FROM postseason JOIN team ON postseason.team_id_loser = team.team_id_br WHERE team.name = 'Boston Red Stockings'",
        "hyp_correct": false,
        "NL_query": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "index": 1136,
        "GT": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
        "DB": "baseball_1",
        "tables": [
            "postseason",
            "team"
        ]
    },
    {
        "SQL": "SELECT MAX( postseason.league_id_loser ) FROM postseason JOIN team ON postseason.team_id_loser = team.team_id_br WHERE team.name = 'Boston Red Stockings'",
        "hyp_correct": false,
        "NL_query": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?",
        "index": 1137,
        "GT": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
        "DB": "baseball_1",
        "tables": [
            "postseason",
            "team"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM postseason JOIN team ON postseason.league_id_loser = team.div_id WHERE team.name = 'Boston Red Stockings' AND postseason.losses = 2009",
        "hyp_correct": false,
        "NL_query": "How many times did Boston Red Stockings lose in 2009 postseason?",
        "index": 1138,
        "GT": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;",
        "DB": "baseball_1",
        "tables": [
            "postseason",
            "team"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM postseason JOIN team ON postseason.team_id_loser = team.team_id_br WHERE team.name = 'Boston Red Stockings' AND postseason.losses = 2009",
        "hyp_correct": false,
        "NL_query": "Count the number of times the team \"Boston Red Stockings\" lost in 2009 postseason.",
        "index": 1139,
        "GT": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;",
        "DB": "baseball_1",
        "tables": [
            "postseason",
            "team"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM postseason WHERE postseason.losses = 1885 AND postseason.ties = 1",
        "hyp_correct": false,
        "NL_query": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
        "index": 1140,
        "GT": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;",
        "DB": "baseball_1",
        "tables": [
            "postseason"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM postseason WHERE postseason.losses = 1885 AND postseason.ties = 1",
        "hyp_correct": false,
        "NL_query": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason.",
        "index": 1141,
        "GT": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;",
        "DB": "baseball_1",
        "tables": [
            "postseason"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM salary JOIN team ON salary.team_id = team.team_id_br WHERE team.name = 'Boston Red Stockings' AND salary.salary = 2000",
        "hyp_correct": false,
        "NL_query": "How many players were in the team Boston Red Stockings in 2000?",
        "index": 1144,
        "GT": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
        "DB": "baseball_1",
        "tables": [
            "team",
            "salary"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM salary JOIN team ON salary.league_id = team.div_id WHERE team.name = 'Boston Red Stockings' AND salary.salary = 2000",
        "hyp_correct": false,
        "NL_query": "How many players did Boston Red Stockings have in 2000?",
        "index": 1145,
        "GT": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
        "DB": "baseball_1",
        "tables": [
            "team",
            "salary"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE home_game.attendance = 1907 AND park.park_alias = 'Columbia Park'",
        "hyp_correct": false,
        "NL_query": "How many games were played in park \"Columbia Park\" in 1907?",
        "index": 1146,
        "GT": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
        "DB": "baseball_1",
        "tables": [
            "home_game",
            "park"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE home_game.attendance = 1907 AND park.park_alias = 'Columbia Park'",
        "hyp_correct": false,
        "NL_query": "Count the number of games taken place in park \"Columbia Park\" in 1907.",
        "index": 1147,
        "GT": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
        "DB": "baseball_1",
        "tables": [
            "home_game",
            "park"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE home_game.attendance = 2000 AND park.city = 'Atlanta'",
        "hyp_correct": false,
        "NL_query": "How many games were played in city Atlanta in 2000?",
        "index": 1148,
        "GT": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
        "DB": "baseball_1",
        "tables": [
            "home_game",
            "park"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE home_game.attendance = 2000 AND park.city = 'Atlanta'",
        "hyp_correct": false,
        "NL_query": "Find the number of games taken place in city Atlanta in 2000.",
        "index": 1149,
        "GT": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
        "DB": "baseball_1",
        "tables": [
            "home_game",
            "park"
        ]
    },
    {
        "SQL": "SELECT SUM( home_game.attendance ) FROM home_game JOIN team ON home_game.team_id = team.team_id_br WHERE team.name = 'Boston Red Stockings' AND home_game.games BETWEEN 2000 and 2010",
        "hyp_correct": false,
        "NL_query": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "index": 1150,
        "GT": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
        "DB": "baseball_1",
        "tables": [
            "home_game",
            "team"
        ]
    },
    {
        "SQL": "SELECT SUM( home_game.games ) FROM home_game JOIN team ON home_game.team_id = team.team_id_br WHERE team.name = 'Boston Red Stockings' AND home_game.attendance BETWEEN 2000 and 2010",
        "hyp_correct": false,
        "NL_query": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?",
        "index": 1151,
        "GT": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
        "DB": "baseball_1",
        "tables": [
            "home_game",
            "team"
        ]
    },
    {
        "SQL": "SELECT SUM( salary.salary ) FROM salary JOIN player ON salary.player_id = player.player_id WHERE player.name_first = 'Len and last name Barker' AND player.name_last = 'Len and last name Barker' AND salary.salary BETWEEN 1985 and 1990",
        "hyp_correct": false,
        "NL_query": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?",
        "index": 1152,
        "GT": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;",
        "DB": "baseball_1",
        "tables": [
            "player",
            "salary"
        ]
    },
    {
        "SQL": "SELECT SUM( salary.salary ) FROM salary JOIN player ON salary.player_id = player.player_id WHERE player.name_first = 'Barker' AND player.name_last = 'Len' AND salary.year BETWEEN 1985 and 1990",
        "hyp_correct": false,
        "NL_query": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.",
        "index": 1153,
        "GT": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;",
        "DB": "baseball_1",
        "tables": [
            "player",
            "salary"
        ]
    },
    {
        "SQL": "SELECT SUM( home_game.games ) FROM home_game JOIN team ON home_game.team_id = team.team_id_br WHERE team.name = 'Boston Red Stockings' AND home_game.attendance BETWEEN 1990 and 2000",
        "hyp_correct": false,
        "NL_query": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
        "index": 1154,
        "GT": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "DB": "baseball_1",
        "tables": [
            "home_game",
            "team"
        ]
    },
    {
        "SQL": "SELECT SUM( home_game.games ) FROM home_game JOIN team ON home_game.team_id = team.team_id_br WHERE team.name = 'Boston Red Stockings' AND home_game.attendance BETWEEN 1990 and 2000",
        "hyp_correct": false,
        "NL_query": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.",
        "index": 1155,
        "GT": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "DB": "baseball_1",
        "tables": [
            "home_game",
            "team"
        ]
    },
    {
        "SQL": "SELECT mountain.id , mountain.name FROM mountain JOIN photos ON mountain.id = photos.mountain_id WHERE mountain.height > 'mountains'",
        "hyp_correct": false,
        "NL_query": "What are the id and name of the photos for mountains?",
        "index": 1160,
        "GT": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
        "DB": "mountain_photos",
        "tables": [
            "mountain",
            "photos"
        ]
    },
    {
        "SQL": "SELECT channel.name FROM channel JOIN broadcast ON channel.channel_id = broadcast.channel_id WHERE broadcast.time_of_day = 'morning'",
        "hyp_correct": false,
        "NL_query": "Find the names of the channels that are broadcast in the morning.",
        "index": 1170,
        "GT": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "DB": "program_share",
        "tables": [
            "broadcast",
            "channel"
        ]
    },
    {
        "SQL": "SELECT channel.name FROM channel JOIN broadcast ON channel.channel_id = broadcast.channel_id WHERE broadcast.time_of_day = 'morning'",
        "hyp_correct": false,
        "NL_query": "Which channels are broadcast in the morning? Give me the channel names.",
        "index": 1171,
        "GT": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "DB": "program_share",
        "tables": [
            "broadcast",
            "channel"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , block.blockfloor FROM block JOIN room ON block.blockfloor = room.blockfloor JOIN block ON block.blockcode = room.blockcode GROUP BY block.blockfloor",
        "hyp_correct": false,
        "NL_query": "Find the number of rooms located on each block floor.",
        "index": 1186,
        "GT": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
        "DB": "hospital_1",
        "tables": [
            "block",
            "room"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , block.blockfloor FROM block JOIN room ON block.blockfloor = room.blockfloor JOIN block ON block.blockcode = room.blockcode GROUP BY block.blockfloor",
        "hyp_correct": false,
        "NL_query": "How many rooms does each block floor have?",
        "index": 1187,
        "GT": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
        "DB": "hospital_1",
        "tables": [
            "block",
            "room"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , block.blockcode FROM block JOIN room ON block.blockfloor = room.blockfloor JOIN block ON block.blockcode = room.blockcode GROUP BY block.blockcode",
        "hyp_correct": false,
        "NL_query": "Find the number of rooms for different block code?",
        "index": 1188,
        "GT": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "DB": "hospital_1",
        "tables": [
            "block",
            "room"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , block.blockcode FROM block JOIN room ON block.blockfloor = room.blockfloor JOIN block ON block.blockcode = room.blockcode GROUP BY block.blockcode",
        "hyp_correct": false,
        "NL_query": "How many rooms are located for each block code?",
        "index": 1189,
        "GT": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "DB": "hospital_1",
        "tables": [
            "block",
            "room"
        ]
    },
    {
        "SQL": "SELECT ship.name FROM ship WHERE ship.nationality NOT IN (SELECT AVG( ship.name ) FROM ship ORDER BY ship.nationality ASC LIMIT ship.nationality)",
        "hyp_correct": false,
        "NL_query": "What are the names of the ships  that are from either the US or the UK?",
        "index": 1211,
        "GT": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"",
        "DB": "ship_mission",
        "tables": [
            "ship"
        ]
    },
    {
        "SQL": "SELECT company.name FROM company WHERE company.industry = 'banking' OR company.industry = 'retailing'",
        "hyp_correct": false,
        "NL_query": "Show the names of companies in the banking or retailing industry?",
        "index": 1225,
        "GT": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "SELECT project_staff.date_from , project_staff.date_to FROM project_staff WHERE project_staff.role_code = 'researchers'",
        "hyp_correct": false,
        "NL_query": "When did researchers start and stop working?",
        "index": 1252,
        "GT": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM project_staff WHERE project_staff.role_code = 'leaders' OR project_staff.date_from<'1989-04-24 23:51:54'",
        "hyp_correct": false,
        "NL_query": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "index": 1261,
        "GT": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM project_staff WHERE project_staff.role_code = 'leaders' OR project_staff.date_from<'1989-04-24 23:51:54'",
        "hyp_correct": false,
        "NL_query": "How many project members were leaders or started working before '1989-04-24 23:51:54'?",
        "index": 1262,
        "GT": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT project_staff.role_code FROM project_staff WHERE project_staff.staff_id = 1 AND project_staff.date_from = 1 AND project_staff.date_to = 1 AND project_staff.date_from = 1 AND project_staff.date_to = 1",
        "hyp_correct": false,
        "NL_query": "What are the staff roles of the staff who",
        "index": 1267,
        "GT": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM person WHERE person.age > 30 AND person.job = 'engineers'",
        "hyp_correct": false,
        "NL_query": "HOw many engineers are older than 30?",
        "index": 1274,
        "GT": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT person.name FROM person WHERE person.gender = 'males' ORDER BY person.age ASC",
        "hyp_correct": false,
        "NL_query": "Find the name and age of all males in order of their age.",
        "index": 1287,
        "GT": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT personfriend.name FROM person JOIN personfriend ON person.name = personfriend.friend WHERE person.city = 'New York'",
        "hyp_correct": false,
        "NL_query": "What are the names of all friends who are from New York?",
        "index": 1300,
        "GT": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT faculty.fname , faculty.lname FROM faculty WHERE faculty.sex = 'm' AND faculty.building = 'NEB'",
        "hyp_correct": false,
        "NL_query": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "index": 1322,
        "GT": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT faculty.fname , faculty.lname FROM faculty WHERE faculty.sex = 'm' AND faculty.building = 'NEB'",
        "hyp_correct": false,
        "NL_query": "What are the full names of faculties with sex M and who live in building NEB?",
        "index": 1323,
        "GT": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT faculty.room FROM faculty WHERE faculty.rank = 'professor' AND faculty.building = 'NEB'",
        "hyp_correct": false,
        "NL_query": "Find the rooms of faculties with rank professor who live in building NEB.",
        "index": 1324,
        "GT": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT faculty.room FROM faculty WHERE faculty.rank = 'professors' AND faculty.building = 'NEB'",
        "hyp_correct": false,
        "NL_query": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "index": 1325,
        "GT": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT student.lname FROM student WHERE student.sex = 'f' ORDER BY student.age DESC",
        "hyp_correct": false,
        "NL_query": "What are the last names of female students, ordered by age descending?",
        "index": 1327,
        "GT": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
        "DB": "college_3",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT faculty.lname FROM faculty WHERE faculty.building = 'Barton,' ORDER BY faculty.lname ASC",
        "hyp_correct": false,
        "NL_query": "What are the last names of faculty in building Barton, sorted by last name?",
        "index": 1329,
        "GT": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT faculty.fname FROM faculty WHERE faculty.rank = 'professors,' ORDER BY faculty.fname ASC",
        "hyp_correct": false,
        "NL_query": "What are the first names for all faculty professors, ordered by first name?",
        "index": 1331,
        "GT": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname",
        "DB": "college_3",
        "tables": [
            "faculty"
        ]
    },
    {
        "SQL": "SELECT faculty.fname , faculty.lname FROM course JOIN faculty ON course.instructor = faculty.facid WHERE course.cname = 'course.cname'",
        "hyp_correct": false,
        "NL_query": "Find the first name and last name of the instructor of course that has course name",
        "index": 1334,
        "GT": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
        "DB": "college_3",
        "tables": [
            "course",
            "faculty"
        ]
    },
    {
        "SQL": "SELECT airport.international_passengers , airport.domestic_passengers FROM airport WHERE airport.airport_name = 'Heathrow'",
        "hyp_correct": false,
        "NL_query": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
        "index": 1344,
        "GT": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
        "DB": "aircraft",
        "tables": [
            "airport"
        ]
    },
    {
        "SQL": "SELECT college.cname , college.enr FROM college WHERE college.enr > 10000 AND college.enr > 10000",
        "hyp_correct": false,
        "NL_query": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "index": 1367,
        "GT": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "DB": "soccer_2",
        "tables": [
            "college"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM student WHERE student.sex = 'f' AND student.age<25",
        "hyp_correct": false,
        "NL_query": "How many female students (sex is F) whose age is below 25?",
        "index": 1455,
        "GT": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM student WHERE student.sex = 'f' AND student.age<25",
        "hyp_correct": false,
        "NL_query": "How many girl students who are younger than 25?",
        "index": 1456,
        "GT": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "DB": "dorm_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT student.major , AVG( student.age ) , MIN( student.age ) FROM student GROUP BY student.major",
        "hyp_correct": false,
        "NL_query": "Show the average, minimum, and maximum age for different majors.",
        "index": 1499,
        "GT": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "DB": "game_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT student.major , AVG( student.age ) , MIN( student.age ) , MAX( student.age ) FROM student",
        "hyp_correct": false,
        "NL_query": "What are the average, minimum, and max ages for each of the different majors?",
        "index": 1500,
        "GT": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "DB": "game_1",
        "tables": [
            "student"
        ]
    },
    {
        "SQL": "SELECT student.lname FROM sportsinfo JOIN student ON sportsinfo.stuid = student.stuid WHERE sportsinfo.onscholarship = 'y'",
        "hyp_correct": false,
        "NL_query": "Show last names for all student who are on scholarship.",
        "index": 1501,
        "GT": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT student.lname FROM sportsinfo JOIN student ON sportsinfo.stuid = student.stuid WHERE sportsinfo.onscholarship = 'y'",
        "hyp_correct": false,
        "NL_query": "What are the last names for all scholarship students?",
        "index": 1502,
        "GT": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT SUM( sportsinfo.gamesplayed ) FROM sportsinfo WHERE sportsinfo.sportname = 'football' AND sportsinfo.onscholarship = 'y'",
        "hyp_correct": false,
        "NL_query": "How many games are played for all football games by students on scholarship?",
        "index": 1503,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT SUM( sportsinfo.gamesplayed ) FROM sportsinfo WHERE sportsinfo.sportname = 'football' AND sportsinfo.onscholarship = 'y'",
        "hyp_correct": false,
        "NL_query": "What is the total number of all football games played by scholarship students?",
        "index": 1504,
        "GT": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT documents.document_name , documents.document_date FROM projects JOIN documents ON projects.project_id = documents.project_id WHERE projects.project_details = 'Graph Database'",
        "hyp_correct": false,
        "NL_query": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "index": 1556,
        "GT": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "projects"
        ]
    },
    {
        "SQL": "SELECT documents.document_name , documents.document_date FROM projects JOIN documents ON projects.project_id = documents.project_id WHERE projects.project_details = 'Graph Database'",
        "hyp_correct": false,
        "NL_query": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
        "index": 1557,
        "GT": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "projects"
        ]
    },
    {
        "SQL": "SELECT ref_document_types.document_type_name , COUNT( * ) FROM documents JOIN ref_document_types ON documents.document_type_code = ref_document_types.document_type_code GROUP BY documents.document_type_code",
        "hyp_correct": false,
        "NL_query": "How many documents are there of each type?",
        "index": 1561,
        "GT": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "ref_document_types"
        ]
    },
    {
        "SQL": "SELECT statements.statement_details , documents.document_name FROM statements JOIN documents ON statements.statement_id = documents.document_id WHERE projects.project_details = 'Private Project'",
        "hyp_correct": false,
        "NL_query": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "index": 1562,
        "GT": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "statements"
        ]
    },
    {
        "SQL": "SELECT statements.statement_details , documents.document_name FROM documents JOIN statements ON documents.document_id = statements.statement_id WHERE projects.project_details = 'Private Project'",
        "hyp_correct": false,
        "NL_query": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "index": 1563,
        "GT": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "statements"
        ]
    },
    {
        "SQL": "SELECT documents.document_name , documents.document_description , documents.document_date FROM documents JOIN ref_document_types ON documents.document_type_code = ref_document_types.document_type_code",
        "hyp_correct": false,
        "NL_query": "Return the type name, type description, and date of creation for each document.",
        "index": 1567,
        "GT": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "ref_document_types"
        ]
    },
    {
        "SQL": "SELECT ref_budget_codes.budget_type_code , documents.document_description , documents.document_id FROM documents , ref_budget_codes , ref_document_types",
        "hyp_correct": false,
        "NL_query": "Show the budget type code and description and the corresponding document id.",
        "index": 1576,
        "GT": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses",
            "ref_document_types",
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "SELECT documents.document_id FROM documents JOIN ref_document_types ON documents.document_type_code = ref_document_types.document_type_code WHERE ref_budget_codes.budget_type_description = 'Government'",
        "hyp_correct": false,
        "NL_query": "Show ids for all documents with budget types described as 'Government'.",
        "index": 1578,
        "GT": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses",
            "ref_document_types",
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "SELECT documents.document_id FROM documents WHERE documents.document_description = 'Government'",
        "hyp_correct": false,
        "NL_query": "Give the ids for documents that have the budget description 'Government'.",
        "index": 1579,
        "GT": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses",
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "SELECT ref_budget_codes.budget_type_code , COUNT( * ) FROM ref_budget_codes GROUP BY ref_budget_codes.budget_type_code",
        "hyp_correct": false,
        "NL_query": "Show budget type codes and the number of documents in each budget type.",
        "index": 1580,
        "GT": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents_with_expenses",
            "ref_budget_codes"
        ]
    },
    {
        "SQL": "SELECT station.location , SUM( station.total_passengers ) FROM station GROUP BY station.location",
        "hyp_correct": false,
        "NL_query": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "index": 1585,
        "GT": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "SELECT station.location FROM station WHERE station.number_of_platforms >= 15 AND station.total_passengers > 25",
        "hyp_correct": false,
        "NL_query": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "index": 1586,
        "GT": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "SELECT station.name , station.location FROM station ORDER BY station.name , station.annual_interchanges ASC",
        "hyp_correct": false,
        "NL_query": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "index": 1592,
        "GT": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges",
        "DB": "train_station",
        "tables": [
            "station"
        ]
    },
    {
        "SQL": "SELECT staff.date_of_birth FROM staff WHERE staff.nickname = 'Janessa Sawayn'",
        "hyp_correct": false,
        "NL_query": "What is the date of birth for the staff member named Janessa Sawayn?",
        "index": 1596,
        "GT": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "SELECT staff.date_joined_staff FROM staff WHERE staff.nickname = 'Janessa Sawayn'",
        "hyp_correct": false,
        "NL_query": "When did the staff member named Janessa Sawayn join the company?",
        "index": 1598,
        "GT": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "SELECT staff.nickname FROM staff WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Janessa Sawayn'",
        "hyp_correct": false,
        "NL_query": "What is the nickname of the employee named Janessa Sawayn?",
        "index": 1602,
        "GT": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "staff"
        ]
    },
    {
        "SQL": "SELECT addresses.city FROM addresses JOIN staff ON addresses.address_id = staff.staff_address_id WHERE customers.first_name = 'Janessa' AND customers.last_name = 'Sawayn'",
        "hyp_correct": false,
        "NL_query": "In what city does Janessa Sawayn live?",
        "index": 1604,
        "GT": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT addresses.zip_postcode FROM addresses JOIN staff ON addresses.address_id = staff.staff_address_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Janessa Sawayn'",
        "hyp_correct": false,
        "NL_query": "What is the zip code of the hosue of the employee named Janessa Sawayn?",
        "index": 1608,
        "GT": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT addresses.state_province_county FROM addresses JOIN staff ON addresses.address_id = staff.staff_address_id GROUP BY addresses.state_province_county HAVING COUNT( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "List the states which have between 2 to 4 staffs living there.",
        "index": 1611,
        "GT": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT addresses.state_province_county FROM addresses JOIN staff ON addresses.address_id = staff.staff_address_id GROUP BY addresses.state_province_county HAVING COUNT( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "What are the names of the states that have 2 to 4 employees living there?",
        "index": 1612,
        "GT": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "DB": "driving_school",
        "tables": [
            "addresses",
            "staff"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM customers JOIN lessons ON customers.customer_id = lessons.customer_id WHERE customers.first_name = 'Rylan' AND customers.last_name = 'Goodwin'",
        "hyp_correct": false,
        "NL_query": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "index": 1623,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "DB": "driving_school",
        "tables": [
            "customers",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM customers JOIN lessons ON customers.customer_id = lessons.customer_id WHERE customers.first_name = 'Ryan' AND customers.last_name = 'Goodwin'",
        "hyp_correct": false,
        "NL_query": "How many lessons did the customer Ryan Goodwin complete?",
        "index": 1624,
        "GT": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "DB": "driving_school",
        "tables": [
            "customers",
            "lessons"
        ]
    },
    {
        "SQL": "SELECT airports.name , airports.country , airports.country , airports.elevation FROM airports WHERE airports.city = 'New York'",
        "hyp_correct": false,
        "NL_query": "What is the name, city, country, and elevation for every airport in the city of New York?",
        "index": 1648,
        "GT": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM airports WHERE airports.name LIKE '%Interanation%'",
        "hyp_correct": false,
        "NL_query": "How many airports' names have the word Interanation in them?",
        "index": 1656,
        "GT": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM routes JOIN airports ON routes.dst_apid = airports.apid WHERE airports.country = 'Canadian'",
        "hyp_correct": false,
        "NL_query": "How many routes end in a Canadian airport?",
        "index": 1660,
        "GT": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( DISTINCT airports.name ) FROM airlines JOIN routes ON airlines.alid = routes.alid JOIN airports ON routes.alid = airports.apid WHERE airlines.name = 'American Airlines'",
        "hyp_correct": false,
        "NL_query": "Find the number of different airports which are the destinations of the American Airlines.",
        "index": 1665,
        "GT": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airlines",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( DISTINCT airports.name ) FROM airlines JOIN routes ON airlines.alid = routes.alid JOIN airports ON routes.dst_apid = airports.apid WHERE airlines.name = 'American Airlines'",
        "hyp_correct": false,
        "NL_query": "What is the number of different different airports that are destinations for American Airlines?",
        "index": 1666,
        "GT": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airlines",
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.city FROM airports GROUP BY airports.city HAVING COUNT( * ) > 2",
        "hyp_correct": false,
        "NL_query": "List the cities which have more than 2 airports sorted by the number of airports.",
        "index": 1671,
        "GT": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT airports.city FROM airports GROUP BY airports.city HAVING COUNT( * ) > 2",
        "hyp_correct": false,
        "NL_query": "What are the cities that have more than 2 airports sorted by number of airports?",
        "index": 1672,
        "GT": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT routes.src_ap , airports.name , COUNT( * ) FROM routes JOIN airports ON routes.src_apid = airports.apid GROUP BY airports.name",
        "hyp_correct": false,
        "NL_query": "Find the number of routes for each source airport and the airport name.",
        "index": 1673,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM routes JOIN airports ON routes.dst_apid = airports.apid WHERE airports.country = 'Italian'",
        "hyp_correct": false,
        "NL_query": "What is the number of routes whose destinations are Italian airports?",
        "index": 1678,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT customers.customer_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.date_order_placed >= 2009-01-01 AND orders.date_order_placed <= 2010-01-01",
        "hyp_correct": false,
        "NL_query": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "index": 1693,
        "GT": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT customers.customer_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.date_order_placed = '2009-01-01' OR orders.date_order_placed<'2010-01-01'",
        "hyp_correct": false,
        "NL_query": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "index": 1694,
        "GT": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT DISTINCT order_items.product_id FROM orders JOIN order_items ON orders.order_id = order_items.order_id WHERE orders.date_order_placed = '1975-01-01' OR orders.date_order_placed<'1976-01-01'",
        "hyp_correct": false,
        "NL_query": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "index": 1695,
        "GT": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "orders",
            "order_items"
        ]
    },
    {
        "SQL": "SELECT DISTINCT products.product_id FROM order_items JOIN orders ON order_items.order_id = orders.order_id WHERE orders.date_order_placed >= '1975-01-01' AND orders.date_order_placed <= '1976-01-01'",
        "hyp_correct": false,
        "NL_query": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "index": 1696,
        "GT": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "DB": "tracking_orders",
        "tables": [
            "orders",
            "order_items"
        ]
    },
    {
        "SQL": "SELECT orders.date_order_placed FROM orders JOIN shipments ON orders.order_id = shipments.order_id WHERE shipments.shipment_tracking_number = 3",
        "hyp_correct": false,
        "NL_query": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "index": 1697,
        "GT": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "DB": "tracking_orders",
        "tables": [
            "orders",
            "shipments"
        ]
    },
    {
        "SQL": "SELECT orders.date_order_placed FROM orders JOIN shipments ON orders.order_id = shipments.order_id WHERE shipments.shipment_tracking_number = 3",
        "hyp_correct": false,
        "NL_query": "On which day was the order placed whose shipment tracking number is 3452?",
        "index": 1698,
        "GT": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "DB": "tracking_orders",
        "tables": [
            "orders",
            "shipments"
        ]
    },
    {
        "SQL": "SELECT invoices.invoice_number FROM invoices WHERE invoices.invoice_date > '1989-09-03' OR invoices.invoice_date<'2007-12-25'",
        "hyp_correct": false,
        "NL_query": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "index": 1701,
        "GT": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "DB": "tracking_orders",
        "tables": [
            "invoices"
        ]
    },
    {
        "SQL": "SELECT invoices.invoice_number FROM invoices WHERE invoices.invoice_date > '1989-09-03' OR invoices.invoice_date<'2007-12-25'",
        "hyp_correct": false,
        "NL_query": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "index": 1702,
        "GT": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "DB": "tracking_orders",
        "tables": [
            "invoices"
        ]
    },
    {
        "SQL": "SELECT DISTINCT invoices.invoice_details FROM invoices WHERE invoices.invoice_date > '1989-09-03' OR invoices.invoice_date<'2007-12-25'",
        "hyp_correct": false,
        "NL_query": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "index": 1703,
        "GT": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "DB": "tracking_orders",
        "tables": [
            "invoices"
        ]
    },
    {
        "SQL": "SELECT DISTINCT invoices.invoice_details FROM invoices WHERE invoices.invoice_date > '1989-09-03' OR invoices.invoice_date<'2007-12-25'",
        "hyp_correct": false,
        "NL_query": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?",
        "index": 1704,
        "GT": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "DB": "tracking_orders",
        "tables": [
            "invoices"
        ]
    },
    {
        "SQL": "SELECT customers.customer_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY orders.customer_id HAVING COUNT( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "What are the names of the customers who have made two or less orders?",
        "index": 1708,
        "GT": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "DB": "tracking_orders",
        "tables": [
            "customers",
            "orders"
        ]
    },
    {
        "SQL": "SELECT singer.name , singer.country , singer.age FROM singer ORDER BY singer.age ASC",
        "hyp_correct": false,
        "NL_query": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "index": 1709,
        "GT": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "SELECT AVG( singer.age ) , MIN( singer.age ) , MAX( singer.age ) FROM singer WHERE singer.country = 'French'",
        "hyp_correct": false,
        "NL_query": "What is the average, minimum, and maximum age for all French singers?",
        "index": 1712,
        "GT": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "DB": "concert_singer",
        "tables": [
            "singer"
        ]
    },
    {
        "SQL": "SELECT MAX( stadium.capacity ) , AVG( stadium.average ) FROM stadium",
        "hyp_correct": false,
        "NL_query": "What is the maximum capacity and the average of all stadiums ?",
        "index": 1719,
        "GT": "select max(capacity), average from stadium",
        "DB": "concert_singer",
        "tables": [
            "stadium"
        ]
    },
    {
        "SQL": "SELECT AVG( stadium.average ) , MAX( stadium.capacity ) FROM stadium",
        "hyp_correct": false,
        "NL_query": "What is the average and maximum capacities for all stadiums ?",
        "index": 1720,
        "GT": "select avg(capacity) ,  max(capacity) from stadium",
        "DB": "concert_singer",
        "tables": [
            "stadium"
        ]
    },
    {
        "SQL": "SELECT stadium.stadium_id , COUNT( * ) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY concert.stadium_id",
        "hyp_correct": false,
        "NL_query": "For each stadium, how many concerts play there?",
        "index": 1726,
        "GT": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "SELECT concert.concert_name , concert.theme , COUNT( * ) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.theme",
        "hyp_correct": false,
        "NL_query": "What are the names , themes , and number of singers for every concert ?",
        "index": 1728,
        "GT": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "singer_in_concert"
        ]
    },
    {
        "SQL": "SELECT car_makers.fullname , COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.id",
        "hyp_correct": false,
        "NL_query": "What is the full name of each car maker, along with its id and how many models it produces?",
        "index": 1736,
        "GT": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker",
        "hyp_correct": false,
        "NL_query": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "index": 1737,
        "GT": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc hornet sportabout (sw'",
        "hyp_correct": false,
        "NL_query": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "index": 1739,
        "GT": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc hornet sportabout' AND car_names.make = 'sw'",
        "hyp_correct": false,
        "NL_query": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "index": 1740,
        "GT": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM car_makers WHERE car_makers.country = 'france'",
        "hyp_correct": false,
        "NL_query": "How many car makers are there in france?",
        "index": 1741,
        "GT": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN countries ON countries.countryid = countries.continent WHERE countries.countryname = 'France' AND countries.countryname = 'France'",
        "hyp_correct": false,
        "NL_query": "What is the number of makers of care in France?",
        "index": 1742,
        "GT": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list",
            "countries"
        ]
    },
    {
        "SQL": "SELECT MIN( cars_data.weight ) FROM cars_data WHERE cars_data.cylinders = 1974 AND cars_data.cylinders = 8",
        "hyp_correct": false,
        "NL_query": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "index": 1743,
        "GT": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT MIN( cars_data.weight ) FROM cars_data WHERE cars_data.cylinders = 1974 AND cars_data.cylinders = 8",
        "hyp_correct": false,
        "NL_query": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "index": 1744,
        "GT": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT car_makers.maker , model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker",
        "hyp_correct": false,
        "NL_query": "What are all the makers and models?",
        "index": 1745,
        "GT": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT car_makers.maker , model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker",
        "hyp_correct": false,
        "NL_query": "What are the makers and models?",
        "index": 1746,
        "GT": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1",
        "hyp_correct": false,
        "NL_query": "What are the countries having at least one car maker? List name and id.",
        "index": 1747,
        "GT": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "SELECT AVG( cars_data.edispl ) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'volvos'",
        "hyp_correct": false,
        "NL_query": "What is the average edispl for all volvos?",
        "index": 1752,
        "GT": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'American Motor Company'",
        "hyp_correct": false,
        "NL_query": "What is the number of car models created by the car maker American Motor Company?",
        "index": 1756,
        "GT": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list"
        ]
    },
    {
        "SQL": "SELECT countries.countryid FROM car_makers GROUP BY car_makers.country HAVING COUNT( car_makers.id ) >= 4",
        "hyp_correct": false,
        "NL_query": "How many countries has more than 2 car makers ?",
        "index": 1761,
        "GT": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "SELECT shop.name , COUNT( * ) FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.shop_id",
        "hyp_correct": false,
        "NL_query": "Find the number of employees hired in each shop; show the shop name as well.",
        "index": 1777,
        "GT": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "DB": "employee_hire_evaluation",
        "tables": [
            "hiring",
            "shop"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id",
        "hyp_correct": false,
        "NL_query": "For each shop, return the number of employees working there and the name of the shop.",
        "index": 1778,
        "GT": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "DB": "employee_hire_evaluation",
        "tables": [
            "hiring",
            "shop"
        ]
    },
    {
        "SQL": "SELECT DISTINCT tv_channel.series_name , tv_channel.content FROM tv_channel",
        "hyp_correct": false,
        "NL_query": "List the number of different series names and contents in the TV Channel table.",
        "index": 1783,
        "GT": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , tv_channel.content FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel GROUP BY tv_channel.content",
        "hyp_correct": false,
        "NL_query": "How many different series and contents are listed in the TV Channel table?",
        "index": 1784,
        "GT": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "DB": "tvshow",
        "tables": [
            "tv_series",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle'",
        "hyp_correct": false,
        "NL_query": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "index": 1787,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT tv_channel.series_name FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title = 'The Rise of the Blue Beetle'",
        "hyp_correct": false,
        "NL_query": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "index": 1788,
        "GT": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT MIN( tv_series.share ) , MAX( tv_series.share ) FROM tv_series",
        "hyp_correct": false,
        "NL_query": "What is minimum and maximum share of TV series?",
        "index": 1793,
        "GT": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "DB": "tvshow",
        "tables": [
            "tv_series"
        ]
    },
    {
        "SQL": "SELECT tv_channel.package_option , tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1",
        "hyp_correct": false,
        "NL_query": "Find the package choice and series name of the TV channel that has high definition TV.",
        "index": 1803,
        "GT": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT tv_channel.package_option , tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 'y'",
        "hyp_correct": false,
        "NL_query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "index": 1804,
        "GT": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT DISTINCT tv_channel.pixel_aspect_ratio_par , tv_channel.country FROM tv_channel WHERE tv_channel.language != 'English'",
        "hyp_correct": false,
        "NL_query": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "index": 1807,
        "GT": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "DB": "tvshow",
        "tables": [
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT album.title , album.albumid FROM album JOIN track ON album.albumid = track.albumid WHERE track.unitprice > 1",
        "hyp_correct": false,
        "NL_query": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "index": 1815,
        "GT": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "SELECT album.title , album.albumid FROM album JOIN track ON album.albumid = track.albumid WHERE track.unitprice > 1",
        "hyp_correct": false,
        "NL_query": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "index": 1816,
        "GT": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "DB": "chinook_1",
        "tables": [
            "track",
            "album"
        ]
    },
    {
        "SQL": "SELECT customer.lastname FROM customer JOIN invoice ON customer.customerid = invoice.customerid WHERE invoice.total > 20",
        "hyp_correct": false,
        "NL_query": "What are the last names of customers without invoice totals exceeding 20?",
        "index": 1818,
        "GT": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "DB": "chinook_1",
        "tables": [
            "invoice",
            "customer"
        ]
    },
    {
        "SQL": "SELECT AVG( track.name ) FROM genre JOIN track ON genre.genreid = track.genreid WHERE genre.name = 'Pop'",
        "hyp_correct": false,
        "NL_query": "Find the average millisecond length of Latin and Pop tracks.",
        "index": 1820,
        "GT": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "DB": "chinook_1",
        "tables": [
            "genre",
            "track"
        ]
    },
    {
        "SQL": "SELECT artist.name , album.artistid FROM album JOIN artist ON album.artistid = artist.artistid GROUP BY album.artistid HAVING COUNT( * ) >= 3",
        "hyp_correct": false,
        "NL_query": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "index": 1821,
        "GT": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "DB": "chinook_1",
        "tables": [
            "album",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.name , album.artistid FROM album JOIN artist ON album.artistid = artist.artistid HAVING COUNT( * ) >= 3 EXCEPT SELECT artist.name , album.artistid FROM album JOIN artist ON album.artistid = artist.artistid HAVING COUNT( * ) >= 3",
        "hyp_correct": false,
        "NL_query": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "index": 1822,
        "GT": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "DB": "chinook_1",
        "tables": [
            "album",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.name FROM artist WHERE artist.artistid NOT IN (SELECT album.artistid FROM album)",
        "hyp_correct": false,
        "NL_query": "Find the names of artists that do not have any albums.",
        "index": 1823,
        "GT": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "DB": "chinook_1",
        "tables": [
            "album",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.name FROM artist WHERE artist.artistid NOT IN (SELECT album.artistid FROM album)",
        "hyp_correct": false,
        "NL_query": "What are the names of artists who have not released any albums?",
        "index": 1824,
        "GT": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "DB": "chinook_1",
        "tables": [
            "album",
            "artist"
        ]
    },
    {
        "SQL": "SELECT medicine.id , medicine.name , COUNT( * ) FROM medicine_enzyme_interaction JOIN medicine ON medicine_enzyme_interaction.medicine_id = medicine.id GROUP BY medicine.id ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "index": 1827,
        "GT": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT medicine.id , medicine.name , COUNT( * ) FROM medicine_enzyme_interaction JOIN medicine ON medicine_enzyme_interaction.medicine_id = medicine.id GROUP BY medicine.id ORDER BY COUNT( * ) DESC",
        "hyp_correct": false,
        "NL_query": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "index": 1828,
        "GT": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "DB": "medicine_enzyme_interaction",
        "tables": [
            "medicine_enzyme_interaction",
            "medicine"
        ]
    },
    {
        "SQL": "SELECT university.founded FROM university WHERE university.affiliation != 'public' ORDER BY university.founded ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the founded year of the newest non public school.",
        "index": 1833,
        "GT": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT university.founded FROM university WHERE university.founded > (SELECT MAX( university.founded ) FROM university WHERE university.affiliation != 'public')",
        "hyp_correct": false,
        "NL_query": "What is the founded year of the non public school that was founded most recently?",
        "index": 1834,
        "GT": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "DB": "university_basketball",
        "tables": [
            "university"
        ]
    },
    {
        "SQL": "SELECT player.player_api_id FROM player JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_api_id WHERE player.height >= 180 AND player_attributes.overall_rating > 85",
        "hyp_correct": false,
        "NL_query": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "index": 1839,
        "GT": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "SELECT player_attributes.overall_rating FROM player_attributes ORDER BY player_attributes.overall_rating DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "Who are the top 3 players in terms of overall rating?",
        "index": 1840,
        "GT": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "SELECT player.player_name , player.birthday FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 5",
        "hyp_correct": false,
        "NL_query": "List the names and birthdays of the top five players in terms of potential.",
        "index": 1841,
        "GT": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "DB": "soccer_1",
        "tables": [
            "player",
            "player_attributes"
        ]
    },
    {
        "SQL": "SELECT people.name FROM debate_people JOIN people ON debate_people.affirmative = people.people_id",
        "hyp_correct": false,
        "NL_query": "List the names of people that have not been on the affirmative side of debates.",
        "index": 1851,
        "GT": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "DB": "debate",
        "tables": [
            "people",
            "debate_people"
        ]
    },
    {
        "SQL": "SELECT customers.customer_details FROM customers WHERE customers.customer_id NOT IN (SELECT policies.customer_id FROM policies)",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who do not have any policies?",
        "index": 1855,
        "GT": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "DB": "insurance_and_eClaims",
        "tables": [
            "customers",
            "policies"
        ]
    },
    {
        "SQL": "SELECT DISTINCT customers.customer_details FROM policies JOIN customers ON policies.customer_id = customers.customer_id WHERE policies.policy_type_code = 'deputy' OR policies.policy_type_code = 'uniformed'",
        "hyp_correct": false,
        "NL_query": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "index": 1856,
        "GT": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "DB": "insurance_and_eClaims",
        "tables": [
            "policies",
            "customers"
        ]
    },
    {
        "SQL": "SELECT products.product_color FROM products WHERE products.product_id NOT IN (SELECT order_items.product_id FROM order_items)",
        "hyp_correct": false,
        "NL_query": "Show all product names without an order.",
        "index": 1866,
        "GT": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "DB": "customers_and_invoices",
        "tables": [
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "SELECT products.parent_product_id FROM products WHERE products.product_id NOT IN (SELECT order_items.product_id FROM order_items)",
        "hyp_correct": false,
        "NL_query": "What are the names of products that have never been ordered?",
        "index": 1867,
        "GT": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "DB": "customers_and_invoices",
        "tables": [
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "SELECT products.product_color , COUNT( * ) FROM order_items JOIN products ON order_items.product_id = products.product_id JOIN order_items ON orders.order_id = order_items.order_id GROUP BY order_items.product_id",
        "hyp_correct": false,
        "NL_query": "Show all product names and the number of customers having an order on each product.",
        "index": 1868,
        "GT": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "DB": "customers_and_invoices",
        "tables": [
            "orders",
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "SELECT products.product_color , COUNT( * ) FROM order_items JOIN products ON order_items.product_id = products.product_id GROUP BY order_items.product_id",
        "hyp_correct": false,
        "NL_query": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "index": 1869,
        "GT": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "DB": "customers_and_invoices",
        "tables": [
            "orders",
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "SELECT checking.balance , savings.balance FROM accounts JOIN checking ON accounts.custid = checking.custid WHERE accounts.name = 'Brown\u2019s'",
        "hyp_correct": false,
        "NL_query": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "index": 1874,
        "GT": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT checking.balance , savings.balance FROM accounts JOIN checking ON accounts.custid = checking.custid WHERE accounts.name = 'Brown'",
        "hyp_correct": false,
        "NL_query": "What are the checking and savings balances in accounts belonging to Brown?",
        "index": 1875,
        "GT": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT accounts.name FROM accounts, checking, savings WHERE accounts.name = (SELECT accounts.name , checking.balance , savings.balance , SUM( savings.balance ) FROM accounts JOIN checking ON accounts.custid = checking.custid JOIN savings ON checking.balance = savings.custid)",
        "hyp_correct": false,
        "NL_query": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "index": 1876,
        "GT": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT checking.balance , checking.balance , accounts.name , SUM( savings.balance ) FROM accounts JOIN checking ON accounts.custid = checking.custid JOIN savings ON accounts.custid = savings.custid ORDER BY checking.balance , accounts.name ASC",
        "hyp_correct": false,
        "NL_query": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "index": 1877,
        "GT": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT accounts.name , savings.balance FROM accounts JOIN savings ON accounts.custid = savings.custid JOIN accounts ON accounts.custid = savings.custid WHERE savings.balance<savings.balance GROUP BY accounts.name",
        "hyp_correct": false,
        "NL_query": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "index": 1880,
        "GT": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT SUM( checking.balance ) , accounts.name FROM accounts JOIN savings ON accounts.custid = savings.custid WHERE savings.balance<savings.balance GROUP BY accounts.name",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "index": 1881,
        "GT": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "DB": "small_bank_1",
        "tables": [
            "checking",
            "savings",
            "accounts"
        ]
    },
    {
        "SQL": "SELECT endowment.donator_name FROM endowment WHERE endowment.amount<9",
        "hyp_correct": false,
        "NL_query": "Show the names of all the donors except those whose donation amount less than 9.",
        "index": 1886,
        "GT": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "DB": "school_finance",
        "tables": [
            "endowment"
        ]
    },
    {
        "SQL": "SELECT building.name FROM building JOIN institution ON building.building_id = institution.building_id WHERE institution.founded = 2003 EXCEPT SELECT building.name FROM building JOIN institution ON building.building_id = institution.building_id WHERE institution.founded = 2003",
        "hyp_correct": false,
        "NL_query": "Show the names of buildings except for those having an institution founded in 2003.",
        "index": 1890,
        "GT": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003",
        "DB": "protein_institute",
        "tables": [
            "building",
            "institution"
        ]
    },
    {
        "SQL": "SELECT payments.customer_id , MAX( payments.amount_paid ) FROM payments GROUP BY payments.customer_id",
        "hyp_correct": false,
        "NL_query": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "index": 1894,
        "GT": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "DB": "products_for_hire",
        "tables": [
            "payments"
        ]
    },
    {
        "SQL": "SELECT draft_copies.document_id , COUNT( * ) FROM draft_copies GROUP BY draft_copies.document_id ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which document has the most draft copies? List its document id and number of draft copies.",
        "index": 1901,
        "GT": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "draft_copies"
        ]
    },
    {
        "SQL": "SELECT employees.employee_name FROM employees WHERE employees.employee_id NOT IN (SELECT circulation_history.employee_id FROM circulation_history)",
        "hyp_correct": false,
        "NL_query": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "index": 1902,
        "GT": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "DB": "cre_Doc_Control_Systems",
        "tables": [
            "employees",
            "circulation_history"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id WHERE participants.participant_details LIKE '%Dr%'",
        "hyp_correct": false,
        "NL_query": "How many events had participants whose details had the substring 'Dr.'",
        "index": 1903,
        "GT": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "DB": "local_govt_in_alabama",
        "tables": [
            "participants_in_events",
            "participants"
        ]
    },
    {
        "SQL": "SELECT perpetrator.country FROM perpetrator GROUP BY perpetrator.country ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the country that has the most perpetrators?",
        "index": 1921,
        "GT": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "DB": "perpetrator",
        "tables": [
            "perpetrator"
        ]
    },
    {
        "SQL": "SELECT journalist.name , event.name FROM news_report JOIN event ON news_report.event_id = event.event_id JOIN journalist ON news_report.journalist_id = journalist.journalist_id ORDER BY event.name ASC",
        "hyp_correct": false,
        "NL_query": "Show the names of journalists and the names of the events they reported in ascending order",
        "index": 1945,
        "GT": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
        "DB": "news_report",
        "tables": [
            "journalist",
            "event",
            "news_report"
        ]
    },
    {
        "SQL": "SELECT DISTINCT customer.cust_name FROM customer JOIN loan ON customer.cust_id = loan.cust_id ORDER BY loan.amount ASC",
        "hyp_correct": false,
        "NL_query": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "index": 1950,
        "GT": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "DB": "loan_1",
        "tables": [
            "loan",
            "customer"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer WHERE customer.acc_type = 'checking' INTERSECT SELECT customer.cust_name FROM customer WHERE customer.acc_type = 'checking'",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who have both savings and checking accounts?",
        "index": 1952,
        "GT": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "DB": "loan_1",
        "tables": [
            "customer"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer EXCEPT SELECT customer.cust_name FROM customer JOIN loan ON customer.cust_id = loan.cust_id WHERE loan.loan_type != 'Mortgages'",
        "hyp_correct": false,
        "NL_query": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "index": 1955,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "DB": "loan_1",
        "tables": [
            "loan",
            "customer"
        ]
    },
    {
        "SQL": "SELECT customer.cust_name FROM customer EXCEPT SELECT customer.cust_name FROM customer JOIN loan ON customer.cust_id = loan.cust_id WHERE loan.loan_type = 'Mortage'",
        "hyp_correct": false,
        "NL_query": "What are the names of customers who have not taken a Mortage loan?",
        "index": 1956,
        "GT": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "DB": "loan_1",
        "tables": [
            "loan",
            "customer"
        ]
    },
    {
        "SQL": "SELECT bank.bname FROM customer JOIN bank ON customer.branch_id = bank.branch_id WHERE customer.credit_score<100",
        "hyp_correct": false,
        "NL_query": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "index": 1961,
        "GT": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "DB": "loan_1",
        "tables": [
            "loan",
            "bank",
            "customer"
        ]
    },
    {
        "SQL": "SELECT bank.bname FROM customer JOIN bank ON customer.branch_id = bank.branch_id WHERE customer.credit_score<100",
        "hyp_correct": false,
        "NL_query": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "index": 1962,
        "GT": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "DB": "loan_1",
        "tables": [
            "loan",
            "bank",
            "customer"
        ]
    },
    {
        "SQL": "SELECT AVG( customer.credit_score ) FROM customer JOIN loan ON customer.cust_id = loan.cust_id",
        "hyp_correct": false,
        "NL_query": "Find the average credit score of the customers who have some loan.",
        "index": 1963,
        "GT": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "DB": "loan_1",
        "tables": [
            "loan",
            "customer"
        ]
    },
    {
        "SQL": "SELECT AVG( customer.credit_score ) FROM customer JOIN loan ON customer.cust_id = loan.cust_id",
        "hyp_correct": false,
        "NL_query": "What is the average credit score for customers who have taken a loan?",
        "index": 1964,
        "GT": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "DB": "loan_1",
        "tables": [
            "loan",
            "customer"
        ]
    },
    {
        "SQL": "SELECT train.name , train.time FROM route JOIN train ON route.train_id = train.id JOIN route ON station.id = route.station_id WHERE station.local_authority = 'Chiltern'",
        "hyp_correct": false,
        "NL_query": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "index": 1968,
        "GT": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"",
        "DB": "station_weather",
        "tables": [
            "route",
            "station",
            "train"
        ]
    },
    {
        "SQL": "SELECT player.position FROM player WHERE player.points > 20 20 INTERSECT SELECT player.position FROM player WHERE player.points<10",
        "hyp_correct": false,
        "NL_query": "What are the positions of both players that have more than 20 20 points and less than 10 points?",
        "index": 1974,
        "GT": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10",
        "DB": "sports_competition",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT competition.country FROM competition WHERE competition.competition_type = 'friendly' INTERSECT SELECT competition.country FROM competition WHERE competition.competition_type = 'tournament'",
        "hyp_correct": false,
        "NL_query": "What are the countries that participated in both friendly and tournament type competitions?",
        "index": 1978,
        "GT": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "SELECT competition.country FROM competition EXCEPT SELECT competition.country FROM competition WHERE competition.competition_type = 'friendly'",
        "hyp_correct": false,
        "NL_query": "What are the countries that have never participated in any friendly-type competitions?",
        "index": 1980,
        "GT": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
        "DB": "sports_competition",
        "tables": [
            "competition"
        ]
    },
    {
        "SQL": "SELECT artist.country , artist.artist_name FROM artist , song ORDER BY song.rating DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "index": 1984,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'UK' AND song.languages = 'English'",
        "hyp_correct": false,
        "NL_query": "Find the names of the artists who are from UK and have produced English songs.",
        "index": 1987,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'UK' AND song.languages = 'English'",
        "hyp_correct": false,
        "NL_query": "What are the names of the artists that are from the UK and sang songs in English?",
        "index": 1988,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT DISTINCT song.song_name FROM song WHERE song.resolution > (SELECT MIN( song.resolution ) FROM song WHERE song.languages = 'English')",
        "hyp_correct": false,
        "NL_query": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "index": 1993,
        "GT": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT DISTINCT song.song_name FROM song WHERE song.resolution > (SELECT MIN( song.resolution ) FROM song WHERE song.languages = 'English')",
        "hyp_correct": false,
        "NL_query": "What are the different names for all songs that have a higher resolution than English songs?",
        "index": 1994,
        "GT": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name , artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.song_name = 'love'",
        "hyp_correct": false,
        "NL_query": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "index": 1997,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.song_name LIKE '%love%'",
        "hyp_correct": false,
        "NL_query": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "index": 1998,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT DISTINCT artist.artist_name , artist.gender FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.releasedate = 'March'",
        "hyp_correct": false,
        "NL_query": "List the name and gender for all artists who released songs in March.",
        "index": 1999,
        "GT": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist GROUP BY song.releasedate ORDER BY song.releasedate ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the names and genders of all artists who released songs in the month of March?",
        "index": 2000,
        "GT": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT song.f_id FROM files WHERE files.formats = 'mp4' OR song.resolution > 720",
        "hyp_correct": false,
        "NL_query": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "index": 2001,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "DB": "music_1",
        "tables": [
            "files",
            "song"
        ]
    },
    {
        "SQL": "SELECT song.f_id FROM files WHERE files.formats = 'mp4' OR song.resolution > 720",
        "hyp_correct": false,
        "NL_query": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "index": 2002,
        "GT": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "DB": "music_1",
        "tables": [
            "files",
            "song"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'UK' AND song.languages = 'English'",
        "hyp_correct": false,
        "NL_query": "Return the names of singers who are from UK and released an English song.",
        "index": 2005,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'UK' AND song.languages = 'English'",
        "hyp_correct": false,
        "NL_query": "What are the names of all singers that are from the UK and released a song in English?",
        "index": 2006,
        "GT": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT MAX( song.resolution ) , MIN( song.resolution ) FROM files JOIN song ON files.f_id = song.f_id WHERE files.duration = 3",
        "hyp_correct": false,
        "NL_query": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "index": 2007,
        "GT": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "DB": "music_1",
        "tables": [
            "files",
            "song"
        ]
    },
    {
        "SQL": "SELECT MAX( song.resolution ) , MIN( song.resolution ) FROM files JOIN song ON files.f_id = song.f_id WHERE files.duration = 3",
        "hyp_correct": false,
        "NL_query": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
        "index": 2008,
        "GT": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "DB": "music_1",
        "tables": [
            "files",
            "song"
        ]
    },
    {
        "SQL": "SELECT MAX( files.duration ) , AVG( song.resolution ) FROM files JOIN song ON files.f_id = song.f_id ORDER BY song.languages ASC",
        "hyp_correct": false,
        "NL_query": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "index": 2009,
        "GT": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "DB": "music_1",
        "tables": [
            "files",
            "song"
        ]
    },
    {
        "SQL": "SELECT MAX( files.duration ) , AVG( song.resolution ) FROM files JOIN song ON files.f_id = song.f_id ORDER BY song.languages ASC",
        "hyp_correct": false,
        "NL_query": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?",
        "index": 2010,
        "GT": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "DB": "music_1",
        "tables": [
            "files",
            "song"
        ]
    },
    {
        "SQL": "SELECT genre.g_name , genre.rating , MIN( genre.rating ) FROM files JOIN song ON files.f_id = song.f_id GROUP BY genre.g_name",
        "hyp_correct": false,
        "NL_query": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "index": 2011,
        "GT": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "DB": "music_1",
        "tables": [
            "files",
            "song"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages = 'English' GROUP BY artist.artist_name",
        "hyp_correct": false,
        "NL_query": "Find the names and number of works of all artists who have at least one English songs.",
        "index": 2013,
        "GT": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT song.artist_name , COUNT( * ) FROM song WHERE song.languages = 'English' GROUP BY artist.artist_name",
        "hyp_correct": false,
        "NL_query": "What are the names and number of works for all artists who have sung at least one song in English?",
        "index": 2014,
        "GT": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT DISTINCT artist.artist_name , artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.resolution > 900",
        "hyp_correct": false,
        "NL_query": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "index": 2015,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT DISTINCT artist.artist_name , artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.resolution > 900",
        "hyp_correct": false,
        "NL_query": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
        "index": 2016,
        "GT": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.rating<(SELECT MIN( song.rating ) FROM song WHERE song.languages = 'English')",
        "hyp_correct": false,
        "NL_query": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "index": 2017,
        "GT": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.song_name FROM song WHERE song.rating<(SELECT MIN( song.rating ) FROM song WHERE song.languages = 'English')",
        "hyp_correct": false,
        "NL_query": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "index": 2018,
        "GT": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM song WHERE song.languages = 'English' EXCEPT SELECT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages = 'English' AND song.rating > 8",
        "hyp_correct": false,
        "NL_query": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "index": 2025,
        "GT": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT song.artist_name FROM song WHERE song.languages = 'English' EXCEPT SELECT song.artist_name FROM song WHERE song.languages = 'English' AND song.rating > '8'",
        "hyp_correct": false,
        "NL_query": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "index": 2026,
        "GT": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "DB": "music_1",
        "tables": [
            "song"
        ]
    },
    {
        "SQL": "SELECT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'Bangladesh' AND song.rating > 7",
        "hyp_correct": false,
        "NL_query": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "index": 2027,
        "GT": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT DISTINCT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'Bangladesh' AND song.rating > 7",
        "hyp_correct": false,
        "NL_query": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
        "index": 2028,
        "GT": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "DB": "music_1",
        "tables": [
            "song",
            "artist"
        ]
    },
    {
        "SQL": "SELECT player.birth_city FROM player GROUP BY player.birth_city ORDER BY COUNT( * ) ASC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "List three countries which are the origins of the least players.",
        "index": 2029,
        "GT": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
        "DB": "baseball_1",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT player.birth_city , COUNT( * ) FROM player GROUP BY player.bats",
        "hyp_correct": false,
        "NL_query": "What are the three countries that the least players are from?",
        "index": 2030,
        "GT": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
        "DB": "baseball_1",
        "tables": [
            "player"
        ]
    },
    {
        "SQL": "SELECT college.country FROM college WHERE college.city = 'Yale University'",
        "hyp_correct": false,
        "NL_query": "What is the average height of the players from the college named 'Yale University'?",
        "index": 2031,
        "GT": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
        "DB": "baseball_1",
        "tables": [
            "player_college",
            "player",
            "college"
        ]
    },
    {
        "SQL": "SELECT college.country FROM college WHERE college.city = 'Yale University'",
        "hyp_correct": false,
        "NL_query": "Find the average height of the players who belong to the college called 'Yale University'.",
        "index": 2032,
        "GT": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
        "DB": "baseball_1",
        "tables": [
            "player_college",
            "player",
            "college"
        ]
    },
    {
        "SQL": "SELECT team.year , COUNT( * ) FROM postseason JOIN team ON postseason.team_id_loser = team.year WHERE team.name = 'Boston Red Stockings'",
        "hyp_correct": false,
        "NL_query": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.",
        "index": 2034,
        "GT": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
        "DB": "baseball_1",
        "tables": [
            "postseason",
            "team"
        ]
    },
    {
        "SQL": "SELECT park.city FROM college WHERE college.city = 2001",
        "hyp_correct": false,
        "NL_query": "List the 3 highest salaries of the players in 2001?",
        "index": 2035,
        "GT": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
        "DB": "baseball_1",
        "tables": [
            "salary",
            "college"
        ]
    },
    {
        "SQL": "SELECT SUM( salary.salary ) FROM salary WHERE salary.year = 2001 ORDER BY salary.salary DESC LIMIT 3",
        "hyp_correct": false,
        "NL_query": "How much salary did the top 3 well-paid players get in 2001?",
        "index": 2036,
        "GT": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
        "DB": "baseball_1",
        "tables": [
            "salary"
        ]
    },
    {
        "SQL": "SELECT SUM( salary.salary ) FROM salary WHERE salary.year = 2010 AND salary.year = 2001",
        "hyp_correct": false,
        "NL_query": "What were all the salary values of players in 2010 and 2001?",
        "index": 2037,
        "GT": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
        "DB": "baseball_1",
        "tables": [
            "salary"
        ]
    },
    {
        "SQL": "SELECT SUM( salary.salary ) FROM salary WHERE salary.year = 2001 AND salary.salary <= 2010",
        "hyp_correct": false,
        "NL_query": "List all the salary values players received in 2010 and 2001.",
        "index": 2038,
        "GT": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
        "DB": "baseball_1",
        "tables": [
            "salary"
        ]
    },
    {
        "SQL": "SELECT hall_of_fame.inducted FROM hall_of_fame GROUP BY hall_of_fame.inducted ORDER BY COUNT( * ) ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "In which year did the least people enter hall of fame?",
        "index": 2039,
        "GT": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
        "DB": "baseball_1",
        "tables": [
            "hall_of_fame"
        ]
    },
    {
        "SQL": "SELECT hall_of_fame.ballots FROM hall_of_fame GROUP BY hall_of_fame.ballots ORDER BY COUNT( * ) ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the year in which the least people enter hall of fame.",
        "index": 2040,
        "GT": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
        "DB": "baseball_1",
        "tables": [
            "hall_of_fame"
        ]
    },
    {
        "SQL": "SELECT photos.name FROM photos JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE camera_lens.brand = 'Sigma' OR camera_lens.brand = 'Olympus'",
        "hyp_correct": false,
        "NL_query": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
        "index": 2041,
        "GT": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'",
        "DB": "mountain_photos",
        "tables": [
            "camera_lens",
            "photos"
        ]
    },
    {
        "SQL": "SELECT camera_lens.name , COUNT( * ) FROM photos JOIN camera_lens ON photos.camera_lens_id = camera_lens.id GROUP BY photos.camera_lens_id",
        "hyp_correct": false,
        "NL_query": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "index": 2042,
        "GT": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "DB": "mountain_photos",
        "tables": [
            "camera_lens",
            "photos"
        ]
    },
    {
        "SQL": "SELECT program.name FROM program JOIN broadcast ON program.program_id = broadcast.program_id WHERE broadcast.time_of_day = 'morning'",
        "hyp_correct": false,
        "NL_query": "Find the names of programs that are never broadcasted in the morning.",
        "index": 2043,
        "GT": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "DB": "program_share",
        "tables": [
            "program",
            "broadcast"
        ]
    },
    {
        "SQL": "SELECT program.name FROM program JOIN broadcast ON program.program_id = broadcast.program_id WHERE broadcast.time_of_day = 'morning'",
        "hyp_correct": false,
        "NL_query": "Which programs are never broadcasted in the morning? Give me the names of the programs.",
        "index": 2044,
        "GT": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "DB": "program_share",
        "tables": [
            "program",
            "broadcast"
        ]
    },
    {
        "SQL": "SELECT department.name FROM department GROUP BY department.name ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which department has the largest number of employees?",
        "index": 2045,
        "GT": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
        "DB": "hospital_1",
        "tables": [
            "department"
        ]
    },
    {
        "SQL": "SELECT physician.name FROM physician WHERE physician.employeeid NOT IN (SELECT appointment.physician FROM appointment)",
        "hyp_correct": false,
        "NL_query": "List the name of physicians who never took any appointment.",
        "index": 2049,
        "GT": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "appointment"
        ]
    },
    {
        "SQL": "SELECT physician.name FROM physician WHERE physician.employeeid NOT IN (SELECT appointment.physician FROM appointment)",
        "hyp_correct": false,
        "NL_query": "Which physicians have never taken any appointment? Find their names.",
        "index": 2050,
        "GT": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "appointment"
        ]
    },
    {
        "SQL": "SELECT physician.name , affiliated_with.department FROM affiliated_with JOIN physician ON affiliated_with.physician = physician.employeeid WHERE affiliated_with.primaryaffiliation = 1",
        "hyp_correct": false,
        "NL_query": "Find the names of all physicians and their primary affiliated departments' names.",
        "index": 2051,
        "GT": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "affiliated_with",
            "department"
        ]
    },
    {
        "SQL": "SELECT physician.name , affiliated_with.department FROM affiliated_with JOIN physician ON affiliated_with.physician = physician.employeeid WHERE affiliated_with.primaryaffiliation = 1",
        "hyp_correct": false,
        "NL_query": "What are the name and primarily affiliated department name of each physician?",
        "index": 2052,
        "GT": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "affiliated_with",
            "department"
        ]
    },
    {
        "SQL": "SELECT patient.name FROM appointment JOIN patient ON appointment.patient = patient.ssn ORDER BY appointment.appointmentid ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the patient who made the most recent appointment?",
        "index": 2053,
        "GT": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "DB": "hospital_1",
        "tables": [
            "patient",
            "appointment"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM physician JOIN prescribes ON physician.employeeid = prescribes.physician WHERE physician.name = 'John Dorian'",
        "hyp_correct": false,
        "NL_query": "How many patients' prescriptions are made by physician John Dorian?",
        "index": 2055,
        "GT": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "patient",
            "physician"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM physician JOIN prescribes ON physician.employeeid = prescribes.physician WHERE physician.name = 'John'",
        "hyp_correct": false,
        "NL_query": "Find the number of patients' prescriptions physician John Dorian made.",
        "index": 2056,
        "GT": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "patient",
            "physician"
        ]
    },
    {
        "SQL": "SELECT physician.name FROM prescribes JOIN medication ON prescribes.medication = medication.code JOIN prescribes ON physician.employeeid = prescribes.physician WHERE medication.name = 'Thesisin'",
        "hyp_correct": false,
        "NL_query": "What is the names of the physicians who prescribe medication Thesisin?",
        "index": 2059,
        "GT": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "medication",
            "physician"
        ]
    },
    {
        "SQL": "SELECT physician.name FROM physician JOIN prescribes ON physician.employeeid = prescribes.physician WHERE medication.name = 'Thesisin'",
        "hyp_correct": false,
        "NL_query": "List the names of all the physicians who prescribe Thesisin as medication.",
        "index": 2060,
        "GT": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "medication",
            "physician"
        ]
    },
    {
        "SQL": "SELECT physician.name , physician.position FROM physician JOIN prescribes ON physician.employeeid = prescribes.physician WHERE medication.brand = 'X'",
        "hyp_correct": false,
        "NL_query": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "index": 2061,
        "GT": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "medication",
            "physician"
        ]
    },
    {
        "SQL": "SELECT AVG( procedures.cost ) FROM procedures JOIN trained_in ON procedures.code = trained_in.treatment JOIN procedures ON procedures.code = trained_in.physician WHERE physician.name = 'John Wen'",
        "hyp_correct": false,
        "NL_query": "What is the average cost of procedures that physician John Wen was trained in?",
        "index": 2069,
        "GT": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "SELECT AVG( procedures.cost ) FROM procedures JOIN trained_in ON procedures.code = trained_in.physician JOIN procedures ON procedures.code = trained_in.physician WHERE physician.name = 'John Wen'",
        "hyp_correct": false,
        "NL_query": "Compute the mean price of procedures physician John Wen was trained in.",
        "index": 2070,
        "GT": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "SELECT procedures.name FROM procedures JOIN trained_in ON procedures.code = trained_in.physician JOIN physician ON trained_in.physician = physician.employeeid WHERE physician.name = 'John Wen' OR procedures.cost > 1000",
        "hyp_correct": false,
        "NL_query": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "index": 2073,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "SELECT procedures.name FROM trained_in JOIN physician ON trained_in.treatment = physician.employeeid JOIN trained_in ON physician.employeeid = trained_in.physician WHERE physician.name = 'John Wen' OR procedures.cost > 1000",
        "hyp_correct": false,
        "NL_query": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
        "index": 2074,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "trained_in",
            "procedures"
        ]
    },
    {
        "SQL": "SELECT procedures.name FROM procedures JOIN trained_in ON procedures.code = trained_in.treatment JOIN physician ON physician.employeeid = trained_in.physician WHERE physician.name = 'John Wen' AND procedures.cost > 1000",
        "hyp_correct": false,
        "NL_query": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "index": 2075,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "SELECT procedures.name FROM procedures JOIN trained_in ON procedures.code = trained_in.treatment JOIN physician ON trained_in.physician = physician.employeeid JOIN procedures ON procedures.code = trained_in.treatment JOIN physician ON physician.employeeid = trained_in.physician WHERE physician.name != 'John Wen' AND procedures.cost > 1000",
        "hyp_correct": false,
        "NL_query": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
        "index": 2076,
        "GT": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "SELECT procedures.name FROM procedures JOIN trained_in ON procedures.code = trained_in.treatment JOIN physician ON trained_in.physician = physician.employeeid WHERE physician.name = 'John Wen' AND procedures.cost<5000",
        "hyp_correct": false,
        "NL_query": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
        "index": 2077,
        "GT": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "trained_in",
            "procedures",
            "physician"
        ]
    },
    {
        "SQL": "SELECT procedures.name FROM trained_in JOIN physician ON trained_in.physician = physician.employeeid WHERE procedures.cost<5000 AND physician.name = 'John Wen' AND procedures.cost<5000",
        "hyp_correct": false,
        "NL_query": "What procedures cost less than 5000 and have John Wen as a trained physician?",
        "index": 2078,
        "GT": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "DB": "hospital_1",
        "tables": [
            "physician",
            "trained_in",
            "procedures"
        ]
    },
    {
        "SQL": "SELECT patient.name FROM patient",
        "hyp_correct": false,
        "NL_query": "Find the names of patients who are not using the medication of Procrastin-X.",
        "index": 2079,
        "GT": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "patient",
            "medication"
        ]
    },
    {
        "SQL": "SELECT patient.name FROM patient",
        "hyp_correct": false,
        "NL_query": "What are the names of patients who are not taking the medication of Procrastin-X.",
        "index": 2080,
        "GT": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "DB": "hospital_1",
        "tables": [
            "prescribes",
            "patient",
            "medication"
        ]
    },
    {
        "SQL": "SELECT company.headquarters FROM company WHERE company.industry = 'banking' INTERSECT SELECT company.headquarters FROM company WHERE company.industry = 'oil and gas'",
        "hyp_correct": false,
        "NL_query": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "index": 2088,
        "GT": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"",
        "DB": "company_employee",
        "tables": [
            "company"
        ]
    },
    {
        "SQL": "SELECT company.name , people.name FROM employment JOIN people ON employment.people_id = people.people_id JOIN company ON employment.company_id = company.company_id ORDER BY employment.year_working DESC",
        "hyp_correct": false,
        "NL_query": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "index": 2089,
        "GT": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "DB": "company_employee",
        "tables": [
            "people",
            "company",
            "employment"
        ]
    },
    {
        "SQL": "SELECT film_market_estimation.year FROM film_market_estimation JOIN market ON film_market_estimation.market_id = market.market_id WHERE market.country = 'Japan'",
        "hyp_correct": false,
        "NL_query": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "index": 2093,
        "GT": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC",
        "DB": "film_rank",
        "tables": [
            "market",
            "film_market_estimation"
        ]
    },
    {
        "SQL": "SELECT film_market_estimation.year FROM film_market_estimation JOIN market ON film_market_estimation.market_id = market.market_id WHERE market.country = 'Japan'",
        "hyp_correct": false,
        "NL_query": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
        "index": 2094,
        "GT": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC",
        "DB": "film_rank",
        "tables": [
            "market",
            "film_market_estimation"
        ]
    },
    {
        "SQL": "SELECT film.studio FROM film EXCEPT SELECT film.studio FROM film WHERE film.director != 'Walter Hill'",
        "hyp_correct": false,
        "NL_query": "Show the studios that have not produced films with director \"Walter Hill\".",
        "index": 2101,
        "GT": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "DB": "film_rank",
        "tables": [
            "film"
        ]
    },
    {
        "SQL": "SELECT student.fname , student.lname FROM student JOIN member_of_club ON student.stuid = member_of_club.stuid JOIN club ON club.clubid = member_of_club.clubid WHERE club.clubname = 'Bootup Baltimore' AND student.sex = 'f'",
        "hyp_correct": false,
        "NL_query": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "index": 2117,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT DISTINCT student.fname , student.lname FROM student JOIN member_of_club ON student.stuid = member_of_club.stuid JOIN club ON club.clubid = member_of_club.clubid WHERE club.clubname = 'Bootup Baltimore' AND student.sex = 'f'",
        "hyp_correct": false,
        "NL_query": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".",
        "index": 2118,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT DISTINCT student.fname , student.lname FROM club JOIN member_of_club ON club.clubid = member_of_club.clubid JOIN student ON student.stuid = member_of_club.stuid WHERE club.clubname = 'Bootup Baltimore' AND member_of_club.position = 'president'",
        "hyp_correct": false,
        "NL_query": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "index": 2123,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT student.fname , student.lname FROM club JOIN member_of_club ON club.clubid = member_of_club.clubid WHERE club.clubname = 'Bootup Baltimore'",
        "hyp_correct": false,
        "NL_query": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.",
        "index": 2124,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT student.fname , student.lname FROM club JOIN member_of_club ON club.clubid = member_of_club.clubid JOIN student ON member_of_club.stuid = student.stuid WHERE club.clubdesc = 'CTO' AND club.clubname = 'Hopkins Student Enterprises'",
        "hyp_correct": false,
        "NL_query": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?",
        "index": 2126,
        "GT": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM student JOIN member_of_club ON student.stuid = member_of_club.stuid JOIN club ON member_of_club.clubid = club.clubid WHERE student.fname = 'Eric Tai'",
        "hyp_correct": false,
        "NL_query": "How many clubs does the student named \"Eric Tai\" belong to?",
        "index": 2135,
        "GT": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "DB": "club_1",
        "tables": [
            "student",
            "member_of_club",
            "club"
        ]
    },
    {
        "SQL": "SELECT SUM( grants.grant_amount ) FROM grants JOIN organisation_types ON grants.organisation_id = organisation_types.organisation_type WHERE organisation_types.organisation_type_description = 'research'",
        "hyp_correct": false,
        "NL_query": "What is the total grant amount of the organisations described as research?",
        "index": 2147,
        "GT": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "grants",
            "organisations",
            "organisation_types"
        ]
    },
    {
        "SQL": "SELECT SUM( grants.grant_amount ) FROM grants WHERE grants.grant_id = 'research'",
        "hyp_correct": false,
        "NL_query": "What is the total amount of grant money for research?",
        "index": 2148,
        "GT": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisation_types",
            "grants",
            "organisations"
        ]
    },
    {
        "SQL": "SELECT projects.project_details FROM projects JOIN project_staff ON projects.project_id = project_staff.project_id WHERE project_staff.role_code = 'researcher'",
        "hyp_correct": false,
        "NL_query": "List the project details of the projects which did not hire any staff for a researcher role.",
        "index": 2149,
        "GT": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects",
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT projects.project_details FROM projects JOIN project_staff ON projects.project_id = project_staff.project_id WHERE project_staff.role_code = (SELECT project_staff.project_id FROM project_staff UNION SELECT project_staff.role_code FROM project_staff)",
        "hyp_correct": false,
        "NL_query": "What are the details for all projects that did not hire any staff in a research role?",
        "index": 2150,
        "GT": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects",
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT project_staff.project_id , COUNT( * ) FROM project_staff GROUP BY project_staff.project_id",
        "hyp_correct": false,
        "NL_query": "How many staff does each project has? List the project id and the number in an ascending order.",
        "index": 2151,
        "GT": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects",
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT project_staff.project_id , COUNT( * ) FROM project_staff GROUP BY project_staff.project_id",
        "hyp_correct": false,
        "NL_query": "For each project id, how many staff does it have? List them in increasing order.",
        "index": 2152,
        "GT": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects",
            "project_staff"
        ]
    },
    {
        "SQL": "SELECT projects.project_details FROM projects JOIN project_outcomes ON projects.project_id = project_outcomes.project_id",
        "hyp_correct": false,
        "NL_query": "Which projects have no outcome? List the project details.",
        "index": 2153,
        "GT": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects",
            "project_outcomes"
        ]
    },
    {
        "SQL": "SELECT projects.project_details FROM projects EXCEPT SELECT projects.project_details FROM projects JOIN project_outcomes ON projects.project_id = project_outcomes.project_id",
        "hyp_correct": false,
        "NL_query": "What are the details of the project with no outcomes?",
        "index": 2154,
        "GT": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects",
            "project_outcomes"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , grants.grant_id FROM documents JOIN grants ON documents.grant_id = grants.grant_id GROUP BY grants.grant_id HAVING COUNT( * ) > 1",
        "hyp_correct": false,
        "NL_query": "How many documents can one grant have at most? List the grant id and number.",
        "index": 2155,
        "GT": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
        "DB": "tracking_grants_for_research",
        "tables": [
            "documents",
            "grants"
        ]
    },
    {
        "SQL": "SELECT organisations.organisation_details FROM organisations WHERE organisations.organisation_type = 'Sponsor' ORDER BY organisations.organisation_details ASC",
        "hyp_correct": false,
        "NL_query": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "index": 2157,
        "GT": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisation_types",
            "organisations"
        ]
    },
    {
        "SQL": "SELECT organisations.organisation_details FROM organisations WHERE organisations.organisation_type = 'Sponsors' ORDER BY organisations.organisation_details ASC",
        "hyp_correct": false,
        "NL_query": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
        "index": 2158,
        "GT": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
        "DB": "tracking_grants_for_research",
        "tables": [
            "organisation_types",
            "organisations"
        ]
    },
    {
        "SQL": "SELECT projects.project_details FROM projects ORDER BY projects.organisation_id ASC",
        "hyp_correct": false,
        "NL_query": "List the project details of the projects launched by the organisation",
        "index": 2161,
        "GT": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects"
        ]
    },
    {
        "SQL": "SELECT projects.project_details FROM projects GROUP BY projects.organisation_id ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the details for the projects which were launched by the organization with the most projects?",
        "index": 2162,
        "GT": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "DB": "tracking_grants_for_research",
        "tables": [
            "projects"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM person WHERE person.age > (SELECT MAX( person.age ) FROM person WHERE person.job = 'engineers')",
        "hyp_correct": false,
        "NL_query": "Find the number of people whose age is greater than all engineers.",
        "index": 2167,
        "GT": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , person.job FROM person WHERE person.job = 'engineer' GROUP BY person.job",
        "hyp_correct": false,
        "NL_query": "How many people are older than every engineer?",
        "index": 2168,
        "GT": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "DB": "network_2",
        "tables": [
            "person"
        ]
    },
    {
        "SQL": "SELECT person.name , person.age FROM person JOIN personfriend ON person.name = personfriend.name WHERE personfriend.friend = 'Dan' OR personfriend.friend = 'Alice'",
        "hyp_correct": false,
        "NL_query": "Find the name and age of the person who is a friend of Dan or Alice.",
        "index": 2169,
        "GT": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT DISTINCT personfriend.name , person.age FROM person JOIN personfriend ON person.name = personfriend.name WHERE person.gender = 'Dan' OR person.gender = 'alice'",
        "hyp_correct": false,
        "NL_query": "What are the different names and ages of every friend of either Dan or alice?",
        "index": 2170,
        "GT": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT person.name FROM person WHERE person.name NOT IN (SELECT personfriend.name FROM personfriend WHERE personfriend.friend = 'student')",
        "hyp_correct": false,
        "NL_query": "Find the name of the person who has no student friends.",
        "index": 2171,
        "GT": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT person.name FROM person EXCEPT SELECT personfriend.name FROM personfriend WHERE personfriend.friend = 'students'",
        "hyp_correct": false,
        "NL_query": "What are the names of the people who have no friends who are students?",
        "index": 2172,
        "GT": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT person.name FROM person WHERE personfriend.friend NOT IN (SELECT personfriend.name FROM personfriend)",
        "hyp_correct": false,
        "NL_query": "What are the names of all people who do not have friends?",
        "index": 2174,
        "GT": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "DB": "network_2",
        "tables": [
            "personfriend",
            "person"
        ]
    },
    {
        "SQL": "SELECT customers.customer_name FROM customers JOIN mailshot_customers ON customers.customer_id = mailshot_customers.customer_id GROUP BY mailshot_customers.customer_id HAVING COUNT( * ) >= 2",
        "hyp_correct": false,
        "NL_query": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "index": 2177,
        "GT": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "DB": "customers_campaigns_ecommerce",
        "tables": [
            "customers",
            "mailshot_customers"
        ]
    },
    {
        "SQL": "SELECT department.dname FROM minor_in JOIN department ON minor_in.dno = department.dno GROUP BY minor_in.dno HAVING COUNT( * ) = 1",
        "hyp_correct": false,
        "NL_query": "What is the name of the department htat has no students minoring in it?",
        "index": 2179,
        "GT": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "DB": "college_3",
        "tables": [
            "minor_in",
            "department"
        ]
    },
    {
        "SQL": "SELECT DISTINCT student.fname FROM student JOIN enrolled_in ON student.stuid = enrolled_in.stuid JOIN gradeconversion ON gradeconversion.lettergrade = enrolled_in.stuid WHERE gradeconversion.gradepoint >= 3.8 GROUP BY enrolled_in.stuid",
        "hyp_correct": false,
        "NL_query": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
        "index": 2182,
        "GT": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "DB": "college_3",
        "tables": [
            "enrolled_in",
            "student",
            "gradeconversion"
        ]
    },
    {
        "SQL": "SELECT DISTINCT student.fname FROM enrolled_in JOIN student ON enrolled_in.stuid = student.stuid WHERE gradeconversion.gradepoint >= 3.8 GROUP BY enrolled_in.stuid HAVING COUNT( * ) >= 3",
        "hyp_correct": false,
        "NL_query": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
        "index": 2183,
        "GT": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "DB": "college_3",
        "tables": [
            "enrolled_in",
            "student",
            "gradeconversion"
        ]
    },
    {
        "SQL": "SELECT faculty.lname FROM faculty JOIN member_of ON faculty.facid = member_of.facid JOIN department ON member_of.dno = department.dno WHERE department.dname = 'computer science'",
        "hyp_correct": false,
        "NL_query": "Find the last names of faculties who are members of computer science department.",
        "index": 2184,
        "GT": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "DB": "college_3",
        "tables": [
            "member_of",
            "faculty",
            "department"
        ]
    },
    {
        "SQL": "SELECT faculty.lname FROM faculty JOIN member_of ON faculty.facid = member_of.facid JOIN department ON member_of.dno = department.dno WHERE department.dname = 'computer science'",
        "hyp_correct": false,
        "NL_query": "What are the last names of faculty who are part of the computer science department?",
        "index": 2185,
        "GT": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "DB": "college_3",
        "tables": [
            "member_of",
            "faculty",
            "department"
        ]
    },
    {
        "SQL": "SELECT AVG( gradeconversion.gradepoint ) FROM student WHERE student.lname = 'Smith'",
        "hyp_correct": false,
        "NL_query": "Find the average grade point of student whose last name is Smith.",
        "index": 2186,
        "GT": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "DB": "college_3",
        "tables": [
            "enrolled_in",
            "student",
            "gradeconversion"
        ]
    },
    {
        "SQL": "SELECT AVG( gradeconversion.gradepoint ) FROM student WHERE student.lname = 'Smith'",
        "hyp_correct": false,
        "NL_query": "What is the average gradepoint for students with the last name Smith?",
        "index": 2187,
        "GT": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "DB": "college_3",
        "tables": [
            "enrolled_in",
            "student",
            "gradeconversion"
        ]
    },
    {
        "SQL": "SELECT MAX( gradeconversion.gradepoint ) , MIN( gradeconversion.gradepoint ) FROM student WHERE student.city_code = 'NYC'",
        "hyp_correct": false,
        "NL_query": "What is the maximum and minimum grade point of students who live in NYC?",
        "index": 2188,
        "GT": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "DB": "college_3",
        "tables": [
            "enrolled_in",
            "student",
            "gradeconversion"
        ]
    },
    {
        "SQL": "SELECT MAX( gradeconversion.gradepoint ) , MIN( gradeconversion.gradepoint ) FROM student WHERE student.city_code = 'NYC'",
        "hyp_correct": false,
        "NL_query": "Give the maximum and minimum gradepoints for students living in NYC?",
        "index": 2189,
        "GT": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "DB": "college_3",
        "tables": [
            "enrolled_in",
            "student",
            "gradeconversion"
        ]
    },
    {
        "SQL": "SELECT course.cname FROM course WHERE course.credits = '4' UNION SELECT course.cname FROM course WHERE course.credits = 3 AND course.hours = '4'",
        "hyp_correct": false,
        "NL_query": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "index": 2190,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "DB": "college_3",
        "tables": [
            "course"
        ]
    },
    {
        "SQL": "SELECT course.cname FROM course JOIN 3 credits, or 1 ON course.credits = 3 credits, or 1 UNION SELECT course.cname FROM course WHERE course.credits = 1 AND course.hours = 4",
        "hyp_correct": false,
        "NL_query": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "index": 2191,
        "GT": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "DB": "college_3",
        "tables": [
            "or",
            "course"
        ]
    },
    {
        "SQL": "SELECT tryout.cname FROM tryout JOIN player ON tryout.pid = player.pid WHERE player.pname LIKE '%D%'",
        "hyp_correct": false,
        "NL_query": "Which colleges do the tryout players whose name starts with letter D go to?",
        "index": 2214,
        "GT": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "SELECT tryout.cname FROM tryout JOIN player ON tryout.pid = player.pid WHERE player.pname LIKE '%D%'",
        "hyp_correct": false,
        "NL_query": "Which colleges does each player with a name that starts with the letter D  who tried out go to?",
        "index": 2215,
        "GT": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "DB": "soccer_2",
        "tables": [
            "player",
            "tryout"
        ]
    },
    {
        "SQL": "SELECT tryout.cname FROM tryout WHERE tryout.ppos = 'goal' INTERSECT SELECT tryout.cname FROM tryout WHERE tryout.ppos = 'mid'",
        "hyp_correct": false,
        "NL_query": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
        "index": 2217,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT tryout.cname FROM tryout WHERE tryout.ppos = 'mid' EXCEPT SELECT tryout.cname FROM tryout WHERE tryout.ppos = 'goalies'",
        "hyp_correct": false,
        "NL_query": "What are the names of the schools with some players in the mid position but no goalies?",
        "index": 2219,
        "GT": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "DB": "soccer_2",
        "tables": [
            "tryout"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , dorm.dormid FROM dorm JOIN has_amenity ON dorm.dormid = has_amenity.dormid GROUP BY dorm.dormid",
        "hyp_correct": false,
        "NL_query": "For each dorm, how many amenities does it have?",
        "index": 2263,
        "GT": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "DB": "dorm_1",
        "tables": [
            "has_amenity",
            "dorm"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM student JOIN lives_in ON student.stuid = lives_in.stuid JOIN dorm ON dorm.dormid = lives_in.dormid WHERE dorm.gender = 'm'",
        "hyp_correct": false,
        "NL_query": "Find the total number of students living in the male dorm (with gender M).",
        "index": 2266,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "dorm",
            "lives_in"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM student JOIN lives_in ON student.stuid = lives_in.stuid JOIN dorm ON dorm.dormid = lives_in.dormid WHERE dorm.gender = 'm'",
        "hyp_correct": false,
        "NL_query": "What are the total number of students who are living in a male dorm?",
        "index": 2267,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "dorm",
            "lives_in"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM student JOIN lives_in ON student.stuid = lives_in.stuid JOIN dorm ON dorm.dormid = lives_in.dormid WHERE dorm.dorm_name = 'Smith Hall' AND student.sex = 'f'",
        "hyp_correct": false,
        "NL_query": "How many female students live in Smith Hall?",
        "index": 2269,
        "GT": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "DB": "dorm_1",
        "tables": [
            "student",
            "dorm",
            "lives_in"
        ]
    },
    {
        "SQL": "SELECT customers.state FROM customers GROUP BY customers.state ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which state has the most customers?",
        "index": 2284,
        "GT": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT customers.state FROM customers GROUP BY customers.state ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Give the state that has the most customers.",
        "index": 2285,
        "GT": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "DB": "customer_complaints",
        "tables": [
            "customers"
        ]
    },
    {
        "SQL": "SELECT sportsinfo.onscholarship FROM sportsinfo JOIN student ON sportsinfo.stuid = student.stuid WHERE student.major = 600 AND sportsinfo.onscholarship = 'y'",
        "hyp_correct": false,
        "NL_query": "Show student ids who are on scholarship and have major 600.",
        "index": 2292,
        "GT": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT sportsinfo.stuid FROM sportsinfo JOIN student ON sportsinfo.stuid = student.stuid WHERE sportsinfo.onscholarship = 'y' AND sportsinfo.onscholarship = 'y' AND student.major = 600",
        "hyp_correct": false,
        "NL_query": "What are the student ids for those on scholarship in major number 600?",
        "index": 2293,
        "GT": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT sportsinfo.stuid FROM sportsinfo WHERE student.sex = 'f' AND sportsinfo.sportname = 'football'",
        "hyp_correct": false,
        "NL_query": "Show student ids who are female and play football.",
        "index": 2294,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT sportsinfo.stuid FROM sportsinfo WHERE student.sex = 'f' AND sportsinfo.sportname = 'football'",
        "hyp_correct": false,
        "NL_query": "What are the ids of all female students who play football?",
        "index": 2295,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT student.stuid FROM sportsinfo JOIN student ON sportsinfo.stuid = student.stuid WHERE student.sex = 'm' AND sportsinfo.sportname != 'football'",
        "hyp_correct": false,
        "NL_query": "Show all male student ids who don't play football.",
        "index": 2296,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT sportsinfo.stuid FROM sportsinfo",
        "hyp_correct": false,
        "NL_query": "What are the ids of all male students who do not play football?",
        "index": 2297,
        "GT": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "DB": "game_1",
        "tables": [
            "student",
            "sportsinfo"
        ]
    },
    {
        "SQL": "SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT sportsinfo.stuid FROM plays_games UNION SELECT plays_games.stuid FROM plays_games)",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students who are not video game players?",
        "index": 2301,
        "GT": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "student",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT plays_games.stuid FROM plays_games INTERSECT SELECT sportsinfo.sportname FROM sportsinfo",
        "hyp_correct": false,
        "NL_query": "Show ids of students who play video game and play sports.",
        "index": 2302,
        "GT": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT plays_games.stuid FROM plays_games INTERSECT SELECT sportsinfo.sportname FROM sportsinfo",
        "hyp_correct": false,
        "NL_query": "What are the ids of all students who played video games and sports?",
        "index": 2303,
        "GT": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "DB": "game_1",
        "tables": [
            "sportsinfo",
            "plays_games"
        ]
    },
    {
        "SQL": "SELECT services.service_name FROM services WHERE services.service_id NOT IN (SELECT forms.service_id FROM forms)",
        "hyp_correct": false,
        "NL_query": "Find name of the services that has never been used.",
        "index": 2310,
        "GT": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "DB": "e_government",
        "tables": [
            "party_services",
            "services",
            "forms"
        ]
    },
    {
        "SQL": "SELECT services.service_name FROM services WHERE services.service_id NOT IN (SELECT forms.service_id FROM forms)",
        "hyp_correct": false,
        "NL_query": "What are the names of the services that have never been used?",
        "index": 2311,
        "GT": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "DB": "e_government",
        "tables": [
            "party_services",
            "services",
            "forms"
        ]
    },
    {
        "SQL": "SELECT addresses.town_city , addresses.state_province_county FROM addresses",
        "hyp_correct": false,
        "NL_query": "Find the name of all the cities and states.",
        "index": 2312,
        "GT": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "SELECT addresses.town_city , addresses.state_province_county FROM addresses",
        "hyp_correct": false,
        "NL_query": "What are the names of all cities and states?",
        "index": 2313,
        "GT": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "DB": "e_government",
        "tables": [
            "addresses"
        ]
    },
    {
        "SQL": "SELECT documents.document_id FROM documents JOIN documents_with_expenses ON documents.document_id = documents_with_expenses.document_id WHERE documents.document_type_code = 'CV'",
        "hyp_correct": false,
        "NL_query": "Show ids for all documents in type CV without expense budgets.",
        "index": 2326,
        "GT": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses"
        ]
    },
    {
        "SQL": "SELECT documents_with_expenses.document_id FROM documents_with_expenses INTERSECT SELECT documents.document_id FROM documents WHERE documents.document_type_code = 'CV'",
        "hyp_correct": false,
        "NL_query": "What are the ids of documents with the type code CV that do not have expenses.",
        "index": 2327,
        "GT": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses"
        ]
    },
    {
        "SQL": "SELECT DISTINCT documents.document_name FROM documents_with_expenses JOIN documents ON documents_with_expenses.document_id = documents.document_id WHERE documents.document_name LIKE '%s%'",
        "hyp_correct": false,
        "NL_query": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "index": 2329,
        "GT": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "documents",
            "documents_with_expenses"
        ]
    },
    {
        "SQL": "SELECT accounts.account_details FROM accounts WHERE accounts.account_details LIKE '%5%'",
        "hyp_correct": false,
        "NL_query": "What are the account details with the largest value or with value having char '5' in it?",
        "index": 2330,
        "GT": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "SELECT accounts.account_details FROM accounts WHERE accounts.account_details LIKE '%5%'",
        "hyp_correct": false,
        "NL_query": "Return the account details with the greatest value, as well as those that include the character 5.",
        "index": 2331,
        "GT": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "DB": "cre_Docs_and_Epenses",
        "tables": [
            "accounts"
        ]
    },
    {
        "SQL": "SELECT lessons.lesson_id FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name = 'Janessa, last name as Sawayn' AND staff.last_name = 's'",
        "hyp_correct": false,
        "NL_query": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "index": 2338,
        "GT": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "staff"
        ]
    },
    {
        "SQL": "SELECT lessons.lesson_id FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.nickname LIKE '%s%'",
        "hyp_correct": false,
        "NL_query": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
        "index": 2339,
        "GT": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "staff"
        ]
    },
    {
        "SQL": "SELECT customers.last_name FROM customers UNION SELECT staff.last_name FROM staff",
        "hyp_correct": false,
        "NL_query": "What are the last names that are used by customers and staff?",
        "index": 2343,
        "GT": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "DB": "driving_school",
        "tables": [
            "customers",
            "staff"
        ]
    },
    {
        "SQL": "SELECT staff.first_name FROM staff WHERE staff.staff_id NOT IN (SELECT lessons.staff_id FROM lessons)",
        "hyp_correct": false,
        "NL_query": "What is the first name of the staff who did not give any lesson?",
        "index": 2344,
        "GT": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "staff"
        ]
    },
    {
        "SQL": "SELECT staff.first_name FROM staff WHERE staff.staff_id NOT IN (SELECT lessons.staff_id FROM lessons)",
        "hyp_correct": false,
        "NL_query": "What is the first name of all employees who do not give any lessons?",
        "index": 2345,
        "GT": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "DB": "driving_school",
        "tables": [
            "lessons",
            "staff"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , airports.city FROM airports WHERE airports.country = 'US' GROUP BY airports.city ORDER BY COUNT( * ) DESC",
        "hyp_correct": false,
        "NL_query": "How many airports are there per city in the US ordered from most to least?",
        "index": 2349,
        "GT": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "airports"
        ]
    },
    {
        "SQL": "SELECT routes.src_ap , airports.name , COUNT( * ) FROM routes JOIN airports ON routes.src_apid = airports.apid GROUP BY routes.src_ap ORDER BY COUNT( * ) DESC",
        "hyp_correct": false,
        "NL_query": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",
        "index": 2350,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) , airports.name FROM airports JOIN routes ON airports.apid = routes.src_apid GROUP BY airports.name ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "index": 2351,
        "GT": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM routes JOIN airlines ON routes.alid = airlines.alid JOIN airports ON routes.dst_apid = airports.apid WHERE airports.country = 'American Airlines' AND airlines.country = 'Italy'",
        "hyp_correct": false,
        "NL_query": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "index": 2352,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airlines",
            "airports"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM routes JOIN airlines ON routes.alid = airlines.alid WHERE airlines.country = 'Italy' AND airlines.callsign = 'American Airlines'",
        "hyp_correct": false,
        "NL_query": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
        "index": 2353,
        "GT": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "DB": "flight_4",
        "tables": [
            "routes",
            "airlines",
            "airports"
        ]
    },
    {
        "SQL": "SELECT products.product_name , COUNT( * ) FROM products JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_name",
        "hyp_correct": false,
        "NL_query": "List the name and count of each product in all orders.",
        "index": 2356,
        "GT": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "DB": "tracking_orders",
        "tables": [
            "orders",
            "products",
            "order_items"
        ]
    },
    {
        "SQL": "SELECT stadium.name FROM concert, stadium WHERE stadium.stadium_id = (SELECT stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND concert.year = 2014)",
        "hyp_correct": false,
        "NL_query": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "index": 2367,
        "GT": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (SELECT concert.stadium_id FROM stadium WHERE concert.year = 2014)",
        "hyp_correct": false,
        "NL_query": "What are the names of all stadiums that did not have a concert in 2014?",
        "index": 2368,
        "GT": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id ORDER BY stadium.capacity DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Find the number of concerts happened in the stadium with the highest capacity .",
        "index": 2371,
        "GT": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id ORDER BY stadium.capacity DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "index": 2372,
        "GT": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "DB": "concert_singer",
        "tables": [
            "concert",
            "stadium"
        ]
    },
    {
        "SQL": "SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.horsepower ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which model of the car has the minimum horsepower?",
        "index": 2373,
        "GT": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT model_list.model FROM cars_data ORDER BY cars_data.horsepower ASC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the model of the car with the smallest amount of horsepower?",
        "index": 2374,
        "GT": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT DISTINCT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980",
        "hyp_correct": false,
        "NL_query": "Which distinct car models are the produced after 1980?",
        "index": 2375,
        "GT": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "model_list",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT DISTINCT model_list.model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cars_data.year > 1980",
        "hyp_correct": false,
        "NL_query": "What are the different models for the cards produced after 1980?",
        "index": 2376,
        "GT": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "model_list",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT continents.continent , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent",
        "hyp_correct": false,
        "NL_query": "How many car makers are there in each continents? List the continent name and the count.",
        "index": 2377,
        "GT": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "continents",
            "countries"
        ]
    },
    {
        "SQL": "SELECT continents.continent , COUNT( * ) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent",
        "hyp_correct": false,
        "NL_query": "What is the name of each continent and how many car makers are there in each one?",
        "index": 2378,
        "GT": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "continents",
            "countries"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'",
        "hyp_correct": false,
        "NL_query": "How many car models are produced in the usa?",
        "index": 2379,
        "GT": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list",
            "countries"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'United States'",
        "hyp_correct": false,
        "NL_query": "What is the count of the car models produced in the United States?",
        "index": 2380,
        "GT": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "model_list",
            "countries"
        ]
    },
    {
        "SQL": "SELECT model_list.model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid ORDER BY cars_data.mpg DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "index": 2381,
        "GT": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "cars_data",
            "model_list",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model GROUP BY model_list.model ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "Which model has the most version(make) of cars?",
        "index": 2383,
        "GT": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "model_list",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT model_list.model FROM model_list GROUP BY model_list.model ORDER BY COUNT( * ) DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What model has the most different versions?",
        "index": 2384,
        "GT": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "DB": "car_1",
        "tables": [
            "model_list",
            "car_names"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM cars_data ORDER BY cars_data.horsepower DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "index": 2385,
        "GT": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT COUNT( * ) FROM cars_data ORDER BY cars_data.horsepower DESC LIMIT 1",
        "hyp_correct": false,
        "NL_query": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "index": 2386,
        "GT": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "DB": "car_1",
        "tables": [
            "cars_data"
        ]
    },
    {
        "SQL": "SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)",
        "hyp_correct": false,
        "NL_query": "What are the name of the countries where there is not a single car maker?",
        "index": 2387,
        "GT": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)",
        "hyp_correct": false,
        "NL_query": "What are the names of the countries with no car makers?",
        "index": 2388,
        "GT": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "DB": "car_1",
        "tables": [
            "car_makers",
            "countries"
        ]
    },
    {
        "SQL": "SELECT shop.name FROM shop WHERE shop.shop_id = 'no'",
        "hyp_correct": false,
        "NL_query": "Which shops run with no employees? Find the shop names",
        "index": 2396,
        "GT": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "DB": "employee_hire_evaluation",
        "tables": [
            "hiring",
            "shop"
        ]
    },
    {
        "SQL": "SELECT shop.district FROM shop WHERE shop.number_products > 3000 INTERSECT SELECT shop.district FROM shop WHERE shop.number_products > 10000",
        "hyp_correct": false,
        "NL_query": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "index": 2397,
        "GT": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "DB": "employee_hire_evaluation",
        "tables": [
            "shop"
        ]
    },
    {
        "SQL": "SELECT tv_channel.package_option FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones'",
        "hyp_correct": false,
        "NL_query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "index": 2407,
        "GT": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    },
    {
        "SQL": "SELECT tv_channel.package_option FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones'",
        "hyp_correct": false,
        "NL_query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "index": 2408,
        "GT": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "DB": "tvshow",
        "tables": [
            "cartoon",
            "tv_channel"
        ]
    }
]